<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Test Results &mdash; GouldiAutomaticComparisonTest</title>
<style type="text/css">
          html {
            height: 100%
          }

          body {
            margin: 0 auto;
            padding: 0;
            text-align: left;
            height: 100%;
            font-family: myriad, arial, tahoma, verdana, sans-serif;
            color: #151515;
            font-size: 90%;
            line-height: 1.3em;
            background-color: #fff;
          }

          * {
            margin: 0;
            padding: 0
          }

          .clr {
            clear: both;
            overflow: hidden;
          }

          img {
            border: none
          }

          a {
            color: #0046b0;
            text-decoration: none;
          }

          a:hover {
            text-decoration: none;
          }

          a:focus, a:active {
            outline: none
          }

          .noborder {
            border: none
          }

          h1 {
            color: #151515;
            font-size: 180%;
            line-height: 1.1em;
            font-weight: bold;
          }

          h2 {
            color: #393D42;
            font-size: 160%;
            font-weight: normal
          }

          h3 {
            font-size: 120%;
            font-weight: bold;
            margin-bottom: .5em
          }

          h4 {
            font-size: 110%;
          }

          h5 {
            font-size: 110%;
          }

          span.failed {
            color: #ff0000
          }

          span.error {
            color: #ff0000
          }

          span.passed {
            color: #1d9d01
          }

          span.ignored {
            color: #fff600
          }

          span.skipped {
            color: #fff600
          }

          hr {
            background-color: blue
          }

          #container {
            min-width: 30em;
          }

          #header {
            padding: 0;
            position: fixed;
            width: 100%;
            z-index: 10;
            background-color: #c7ceda;
          }

          #header h1 {
            margin: 1em 3em 1em 1.7em;
          }

          #header h1 strong {
            white-space: nowrap;
          }

          #header .time {
            margin-top: 2.2em;
            margin-right: 3.4em;
            float: right;
          }

          #treecontrol {
            margin: 0;
            padding: .5em 3em .5em 0;
            text-align: right;
            background-color: #fff;
          }

          #treecontrol ul li {
            display: inline;
            list-style: none;
            color: #666;
          }

          #content {
            padding: 0 2.5em 2em 1.7em;
          }

          #content ul {
            margin: .4em 0 .1em 2em;
            list-style: none;
          }

          #content ul li.level {
            cursor: pointer;
          }

          #content ul li.level span {
            display: block;
            font-weight: bold;
          }

          #content ul li.level.top {
            margin-bottom: .3em;
          }

          #content ul li.level.top > span {
            padding: .5em 0 .5em 1em;
            font-size: 120%;
            color: #151515;
            background-color: #f2f2f2;
            border-left: solid 10px #93e078;
          }

          #content ul li.level.top.failed > span {
            border-left: solid 10px #f02525;
          }

          #content ul li.level.top.ignored > span {
            border-left: solid 10px #f8d216;
          }

          #content ul li.level.suite > span {
            margin-bottom: .8em;
            padding: 0 0 0 .8em;
            display: block;
            font-size: 110%;
            line-height: 1em;
            color: #151515;
            border-left: solid 15px #93e078;
          }

          #content ul li.level.suite.failed > span {
            border-left: solid 15px #f02525;
          }

          #content ul li.level.suite.ignored > span {
            border-left: solid 15px #f8d216;
          }

          #content ul li.level.suite > ul {
            margin-bottom: 1.5em;
          }

          #content ul li.level.test > span {
            padding: .3em 0 .3em 1em;
            color: #0046b0;
            font-size: 100%;
            border-left: solid 6px #93e078;
            border-bottom: solid 1px #dbdbdb;
          }

          #content ul li.level.test.failed > span {
            border-left: solid 6px #f02525;
          }

          #content ul li.level.test.ignored > span {
            border-left: solid 6px #f8d216;
          }

          #content ul li.text p, #content ul li.text span {
            margin-bottom: 1.5em;
            color: #151515 !important;
            font-size: 90% !important;
            font-weight: normal !important;
            overflow-x: auto;
            cursor: auto !important;
            background: none !important;
            border: none !important;
          }

          #content ul li.text span {
            margin-bottom: 0;
            display: block;
          }

          #content ul li.text span.stderr {
            color: #8b0000 !important;
          }

          #content ul li .time {
            margin-right: .5em;
            width: 5em;
            text-align: right;
            font-size: 13px;
            color: #151515;
            font-style: normal;
            font-weight: normal;
            float: right;
          }

          #content ul li span .status {
            width: 6em;
            font-size: 90%;
            color: #1d9d01;
            font-style: normal;
            font-weight: normal;
            float: right;
            text-align: right;
          }

          #content ul li.failed > span .status {
            color: #ff0000;
          }

          #content ul li.ignored > span .status {
            color: #d6b000;
          }

          #footer {
              height: 2em;
              background-color: #c7ceda;
          }
          #footer p {
              padding: .4em 0 0 3.6em;
              font-size: 80%;
          }
        </style>

<script type="text/javascript">
eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('(G(){9(1n E!="11")H w=E;H E=17.16=G(a,c){9(17==6||!6.4K)I 1q E(a,c);I 6.4K(a,c)};9(1n $!="11")H D=$;17.$=E;H u=/^[^<]*(<(.|\\s)+>)[^>]*$|^#(\\w+)$/;E.1b=E.3x={4K:G(a,c){a=a||U;9(1n a=="1M"){H m=u.2L(a);9(m&&(m[1]||!c)){9(m[1])a=E.4I([m[1]],c);J{H b=U.42(m[3]);9(b)9(b.1T!=m[3])I E().1X(a);J{6[0]=b;6.L=1;I 6}J a=[]}}J I 1q E(c).1X(a)}J 9(E.1p(a))I 1q E(U)[E.1b.2d?"2d":"37"](a);I 6.6u(a.1d==1C&&a||(a.4d||a.L&&a!=17&&!a.1z&&a[0]!=11&&a[0].1z)&&E.2h(a)||[a])},4d:"1.2",82:G(){I 6.L},L:0,28:G(a){I a==11?E.2h(6):6[a]},2v:G(a){H b=E(a);b.4Y=6;I b},6u:G(a){6.L=0;1C.3x.1a.15(6,a);I 6},O:G(a,b){I E.O(6,a,b)},4J:G(a){H b=-1;6.O(G(i){9(6==a)b=i});I b},1y:G(f,d,e){H c=f;9(f.1d==3T)9(d==11)I 6.L&&E[e||"1y"](6[0],f)||11;J{c={};c[f]=d}I 6.O(G(a){M(H b 1j c)E.1y(e?6.R:6,b,E.1c(6,c[b],e,a,b))})},18:G(b,a){I 6.1y(b,a,"3O")},2t:G(e){9(1n e!="5w"&&e!=S)I 6.4o().3e(U.6F(e));H t="";E.O(e||6,G(){E.O(6.2X,G(){9(6.1z!=8)t+=6.1z!=1?6.6x:E.1b.2t([6])})});I t},5l:G(b){9(6[0])E(b,6[0].3N).6t().38(6[0]).1W(G(){H a=6;1Y(a.1t)a=a.1t;I a}).3e(6);I 6},8p:G(a){I 6.O(G(){E(6).6p().5l(a)})},8h:G(a){I 6.O(G(){E(6).5l(a)})},3e:G(){I 6.3s(1k,Q,1,G(a){6.57(a)})},6k:G(){I 6.3s(1k,Q,-1,G(a){6.38(a,6.1t)})},6g:G(){I 6.3s(1k,P,1,G(a){6.14.38(a,6)})},53:G(){I 6.3s(1k,P,-1,G(a){6.14.38(a,6.2i)})},1B:G(){I 6.4Y||E([])},1X:G(t){H b=E.1W(6,G(a){I E.1X(t,a)});I 6.2v(/[^+>] [^+>]/.12(t)||t.1e("..")>-1?E.4V(b):b)},6t:G(e){H f=6.1W(G(){I 6.66?E(6.66)[0]:6.4S(Q)});9(e===Q){H d=f.1X("*").4Q();6.1X("*").4Q().O(G(i){H c=E.K(6,"2A");M(H a 1j c)M(H b 1j c[a])E.1h.1f(d[i],a,c[a][b],c[a][b].K)})}I f},1A:G(t){I 6.2v(E.1p(t)&&E.2T(6,G(b,a){I t.15(b,[a])})||E.3G(t,6))},5T:G(t){I 6.2v(t.1d==3T&&E.3G(t,6,Q)||E.2T(6,G(a){I(t.1d==1C||t.4d)?E.2S(a,t)<0:a!=t}))},1f:G(t){I 6.2v(E.1S(6.28(),t.1d==3T?E(t).28():t.L!=11&&(!t.Y||t.Y=="7t")?t:[t]))},3j:G(a){I a?E.3G(a,6).L>0:P},7g:G(a){I 6.3j("."+a)},2V:G(b){9(b==11){9(6.L){H c=6[0];9(E.Y(c,"24")){H e=c.4z,a=[],W=c.W,2P=c.N=="24-2P";9(e<0)I S;M(H i=2P?e:0,2Y=2P?e+1:W.L;i<2Y;i++){H d=W[i];9(d.29){H b=E.V.1g&&!d.70["1N"].9U?d.2t:d.1N;9(2P)I b;a.1a(b)}}I a}J I 6[0].1N.1o(/\\r/g,"")}}J I 6.O(G(){9(b.1d==1C&&/4s|5u/.12(6.N))6.2K=(E.2S(6.1N,b)>=0||E.2S(6.2J,b)>=0);J 9(E.Y(6,"24")){H a=b.1d==1C?b:[b];E("9m",6).O(G(){6.29=(E.2S(6.1N,a)>=0||E.2S(6.2t,a)>=0)});9(!a.L)6.4z=-1}J 6.1N=b})},4n:G(a){I a==11?(6.L?6[0].3D:S):6.4o().3e(a)},6H:G(a){I 6.53(a).2e()},2s:G(){I 6.2v(1C.3x.2s.15(6,1k))},1W:G(b){I 6.2v(E.1W(6,G(a,i){I b.3c(a,i,a)}))},4Q:G(){I 6.1f(6.4Y)},3s:G(f,d,g,e){H c=6.L>1,a;I 6.O(G(){9(!a){a=E.4I(f,6.3N);9(g<0)a.91()}H b=6;9(d&&E.Y(6,"1F")&&E.Y(a[0],"4k"))b=6.4q("1J")[0]||6.57(U.5r("1J"));E.O(a,G(){9(E.Y(6,"1P")){9(6.3g)E.3w({1u:6.3g,3h:P,1Z:"1P"});J E.5h(6.2t||6.6s||6.3D||"")}J e.15(b,[c?6.4S(Q):6])})})}};E.1i=E.1b.1i=G(){H c=1k[0]||{},a=1,2g=1k.L,5e=P;9(c.1d==8v){5e=c;c=1k[1]||{}}9(2g==1){c=6;a=0}H b;M(;a<2g;a++)9((b=1k[a])!=S)M(H i 1j b){9(c==b[i])6r;9(5e&&1n b[i]==\'5w\'&&c[i])E.1i(c[i],b[i]);J 9(b[i]!=11)c[i]=b[i]}I c};H F="16"+(1q 3v()).3u(),6q=0,5d={};E.1i({8k:G(a){17.$=D;9(a)17.16=w;I E},1p:G(a){I!!a&&1n a!="1M"&&!a.Y&&a.1d!=1C&&/G/i.12(a+"")},4a:G(a){I a.35&&!a.1K||a.34&&a.3N&&!a.3N.1K},5h:G(a){a=E.33(a);9(a){9(17.6o)17.6o(a);J 9(E.V.1H)17.58(a,0);J 3p.3c(17,a)}},Y:G(b,a){I b.Y&&b.Y.26()==a.26()},1I:{},K:G(c,d,b){c=c==17?5d:c;H a=c[F];9(!a)a=c[F]=++6q;9(d&&!E.1I[a])E.1I[a]={};9(b!=11)E.1I[a][d]=b;I d?E.1I[a][d]:a},30:G(c,b){c=c==17?5d:c;H a=c[F];9(b){9(E.1I[a]){2G E.1I[a][b];b="";M(b 1j E.1I[a])22;9(!b)E.30(c)}}J{2c{2G c[F]}27(e){9(c.54)c.54(F)}2G E.1I[a]}},O:G(a,b,c){9(c){9(a.L==11)M(H i 1j a)b.15(a[i],c);J M(H i=0,45=a.L;i<45;i++)9(b.15(a[i],c)===P)22}J{9(a.L==11)M(H i 1j a)b.3c(a[i],i,a[i]);J M(H i=0,45=a.L,2V=a[0];i<45&&b.3c(2V,i,2V)!==P;2V=a[++i]){}}I a},1c:G(c,b,d,e,a){9(E.1p(b))b=b.3c(c,[e]);H f=/z-?4J|7T-?7S|1v|69|7Q-?1G/i;I b&&b.1d==4X&&d=="3O"&&!f.12(a)?b+"2I":b},1m:{1f:G(b,c){E.O((c||"").2p(/\\s+/),G(i,a){9(!E.1m.3t(b.1m,a))b.1m+=(b.1m?" ":"")+a})},2e:G(b,c){b.1m=c!=11?E.2T(b.1m.2p(/\\s+/),G(a){I!E.1m.3t(c,a)}).65(" "):""},3t:G(t,c){I E.2S(c,(t.1m||t).3z().2p(/\\s+/))>-1}},2q:G(e,o,f){M(H i 1j o){e.R["3C"+i]=e.R[i];e.R[i]=o[i]}f.15(e,[]);M(H i 1j o)e.R[i]=e.R["3C"+i]},18:G(e,p){9(p=="1G"||p=="2E"){H b={},3Z,3Y,d=["7L","7K","7J","7G"];E.O(d,G(){b["7F"+6]=0;b["7D"+6+"61"]=0});E.2q(e,b,G(){9(E(e).3j(\':3X\')){3Z=e.7A;3Y=e.7z}J{e=E(e.4S(Q)).1X(":4s").5X("2K").1B().18({4v:"1O",2W:"4D",19:"2U",7w:"0",1R:"0"}).5P(e.14)[0];H a=E.18(e.14,"2W")||"3V";9(a=="3V")e.14.R.2W="7k";3Z=e.7h;3Y=e.7f;9(a=="3V")e.14.R.2W="3V";e.14.3k(e)}});I p=="1G"?3Z:3Y}I E.3O(e,p)},3O:G(h,j,i){H g,2u=[],2q=[];G 3l(a){9(!E.V.1H)I P;H b=U.3M.3P(a,S);I!b||b.4y("3l")==""}9(j=="1v"&&E.V.1g){g=E.1y(h.R,"1v");I g==""?"1":g}9(j.1U(/4r/i))j=y;9(!i&&h.R[j])g=h.R[j];J 9(U.3M&&U.3M.3P){9(j.1U(/4r/i))j="4r";j=j.1o(/([A-Z])/g,"-$1").2F();H d=U.3M.3P(h,S);9(d&&!3l(h))g=d.4y(j);J{M(H a=h;a&&3l(a);a=a.14)2u.4Z(a);M(a=0;a<2u.L;a++)9(3l(2u[a])){2q[a]=2u[a].R.19;2u[a].R.19="2U"}g=j=="19"&&2q[2u.L-1]!=S?"2j":U.3M.3P(h,S).4y(j)||"";M(a=0;a<2q.L;a++)9(2q[a]!=S)2u[a].R.19=2q[a]}9(j=="1v"&&g=="")g="1"}J 9(h.43){H f=j.1o(/\\-(\\w)/g,G(m,c){I c.26()});g=h.43[j]||h.43[f];9(!/^\\d+(2I)?$/i.12(g)&&/^\\d/.12(g)){H k=h.R.1R;H e=h.4t.1R;h.4t.1R=h.43.1R;h.R.1R=g||0;g=h.R.74+"2I";h.R.1R=k;h.4t.1R=e}}I g},4I:G(a,e){H r=[];e=e||U;E.O(a,G(i,d){9(!d)I;9(d.1d==4X)d=d.3z();9(1n d=="1M"){d=d.1o(/(<(\\w+)[^>]*?)\\/>/g,G(m,a,b){I b.1U(/^(71|6Z|5D|6Y|49|9S|9P|3f|9K|9I)$/i)?m:a+"></"+b+">"});H s=E.33(d).2F(),1r=e.5r("1r"),2x=[];H c=!s.1e("<9D")&&[1,"<24>","</24>"]||!s.1e("<9A")&&[1,"<6S>","</6S>"]||s.1U(/^<(9x|1J|9u|9t|9s)/)&&[1,"<1F>","</1F>"]||!s.1e("<4k")&&[2,"<1F><1J>","</1J></1F>"]||(!s.1e("<9r")||!s.1e("<9q"))&&[3,"<1F><1J><4k>","</4k></1J></1F>"]||!s.1e("<5D")&&[2,"<1F><1J></1J><6L>","</6L></1F>"]||E.V.1g&&[1,"1r<1r>","</1r>"]||[0,"",""];1r.3D=c[1]+d+c[2];1Y(c[0]--)1r=1r.5k;9(E.V.1g){9(!s.1e("<1F")&&s.1e("<1J")<0)2x=1r.1t&&1r.1t.2X;J 9(c[1]=="<1F>"&&s.1e("<1J")<0)2x=1r.2X;M(H n=2x.L-1;n>=0;--n)9(E.Y(2x[n],"1J")&&!2x[n].2X.L)2x[n].14.3k(2x[n]);9(/^\\s/.12(d))1r.38(e.6F(d.1U(/^\\s*/)[0]),1r.1t)}d=E.2h(1r.2X)}9(0===d.L&&(!E.Y(d,"3B")&&!E.Y(d,"24")))I;9(d[0]==11||E.Y(d,"3B")||d.W)r.1a(d);J r=E.1S(r,d)});I r},1y:G(c,d,a){H e=E.4a(c)?{}:E.5o;9(d=="29"&&E.V.1H)c.14.4z;9(e[d]){9(a!=11)c[e[d]]=a;I c[e[d]]}J 9(E.V.1g&&d=="R")I E.1y(c.R,"9g",a);J 9(a==11&&E.V.1g&&E.Y(c,"3B")&&(d=="9e"||d=="9d"))I c.9b(d).6x;J 9(c.34){9(a!=11){9(d=="N"&&E.Y(c,"49")&&c.14)6E"N 96 94\'t 93 92";c.90(d,a)}9(E.V.1g&&/6B|3g/.12(d)&&!E.4a(c))I c.4l(d,2);I c.4l(d)}J{9(d=="1v"&&E.V.1g){9(a!=11){c.69=1;c.1A=(c.1A||"").1o(/6A\\([^)]*\\)/,"")+(3K(a).3z()=="8V"?"":"6A(1v="+a*6z+")")}I c.1A?(3K(c.1A.1U(/1v=([^)]*)/)[1])/6z).3z():""}d=d.1o(/-([a-z])/8T,G(z,b){I b.26()});9(a!=11)c[d]=a;I c[d]}},33:G(t){I(t||"").1o(/^\\s+|\\s+$/g,"")},2h:G(a){H r=[];9(1n a!="8Q")M(H i=0,2g=a.L;i<2g;i++)r.1a(a[i]);J r=a.2s(0);I r},2S:G(b,a){M(H i=0,2g=a.L;i<2g;i++)9(a[i]==b)I i;I-1},1S:G(a,b){9(E.V.1g){M(H i=0;b[i];i++)9(b[i].1z!=8)a.1a(b[i])}J M(H i=0;b[i];i++)a.1a(b[i]);I a},4V:G(b){H r=[],2f={};2c{M(H i=0,6P=b.L;i<6P;i++){H a=E.K(b[i]);9(!2f[a]){2f[a]=Q;r.1a(b[i])}}}27(e){r=b}I r},2T:G(b,a,c){9(1n a=="1M")a=3p("P||G(a,i){I "+a+"}");H d=[];M(H i=0,4m=b.L;i<4m;i++)9(!c&&a(b[i],i)||c&&!a(b[i],i))d.1a(b[i]);I d},1W:G(c,b){9(1n b=="1M")b=3p("P||G(a){I "+b+"}");H d=[];M(H i=0,4m=c.L;i<4m;i++){H a=b(c[i],i);9(a!==S&&a!=11){9(a.1d!=1C)a=[a];d=d.8O(a)}}I d}});H v=8M.8K.2F();E.V={4f:(v.1U(/.+(?:8I|8H|8F|8E)[\\/: ]([\\d.]+)/)||[])[1],1H:/6T/.12(v),3a:/3a/.12(v),1g:/1g/.12(v)&&!/3a/.12(v),39:/39/.12(v)&&!/(8B|6T)/.12(v)};H y=E.V.1g?"4h":"5g";E.1i({5f:!E.V.1g||U.8A=="8z",4h:E.V.1g?"4h":"5g",5o:{"M":"8y","8x":"1m","4r":y,5g:y,4h:y,3D:"3D",1m:"1m",1N:"1N",36:"36",2K:"2K",8w:"8u",29:"29",8t:"8s"}});E.O({1D:"a.14",8r:"16.4e(a,\'14\')",8q:"16.2R(a,2,\'2i\')",8o:"16.2R(a,2,\'4c\')",8n:"16.4e(a,\'2i\')",8m:"16.4e(a,\'4c\')",8l:"16.5c(a.14.1t,a)",8j:"16.5c(a.1t)",6p:"16.Y(a,\'8i\')?a.8f||a.8e.U:16.2h(a.2X)"},G(i,n){E.1b[i]=G(a){H b=E.1W(6,n);9(a&&1n a=="1M")b=E.3G(a,b);I 6.2v(E.4V(b))}});E.O({5P:"3e",8d:"6k",38:"6g",8c:"53",8b:"6H"},G(i,n){E.1b[i]=G(){H a=1k;I 6.O(G(){M(H j=0,2g=a.L;j<2g;j++)E(a[j])[n](6)})}});E.O({5X:G(a){E.1y(6,a,"");6.54(a)},8a:G(c){E.1m.1f(6,c)},89:G(c){E.1m.2e(6,c)},88:G(c){E.1m[E.1m.3t(6,c)?"2e":"1f"](6,c)},2e:G(a){9(!a||E.1A(a,[6]).r.L){E.30(6);6.14.3k(6)}},4o:G(){E("*",6).O(G(){E.30(6)});1Y(6.1t)6.3k(6.1t)}},G(i,n){E.1b[i]=G(){I 6.O(n,1k)}});E.O(["87","61"],G(i,a){H n=a.2F();E.1b[n]=G(h){I 6[0]==17?E.V.1H&&3r["86"+a]||E.5f&&32.2Y(U.35["59"+a],U.1K["59"+a])||U.1K["59"+a]:6[0]==U?32.2Y(U.1K["6n"+a],U.1K["6m"+a]):h==11?(6.L?E.18(6[0],n):S):6.18(n,h.1d==3T?h:h+"2I")}});H C=E.V.1H&&3q(E.V.4f)<85?"(?:[\\\\w*56-]|\\\\\\\\.)":"(?:[\\\\w\\84-\\83*56-]|\\\\\\\\.)",6j=1q 47("^>\\\\s*("+C+"+)"),6i=1q 47("^("+C+"+)(#)("+C+"+)"),6h=1q 47("^([#.]?)("+C+"*)");E.1i({55:{"":"m[2]==\'*\'||16.Y(a,m[2])","#":"a.4l(\'1T\')==m[2]",":":{81:"i<m[3]-0",7Z:"i>m[3]-0",2R:"m[3]-0==i",7Y:"m[3]-0==i",3o:"i==0",3n:"i==r.L-1",6f:"i%2==0",6d:"i%2","3o-46":"a.14.4q(\'*\')[0]==a","3n-46":"16.2R(a.14.5k,1,\'4c\')==a","7X-46":"!16.2R(a.14.5k,2,\'4c\')",1D:"a.1t",4o:"!a.1t",7W:"(a.6s||a.7V||\'\').1e(m[3])>=0",3X:\'"1O"!=a.N&&16.18(a,"19")!="2j"&&16.18(a,"4v")!="1O"\',1O:\'"1O"==a.N||16.18(a,"19")=="2j"||16.18(a,"4v")=="1O"\',7U:"!a.36",36:"a.36",2K:"a.2K",29:"a.29||16.1y(a,\'29\')",2t:"\'2t\'==a.N",4s:"\'4s\'==a.N",5u:"\'5u\'==a.N",52:"\'52\'==a.N",51:"\'51\'==a.N",50:"\'50\'==a.N",6c:"\'6c\'==a.N",6b:"\'6b\'==a.N",2y:\'"2y"==a.N||16.Y(a,"2y")\',49:"/49|24|6a|2y/i.12(a.Y)",3t:"16.1X(m[3],a).L",7R:"/h\\\\d/i.12(a.Y)",7P:"16.2T(16.2Z,G(1b){I a==1b.T;}).L"}},68:[/^(\\[) *@?([\\w-]+) *([!*$^~=]*) *(\'?"?)(.*?)\\4 *\\]/,/^(:)([\\w-]+)\\("?\'?(.*?(\\(.*?\\))?[^(]*?)"?\'?\\)/,1q 47("^([:.#]*)("+C+"+)")],3G:G(a,c,b){H d,2b=[];1Y(a&&a!=d){d=a;H f=E.1A(a,c,b);a=f.t.1o(/^\\s*,\\s*/,"");2b=b?c=f.r:E.1S(2b,f.r)}I 2b},1X:G(t,o){9(1n t!="1M")I[t];9(o&&!o.1z)o=S;o=o||U;H d=[o],2f=[],3n;1Y(t&&3n!=t){H r=[];3n=t;t=E.33(t);H l=P;H g=6j;H m=g.2L(t);9(m){H p=m[1].26();M(H i=0;d[i];i++)M(H c=d[i].1t;c;c=c.2i)9(c.1z==1&&(p=="*"||c.Y.26()==p.26()))r.1a(c);d=r;t=t.1o(g,"");9(t.1e(" ")==0)6r;l=Q}J{g=/^([>+~])\\s*(\\w*)/i;9((m=g.2L(t))!=S){r=[];H p=m[2],1S={};m=m[1];M(H j=0,31=d.L;j<31;j++){H n=m=="~"||m=="+"?d[j].2i:d[j].1t;M(;n;n=n.2i)9(n.1z==1){H h=E.K(n);9(m=="~"&&1S[h])22;9(!p||n.Y.26()==p.26()){9(m=="~")1S[h]=Q;r.1a(n)}9(m=="+")22}}d=r;t=E.33(t.1o(g,""));l=Q}}9(t&&!l){9(!t.1e(",")){9(o==d[0])d.44();2f=E.1S(2f,d);r=d=[o];t=" "+t.67(1,t.L)}J{H k=6i;H m=k.2L(t);9(m){m=[0,m[2],m[3],m[1]]}J{k=6h;m=k.2L(t)}m[2]=m[2].1o(/\\\\/g,"");H f=d[d.L-1];9(m[1]=="#"&&f&&f.42&&!E.4a(f)){H q=f.42(m[2]);9((E.V.1g||E.V.3a)&&q&&1n q.1T=="1M"&&q.1T!=m[2])q=E(\'[@1T="\'+m[2]+\'"]\',f)[0];d=r=q&&(!m[3]||E.Y(q,m[3]))?[q]:[]}J{M(H i=0;d[i];i++){H a=m[1]=="#"&&m[3]?m[3]:m[1]!=""||m[0]==""?"*":m[2];9(a=="*"&&d[i].Y.2F()=="5w")a="3f";r=E.1S(r,d[i].4q(a))}9(m[1]==".")r=E.4W(r,m[2]);9(m[1]=="#"){H e=[];M(H i=0;r[i];i++)9(r[i].4l("1T")==m[2]){e=[r[i]];22}r=e}d=r}t=t.1o(k,"")}}9(t){H b=E.1A(t,r);d=r=b.r;t=E.33(b.t)}}9(t)d=[];9(d&&o==d[0])d.44();2f=E.1S(2f,d);I 2f},4W:G(r,m,a){m=" "+m+" ";H c=[];M(H i=0;r[i];i++){H b=(" "+r[i].1m+" ").1e(m)>=0;9(!a&&b||a&&!b)c.1a(r[i])}I c},1A:G(t,r,h){H d;1Y(t&&t!=d){d=t;H p=E.68,m;M(H i=0;p[i];i++){m=p[i].2L(t);9(m){t=t.7O(m[0].L);m[2]=m[2].1o(/\\\\/g,"");22}}9(!m)22;9(m[1]==":"&&m[2]=="5T")r=E.1A(m[3],r,Q).r;J 9(m[1]==".")r=E.4W(r,m[2],h);J 9(m[1]=="["){H g=[],N=m[3];M(H i=0,31=r.L;i<31;i++){H a=r[i],z=a[E.5o[m[2]]||m[2]];9(z==S||/6B|3g|29/.12(m[2]))z=E.1y(a,m[2])||\'\';9((N==""&&!!z||N=="="&&z==m[5]||N=="!="&&z!=m[5]||N=="^="&&z&&!z.1e(m[5])||N=="$="&&z.67(z.L-m[5].L)==m[5]||(N=="*="||N=="~=")&&z.1e(m[5])>=0)^h)g.1a(a)}r=g}J 9(m[1]==":"&&m[2]=="2R-46"){H e={},g=[],12=/(\\d*)n\\+?(\\d*)/.2L(m[3]=="6f"&&"2n"||m[3]=="6d"&&"2n+1"||!/\\D/.12(m[3])&&"n+"+m[3]||m[3]),3o=(12[1]||1)-0,d=12[2]-0;M(H i=0,31=r.L;i<31;i++){H j=r[i],14=j.14,1T=E.K(14);9(!e[1T]){H c=1;M(H n=14.1t;n;n=n.2i)9(n.1z==1)n.4U=c++;e[1T]=Q}H b=P;9(3o==1){9(d==0||j.4U==d)b=Q}J 9((j.4U+d)%3o==0)b=Q;9(b^h)g.1a(j)}r=g}J{H f=E.55[m[1]];9(1n f!="1M")f=E.55[m[1]][m[2]];f=3p("P||G(a,i){I "+f+"}");r=E.2T(r,f,h)}}I{r:r,t:t}},4e:G(b,c){H d=[];H a=b[c];1Y(a&&a!=U){9(a.1z==1)d.1a(a);a=a[c]}I d},2R:G(a,e,c,b){e=e||1;H d=0;M(;a;a=a[c])9(a.1z==1&&++d==e)22;I a},5c:G(n,a){H r=[];M(;n;n=n.2i){9(n.1z==1&&(!a||n!=a))r.1a(n)}I r}});E.1h={1f:G(g,e,c,h){9(E.V.1g&&g.41!=11)g=17;9(!c.2r)c.2r=6.2r++;9(h!=11){H d=c;c=G(){I d.15(6,1k)};c.K=h;c.2r=d.2r}H i=e.2p(".");e=i[0];c.N=i[1];H b=E.K(g,"2A")||E.K(g,"2A",{});H f=E.K(g,"2m",G(){H a;9(1n E=="11"||E.1h.4T)I a;a=E.1h.2m.15(g,1k);I a});H j=b[e];9(!j){j=b[e]={};9(g.4R)g.4R(e,f,P);J g.7N("40"+e,f)}j[c.2r]=c;6.23[e]=Q},2r:1,23:{},2e:G(d,c,b){H e=E.K(d,"2A"),2O,4J;9(1n c=="1M"){H a=c.2p(".");c=a[0]}9(e){9(c&&c.N){b=c.4P;c=c.N}9(!c){M(c 1j e)6.2e(d,c)}J 9(e[c]){9(b)2G e[c][b.2r];J M(b 1j e[c])9(!a[1]||e[c][b].N==a[1])2G e[c][b];M(2O 1j e[c])22;9(!2O){9(d.4O)d.4O(c,E.K(d,"2m"),P);J d.7M("40"+c,E.K(d,"2m"));2O=S;2G e[c]}}M(2O 1j e)22;9(!2O){E.30(d,"2A");E.30(d,"2m")}}},1L:G(d,b,e,c,f){b=E.2h(b||[]);9(!e){9(6.23[d])E("*").1f([17,U]).1L(d,b)}J{H a,2O,1b=E.1p(e[d]||S),4N=!b[0]||!b[0].2B;9(4N)b.4Z(6.4M({N:d,2o:e}));9(E.1p(E.K(e,"2m")))a=E.K(e,"2m").15(e,b);9(!1b&&e["40"+d]&&e["40"+d].15(e,b)===P)a=P;9(4N)b.44();9(f&&f.15(e,b)===P)a=P;9(1b&&c!==P&&a!==P&&!(E.Y(e,\'a\')&&d=="4L")){6.4T=Q;e[d]()}6.4T=P}I a},2m:G(d){H a;d=E.1h.4M(d||17.1h||{});H b=d.N.2p(".");d.N=b[0];H c=E.K(6,"2A")&&E.K(6,"2A")[d.N],3m=1C.3x.2s.3c(1k,1);3m.4Z(d);M(H j 1j c){3m[0].4P=c[j];3m[0].K=c[j].K;9(!b[1]||c[j].N==b[1]){H e=c[j].15(6,3m);9(a!==P)a=e;9(e===P){d.2B();d.3L()}}}9(E.V.1g)d.2o=d.2B=d.3L=d.4P=d.K=S;I a},4M:G(c){H a=c;c=E.1i({},a);c.2B=G(){9(a.2B)a.2B();a.7I=P};c.3L=G(){9(a.3L)a.3L();a.7H=Q};9(!c.2o&&c.64)c.2o=c.64;9(E.V.1H&&c.2o.1z==3)c.2o=a.2o.14;9(!c.4H&&c.4G)c.4H=c.4G==c.2o?c.7E:c.4G;9(c.63==S&&c.62!=S){H e=U.35,b=U.1K;c.63=c.62+(e&&e.2D||b.2D||0);c.7C=c.7B+(e&&e.2z||b.2z||0)}9(!c.3R&&(c.60||c.5Z))c.3R=c.60||c.5Z;9(!c.5Y&&c.5W)c.5Y=c.5W;9(!c.3R&&c.2y)c.3R=(c.2y&1?1:(c.2y&2?3:(c.2y&4?2:0)));I c}};E.1b.1i({3Q:G(c,a,b){I c=="5V"?6.2P(c,a,b):6.O(G(){E.1h.1f(6,c,b||a,b&&a)})},2P:G(d,b,c){I 6.O(G(){E.1h.1f(6,d,G(a){E(6).5U(a);I(c||b).15(6,1k)},c&&b)})},5U:G(a,b){I 6.O(G(){E.1h.2e(6,a,b)})},1L:G(c,a,b){I 6.O(G(){E.1h.1L(c,a,6,Q,b)})},7y:G(c,a,b){9(6[0])I E.1h.1L(c,a,6[0],P,b)},25:G(){H a=1k;I 6.4L(G(e){6.4E=0==6.4E?1:0;e.2B();I a[6.4E].15(6,[e])||P})},7x:G(f,g){G 4x(e){H p=e.4H;1Y(p&&p!=6)2c{p=p.14}27(e){p=6};9(p==6)I P;I(e.N=="4w"?f:g).15(6,[e])}I 6.4w(4x).5S(4x)},2d:G(f){5R();9(E.3W)f.15(U,[E]);J E.3i.1a(G(){I f.15(6,[E])});I 6}});E.1i({3W:P,3i:[],2d:G(){9(!E.3W){E.3W=Q;9(E.3i){E.O(E.3i,G(){6.15(U)});E.3i=S}9(E.V.39||E.V.3a)U.4O("5Q",E.2d,P);9(!17.7v.L)E(17).37(G(){E("#4C").2e()})}}});E.O(("7u,7o,37,7n,6n,5V,4L,7m,"+"7l,7j,7i,4w,5S,7p,24,"+"50,7q,7r,7s,3U").2p(","),G(i,o){E.1b[o]=G(f){I f?6.3Q(o,f):6.1L(o)}});H x=P;G 5R(){9(x)I;x=Q;9(E.V.39||E.V.3a)U.4R("5Q",E.2d,P);J 9(E.V.1g){U.7e("<7d"+"7c 1T=4C 7b=Q "+"3g=//:><\\/1P>");H a=U.42("4C");9(a)a.5O=G(){9(6.2C!="1l")I;E.2d()};a=S}J 9(E.V.1H)E.4B=41(G(){9(U.2C=="5N"||U.2C=="1l"){4A(E.4B);E.4B=S;E.2d()}},10);E.1h.1f(17,"37",E.2d)}E.1b.1i({37:G(g,d,c){9(E.1p(g))I 6.3Q("37",g);H e=g.1e(" ");9(e>=0){H i=g.2s(e,g.L);g=g.2s(0,e)}c=c||G(){};H f="4F";9(d)9(E.1p(d)){c=d;d=S}J{d=E.3f(d);f="5M"}H h=6;E.3w({1u:g,N:f,K:d,1l:G(a,b){9(b=="1E"||b=="5L")h.4n(i?E("<1r/>").3e(a.4p.1o(/<1P(.|\\s)*?\\/1P>/g,"")).1X(i):a.4p);58(G(){h.O(c,[a.4p,b,a])},13)}});I 6},7a:G(){I E.3f(6.5K())},5K:G(){I 6.1W(G(){I E.Y(6,"3B")?E.2h(6.79):6}).1A(G(){I 6.2J&&!6.36&&(6.2K||/24|6a/i.12(6.Y)||/2t|1O|51/i.12(6.N))}).1W(G(i,c){H b=E(6).2V();I b==S?S:b.1d==1C?E.1W(b,G(i,a){I{2J:c.2J,1N:a}}):{2J:c.2J,1N:b}}).28()}});E.O("5J,5I,5H,6e,5G,5F".2p(","),G(i,o){E.1b[o]=G(f){I 6.3Q(o,f)}});H B=(1q 3v).3u();E.1i({28:G(d,b,a,c){9(E.1p(b)){a=b;b=S}I E.3w({N:"4F",1u:d,K:b,1E:a,1Z:c})},78:G(b,a){I E.28(b,S,a,"1P")},77:G(c,b,a){I E.28(c,b,a,"3S")},76:G(d,b,a,c){9(E.1p(b)){a=b;b={}}I E.3w({N:"5M",1u:d,K:b,1E:a,1Z:c})},80:G(a){E.1i(E.4u,a)},4u:{23:Q,N:"4F",2H:0,5E:"75/x-73-3B-72",6l:Q,3h:Q,K:S},4b:{},3w:G(s){H f,48=/=(\\?|%3F)/g,1s,K;s=E.1i(Q,s,E.1i(Q,{},E.4u,s));9(s.K&&s.6l&&1n s.K!="1M")s.K=E.3f(s.K);H q=s.1u.1e("?");9(q>-1){s.K=(s.K?s.K+"&":"")+s.1u.2s(q+1);s.1u=s.1u.2s(0,q)}9(s.1Z=="5b"){9(!s.K||!s.K.1U(48))s.K=(s.K?s.K+"&":"")+(s.5b||"6X")+"=?";s.1Z="3S"}9(s.1Z=="3S"&&s.K&&s.K.1U(48)){f="5b"+B++;s.K=s.K.1o(48,"="+f);s.1Z="1P";17[f]=G(a){K=a;1E();17[f]=11;2c{2G 17[f]}27(e){}}}9(s.1Z=="1P"&&s.1I==S)s.1I=P;9(s.1I===P&&s.N.2F()=="28")s.K=(s.K?s.K+"&":"")+"56="+(1q 3v()).3u();9(s.K&&s.N.2F()=="28"){s.1u+="?"+s.K;s.K=S}9(s.23&&!E.5a++)E.1h.1L("5J");9(!s.1u.1e("6W")&&s.1Z=="1P"){H h=U.4q("8g")[0];H g=U.5r("1P");g.3g=s.1u;9(!f&&(s.1E||s.1l)){H j=P;g.9Q=g.5O=G(){9(!j&&(!6.2C||6.2C=="5N"||6.2C=="1l")){j=Q;1E();1l();h.3k(g)}}}h.57(g);I}H k=P;H i=17.6V?1q 6V("9O.9N"):1q 6U();i.9M(s.N,s.1u,s.3h);9(s.K)i.5B("9J-9H",s.5E);9(s.5A)i.5B("9G-5z-9F",E.4b[s.1u]||"9E, 9C 9B 9z 5v:5v:5v 9y");i.5B("X-9w-9v","6U");9(s.6R)s.6R(i);9(s.23)E.1h.1L("5F",[i,s]);H c=G(a){9(!k&&i&&(i.2C==4||a=="2H")){k=Q;9(d){4A(d);d=S}1s=a=="2H"&&"2H"||!E.6Q(i)&&"3U"||s.5A&&E.6O(i,s.1u)&&"5L"||"1E";9(1s=="1E"){2c{K=E.6N(i,s.1Z)}27(e){1s="5t"}}9(1s=="1E"){H b;2c{b=i.5i("6M-5z")}27(e){}9(s.5A&&b)E.4b[s.1u]=b;9(!f)1E()}J E.5s(s,i,1s);1l();9(s.3h)i=S}};9(s.3h){H d=41(c,13);9(s.2H>0)58(G(){9(i){i.9p();9(!k)c("2H")}},s.2H)}2c{i.9n(s.K)}27(e){E.5s(s,i,S,e)}9(!s.3h)c();I i;G 1E(){9(s.1E)s.1E(K,1s);9(s.23)E.1h.1L("5G",[i,s])}G 1l(){9(s.1l)s.1l(i,1s);9(s.23)E.1h.1L("5H",[i,s]);9(s.23&&!--E.5a)E.1h.1L("5I")}},5s:G(s,a,b,e){9(s.3U)s.3U(a,b,e);9(s.23)E.1h.1L("6e",[a,s,e])},5a:0,6Q:G(r){2c{I!r.1s&&9l.9k=="52:"||(r.1s>=6K&&r.1s<9j)||r.1s==6J||E.V.1H&&r.1s==11}27(e){}I P},6O:G(a,c){2c{H b=a.5i("6M-5z");I a.1s==6J||b==E.4b[c]||E.V.1H&&a.1s==11}27(e){}I P},6N:G(r,b){H c=r.5i("9i-N");H d=b=="6y"||!b&&c&&c.1e("6y")>=0;H a=d?r.9h:r.4p;9(d&&a.35.34=="5t")6E"5t";9(b=="1P")E.5h(a);9(b=="3S")a=3p("("+a+")");I a},3f:G(a){H s=[];9(a.1d==1C||a.4d)E.O(a,G(){s.1a(3b(6.2J)+"="+3b(6.1N))});J M(H j 1j a)9(a[j]&&a[j].1d==1C)E.O(a[j],G(){s.1a(3b(j)+"="+3b(6))});J s.1a(3b(j)+"="+3b(a[j]));I s.65("&").1o(/%20/g,"+")}});E.1b.1i({1x:G(b,a){I b?6.1V({1G:"1x",2E:"1x",1v:"1x"},b,a):6.1A(":1O").O(G(){6.R.19=6.3d?6.3d:"";9(E.18(6,"19")=="2j")6.R.19="2U"}).1B()},1w:G(b,a){I b?6.1V({1G:"1w",2E:"1w",1v:"1w"},b,a):6.1A(":3X").O(G(){6.3d=6.3d||E.18(6,"19");9(6.3d=="2j")6.3d="2U";6.R.19="2j"}).1B()},6G:E.1b.25,25:G(a,b){I E.1p(a)&&E.1p(b)?6.6G(a,b):a?6.1V({1G:"25",2E:"25",1v:"25"},a,b):6.O(G(){E(6)[E(6).3j(":1O")?"1x":"1w"]()})},9c:G(b,a){I 6.1V({1G:"1x"},b,a)},9a:G(b,a){I 6.1V({1G:"1w"},b,a)},99:G(b,a){I 6.1V({1G:"25"},b,a)},98:G(b,a){I 6.1V({1v:"1x"},b,a)},97:G(b,a){I 6.1V({1v:"1w"},b,a)},95:G(c,a,b){I 6.1V({1v:a},c,b)},1V:G(j,h,g,f){H i=E.6C(h,g,f);I 6[i.3I===P?"O":"3I"](G(){i=E.1i({},i);H d=E(6).3j(":1O"),3r=6;M(H p 1j j){9(j[p]=="1w"&&d||j[p]=="1x"&&!d)I E.1p(i.1l)&&i.1l.15(6);9(p=="1G"||p=="2E"){i.19=E.18(6,"19");i.2N=6.R.2N}}9(i.2N!=S)6.R.2N="1O";i.3H=E.1i({},j);E.O(j,G(c,a){H e=1q E.2w(3r,i,c);9(/25|1x|1w/.12(a))e[a=="25"?d?"1x":"1w":a](j);J{H b=a.3z().1U(/^([+-]?)([\\d.]+)(.*)$/),1Q=e.2b(Q)||0;9(b){1B=3K(b[2]),2k=b[3]||"2I";9(2k!="2I"){3r.R[c]=1B+2k;1Q=(1B/e.2b(Q))*1Q;3r.R[c]=1Q+2k}9(b[1])1B=((b[1]=="-"?-1:1)*1B)+1Q;e.3J(1Q,1B,2k)}J e.3J(1Q,a,"")}});I Q})},3I:G(a,b){9(!b){b=a;a="2w"}9(!1k.L)I A(6[0],a);I 6.O(G(){9(b.1d==1C)A(6,a,b);J{A(6,a).1a(b);9(A(6,a).L==1)b.15(6)}})},9f:G(){H a=E.2Z;I 6.O(G(){M(H i=0;i<a.L;i++)9(a[i].T==6)a.6D(i--,1)}).5p()}});H A=G(b,c,a){9(!b)I;H q=E.K(b,c+"3I");9(!q||a)q=E.K(b,c+"3I",a?E.2h(a):[]);I q};E.1b.5p=G(a){a=a||"2w";I 6.O(G(){H q=A(6,a);q.44();9(q.L)q[0].15(6)})};E.1i({6C:G(b,a,c){H d=b&&b.1d==8Z?b:{1l:c||!c&&a||E.1p(b)&&b,2a:b,3E:c&&a||a&&a.1d!=8Y&&a};d.2a=(d.2a&&d.2a.1d==4X?d.2a:{8X:8W,8U:6K}[d.2a])||9o;d.3C=d.1l;d.1l=G(){E(6).5p();9(E.1p(d.3C))d.3C.15(6)};I d},3E:{6I:G(p,n,b,a){I b+a*p},5q:G(p,n,b,a){I((-32.8S(p*32.8R)/2)+0.5)*a+b}},2Z:[],2w:G(b,c,a){6.W=c;6.T=b;6.1c=a;9(!c.3A)c.3A={}}});E.2w.3x={4j:G(){9(6.W.2M)6.W.2M.15(6.T,[6.2l,6]);(E.2w.2M[6.1c]||E.2w.2M.6w)(6);9(6.1c=="1G"||6.1c=="2E")6.T.R.19="2U"},2b:G(a){9(6.T[6.1c]!=S&&6.T.R[6.1c]==S)I 6.T[6.1c];H r=3K(E.3O(6.T,6.1c,a));I r&&r>-8P?r:3K(E.18(6.T,6.1c))||0},3J:G(c,b,e){6.5n=(1q 3v()).3u();6.1Q=c;6.1B=b;6.2k=e||6.2k||"2I";6.2l=6.1Q;6.4g=6.4i=0;6.4j();H f=6;G t(){I f.2M()}t.T=6.T;E.2Z.1a(t);9(E.2Z.L==1){H d=41(G(){H a=E.2Z;M(H i=0;i<a.L;i++)9(!a[i]())a.6D(i--,1);9(!a.L)4A(d)},13)}},1x:G(){6.W.3A[6.1c]=E.1y(6.T.R,6.1c);6.W.1x=Q;6.3J(0,6.2b());9(6.1c=="2E"||6.1c=="1G")6.T.R[6.1c]="8N";E(6.T).1x()},1w:G(){6.W.3A[6.1c]=E.1y(6.T.R,6.1c);6.W.1w=Q;6.3J(6.2b(),0)},2M:G(){H t=(1q 3v()).3u();9(t>6.W.2a+6.5n){6.2l=6.1B;6.4g=6.4i=1;6.4j();6.W.3H[6.1c]=Q;H a=Q;M(H i 1j 6.W.3H)9(6.W.3H[i]!==Q)a=P;9(a){9(6.W.19!=S){6.T.R.2N=6.W.2N;6.T.R.19=6.W.19;9(E.18(6.T,"19")=="2j")6.T.R.19="2U"}9(6.W.1w)6.T.R.19="2j";9(6.W.1w||6.W.1x)M(H p 1j 6.W.3H)E.1y(6.T.R,p,6.W.3A[p])}9(a&&E.1p(6.W.1l))6.W.1l.15(6.T);I P}J{H n=t-6.5n;6.4i=n/6.W.2a;6.4g=E.3E[6.W.3E||(E.3E.5q?"5q":"6I")](6.4i,n,0,1,6.W.2a);6.2l=6.1Q+((6.1B-6.1Q)*6.4g);6.4j()}I Q}};E.2w.2M={2D:G(a){a.T.2D=a.2l},2z:G(a){a.T.2z=a.2l},1v:G(a){E.1y(a.T.R,"1v",a.2l)},6w:G(a){a.T.R[a.1c]=a.2l+a.2k}};E.1b.6m=G(){H c=0,3y=0,T=6[0],5m;9(T)8L(E.V){H b=E.18(T,"2W")=="4D",1D=T.14,21=T.21,2Q=T.3N,5y=1H&&!b&&3q(4f)<8J;9(T.6v){5x=T.6v();1f(5x.1R+32.2Y(2Q.35.2D,2Q.1K.2D),5x.3y+32.2Y(2Q.35.2z,2Q.1K.2z));9(1g){H d=E("4n").18("9L");d=(d=="8G"||E.5f&&3q(4f)>=7)&&2||d;1f(-d,-d)}}J{1f(T.5j,T.5C);1Y(21){1f(21.5j,21.5C);9(39&&/^t[d|h]$/i.12(1D.34)||!5y)d(21);9(5y&&!b&&E.18(21,"2W")=="4D")b=Q;21=21.21}1Y(1D.34&&/^1K|4n$/i.12(1D.34)){9(/^8D|1F-9R.*$/i.12(E.18(1D,"19")))1f(-1D.2D,-1D.2z);9(39&&E.18(1D,"2N")!="3X")d(1D);1D=1D.14}9(1H&&b)1f(-2Q.1K.5j,-2Q.1K.5C)}5m={3y:3y,1R:c}}I 5m;G d(a){1f(E.18(a,"8C"),E.18(a,"9T"))}G 1f(l,t){c+=3q(l)||0;3y+=3q(t)||0}}})();',62,615,'||||||this|||if|||||||||||||||||||||||||||||||||function|var|return|else|data|length|for|type|each|false|true|style|null|elem|document|browser|options||nodeName|||undefined|test||parentNode|apply|jQuery|window|css|display|push|fn|prop|constructor|indexOf|add|msie|event|extend|in|arguments|complete|className|typeof|replace|isFunction|new|div|status|firstChild|url|opacity|hide|show|attr|nodeType|filter|end|Array|parent|success|table|height|safari|cache|tbody|body|trigger|string|value|hidden|script|start|left|merge|id|match|animate|map|find|while|dataType||offsetParent|break|global|select|toggle|toUpperCase|catch|get|selected|duration|cur|try|ready|remove|done|al|makeArray|nextSibling|none|unit|now|handle||target|split|swap|guid|slice|text|stack|pushStack|fx|tb|button|scrollTop|events|preventDefault|readyState|scrollLeft|width|toLowerCase|delete|timeout|px|name|checked|exec|step|overflow|ret|one|doc|nth|inArray|grep|block|val|position|childNodes|max|timers|removeData|rl|Math|trim|tagName|documentElement|disabled|load|insertBefore|mozilla|opera|encodeURIComponent|call|oldblock|append|param|src|async|readyList|is|removeChild|color|args|last|first|eval|parseInt|self|domManip|has|getTime|Date|ajax|prototype|top|toString|orig|form|old|innerHTML|easing||multiFilter|curAnim|queue|custom|parseFloat|stopPropagation|defaultView|ownerDocument|curCSS|getComputedStyle|bind|which|json|String|error|static|isReady|visible|oWidth|oHeight|on|setInterval|getElementById|currentStyle|shift|ol|child|RegExp|jsre|input|isXMLDoc|lastModified|previousSibling|jquery|dir|version|pos|styleFloat|state|update|tr|getAttribute|el|html|empty|responseText|getElementsByTagName|float|radio|runtimeStyle|ajaxSettings|visibility|mouseover|handleHover|getPropertyValue|selectedIndex|clearInterval|safariTimer|__ie_init|absolute|lastToggle|GET|fromElement|relatedTarget|clean|index|init|click|fix|evt|removeEventListener|handler|andSelf|addEventListener|cloneNode|triggered|nodeIndex|unique|classFilter|Number|prevObject|unshift|submit|password|file|after|removeAttribute|expr|_|appendChild|setTimeout|client|active|jsonp|sibling|win|deep|boxModel|cssFloat|globalEval|getResponseHeader|offsetLeft|lastChild|wrapAll|results|startTime|props|dequeue|swing|createElement|handleError|parsererror|checkbox|00|object|box|safari2|Modified|ifModified|setRequestHeader|offsetTop|col|contentType|ajaxSend|ajaxSuccess|ajaxComplete|ajaxStop|ajaxStart|serializeArray|notmodified|POST|loaded|onreadystatechange|appendTo|DOMContentLoaded|bindReady|mouseout|not|unbind|unload|ctrlKey|removeAttr|metaKey|keyCode|charCode|Width|clientX|pageX|srcElement|join|outerHTML|substr|parse|zoom|textarea|reset|image|odd|ajaxError|even|before|quickClass|quickID|quickChild|prepend|processData|offset|scroll|execScript|contents|uuid|continue|textContent|clone|setArray|getBoundingClientRect|_default|nodeValue|xml|100|alpha|href|speed|splice|throw|createTextNode|_toggle|replaceWith|linear|304|200|colgroup|Last|httpData|httpNotModified|fl|httpSuccess|beforeSend|fieldset|webkit|XMLHttpRequest|ActiveXObject|http|callback|img|br|attributes|abbr|urlencoded|www|pixelLeft|application|post|getJSON|getScript|elements|serialize|defer|ipt|scr|write|clientWidth|hasClass|clientHeight|mousemove|mouseup|relative|mousedown|dblclick|resize|focus|change|keydown|keypress|keyup|FORM|blur|frames|right|hover|triggerHandler|offsetWidth|offsetHeight|clientY|pageY|border|toElement|padding|Left|cancelBubble|returnValue|Right|Bottom|Top|detachEvent|attachEvent|substring|animated|line|header|weight|font|enabled|innerText|contains|only|eq|gt|ajaxSetup|lt|size|uFFFF|u0128|417|inner|Height|toggleClass|removeClass|addClass|replaceAll|insertAfter|prependTo|contentWindow|contentDocument|head|wrap|iframe|children|noConflict|siblings|prevAll|nextAll|prev|wrapInner|next|parents|maxLength|maxlength|readOnly|Boolean|readonly|class|htmlFor|CSS1Compat|compatMode|compatible|borderLeftWidth|inline|ie|ra|medium|it|rv|522|userAgent|with|navigator|1px|concat|10000|array|PI|cos|ig|fast|NaN|600|slow|Function|Object|setAttribute|reverse|changed|be|can|fadeTo|property|fadeOut|fadeIn|slideToggle|slideUp|getAttributeNode|slideDown|method|action|stop|cssText|responseXML|content|300|protocol|location|option|send|400|abort|th|td|cap|colg|tfoot|With|Requested|thead|GMT|1970|leg|Jan|01|opt|Thu|Since|If|Type|area|Content|hr|borderWidth|open|XMLHTTP|Microsoft|meta|onload|row|link|borderTopWidth|specified'.split('|'),0,{}))
</script>
<script type="text/javascript">
jQuery.cookie = function(name, value, options) {
    if (typeof value != 'undefined') { // name and value given, set cookie
        options = options || {};
        if (value === null) {
            value = '';
            options.expires = -1;
        }
        var expires = '';
        if (options.expires && (typeof options.expires == 'number' || options.expires.toUTCString)) {
            var date;
            if (typeof options.expires == 'number') {
                date = new Date();
                date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));
            } else {
                date = options.expires;
            }
            expires = '; expires=' + date.toUTCString(); // use expires attribute, max-age is not supported by IE
        }
        var path = options.path ? '; path=' + options.path : '';
        var domain = options.domain ? '; domain=' + options.domain : '';
        var secure = options.secure ? '; secure' : '';
        document.cookie = [name, '=', encodeURIComponent(value), expires, path, domain, secure].join('');
    } else { // only name given, get cookie
        var cookieValue = null;
        if (document.cookie && document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                // Does this cookie string begin with the name we want?
                if (cookie.substring(0, name.length + 1) == (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
};
</script>
<script type="text/javascript">
(function($) {

	$.extend($.fn, {
		swapClass: function(c1, c2) {
			var c1Elements = this.filter('.' + c1);
			this.filter('.' + c2).removeClass(c2).addClass(c1);
			c1Elements.removeClass(c1).addClass(c2);
			return this;
		},
		replaceClass: function(c1, c2) {
			return this.filter('.' + c1).removeClass(c1).addClass(c2).end();
		},
		hoverClass: function(className) {
			className = className || "hover";
			return this.hover(function() {
				$(this).addClass(className);
			}, function() {
				$(this).removeClass(className);
			});
		},
		heightToggle: function(animated, callback) {
			animated ?
				this.animate({ height: "toggle" }, animated, callback) :
				this.each(function(){
					jQuery(this)[ jQuery(this).is(":hidden") ? "show" : "hide" ]();
					if(callback)
						callback.apply(this, arguments);
				});
		},
		heightHide: function(animated, callback) {
			if (animated) {
				this.animate({ height: "hide" }, animated, callback);
			} else {
				this.hide();
				if (callback)
					this.each(callback);
			}
		},
		prepareBranches: function(settings) {
			if (!settings.prerendered) {
				// mark last tree items
				this.filter(":last-child:not(ul)").addClass(CLASSES.last);
				// collapse whole tree, or only those marked as closed, anyway except those marked as open
				this.filter((settings.collapsed ? "" : "." + CLASSES.closed) + ":not(." + CLASSES.open + ")").find(">ul").hide();
			}
			// return all items with sublists
			return this.filter(":has(>ul)");
		},
		applyClasses: function(settings, toggler) {
			this.filter(":has(>ul):not(:has(>a))").find(">span").click(function(event) {
				toggler.apply($(this).next());
			}).add( $("a", this) ).hoverClass();

			if (!settings.prerendered) {
				// handle closed ones first
				this.filter(":has(>ul:hidden)")
						.addClass(CLASSES.expandable)
						.replaceClass(CLASSES.last, CLASSES.lastExpandable);

				// handle open ones
				this.not(":has(>ul:hidden)")
						.addClass(CLASSES.collapsable)
						.replaceClass(CLASSES.last, CLASSES.lastCollapsable);

	            // create hitarea
				this.prepend("<div class=\"" + CLASSES.hitarea + "\"/>").find("div." + CLASSES.hitarea).each(function() {
					var classes = "";
					$.each($(this).parent().attr("class").split(" "), function() {
						classes += this + "-hitarea ";
					});
					$(this).addClass( classes );
				});
			}

			// apply event to hitarea
			this.find("div." + CLASSES.hitarea).click( toggler );
		},
		treeview: function(settings) {

			settings = $.extend({
				cookieId: "treeview"
			}, settings);

			if (settings.add) {
				return this.trigger("add", [settings.add]);
			}

			if ( settings.toggle ) {
				var callback = settings.toggle;
				settings.toggle = function() {
					return callback.apply($(this).parent()[0], arguments);
				};
			}

			// factory for treecontroller
			function treeController(tree, control) {
				// factory for click handlers
				function handler(filter) {
					return function() {
						// reuse toggle event handler, applying the elements to toggle
						// start searching for all hitareas
						toggler.apply( $("div." + CLASSES.hitarea, tree).filter(function() {
							// for plain toggle, no filter is provided, otherwise we need to check the parent element
							return filter ? $(this).parent("." + filter).length : true;
						}) );
						return false;
					};
				}
				// click on first element to collapse tree
				$("a:eq(0)", control).click( handler(CLASSES.collapsable) );
				// click on second to expand tree
				$("a:eq(1)", control).click( handler(CLASSES.expandable) );
				// click on third to toggle tree
				$("a:eq(2)", control).click( handler() );
			}

			// handle toggle event
			function toggler() {
				$(this)
					.parent()
					// swap classes for hitarea
					.find(">.hitarea")
						.swapClass( CLASSES.collapsableHitarea, CLASSES.expandableHitarea )
						.swapClass( CLASSES.lastCollapsableHitarea, CLASSES.lastExpandableHitarea )
					.end()
					// swap classes for parent li
					.swapClass( CLASSES.collapsable, CLASSES.expandable )
					.swapClass( CLASSES.lastCollapsable, CLASSES.lastExpandable )
					// find child lists
					.find( ">ul" )
					// toggle them
					.heightToggle( settings.animated, settings.toggle );
				if ( settings.unique ) {
					$(this).parent()
						.siblings()
						// swap classes for hitarea
						.find(">.hitarea")
							.replaceClass( CLASSES.collapsableHitarea, CLASSES.expandableHitarea )
							.replaceClass( CLASSES.lastCollapsableHitarea, CLASSES.lastExpandableHitarea )
						.end()
						.replaceClass( CLASSES.collapsable, CLASSES.expandable )
						.replaceClass( CLASSES.lastCollapsable, CLASSES.lastExpandable )
						.find( ">ul" )
						.heightHide( settings.animated, settings.toggle );
				}
			}

			function serialize() {
				function binary(arg) {
					return arg ? 1 : 0;
				}
				var data = [];
				branches.each(function(i, e) {
					data[i] = $(e).is(":has(>ul:visible)") ? 1 : 0;
				});
				$.cookie(settings.cookieId, data.join("") );
			}

			function deserialize() {
				var stored = $.cookie(settings.cookieId);
				if ( stored ) {
					var data = stored.split("");
					branches.each(function(i, e) {
						$(e).find(">ul")[ parseInt(data[i]) ? "show" : "hide" ]();
					});
				}
			}

			// add treeview class to activate styles
			this.addClass("treeview");

			// prepare branches and find all tree items with child lists
			var branches = this.find("li").prepareBranches(settings);

			switch(settings.persist) {
			case "cookie":
				var toggleCallback = settings.toggle;
				settings.toggle = function() {
					serialize();
					if (toggleCallback) {
						toggleCallback.apply(this, arguments);
					}
				};
				deserialize();
				break;
			case "location":
				var current = this.find("a").filter(function() { return this.href.toLowerCase() == location.href.toLowerCase(); });
				if ( current.length ) {
					current.addClass("selected").parents("ul, li").add( current.next() ).show();
				}
				break;
			}

			branches.applyClasses(settings, toggler);

			// if control option is set, create the treecontroller and show it
			if ( settings.control ) {
				treeController(this, settings.control);
				$(settings.control).show();
			}

			return this.bind("add", function(event, branches) {
				$(branches).prev()
					.removeClass(CLASSES.last)
					.removeClass(CLASSES.lastCollapsable)
					.removeClass(CLASSES.lastExpandable)
				.find(">.hitarea")
					.removeClass(CLASSES.lastCollapsableHitarea)
					.removeClass(CLASSES.lastExpandableHitarea);
				$(branches).find("li").andSelf().prepareBranches(settings).applyClasses(settings, toggler);
			});
		}
	});

	var CLASSES = $.fn.treeview.classes = {
		open: "open",
		closed: "closed",
		expandable: "expandable",
		expandableHitarea: "expandable-hitarea",
		lastExpandableHitarea: "lastExpandable-hitarea",
		collapsable: "collapsable",
		collapsableHitarea: "collapsable-hitarea",
		lastCollapsableHitarea: "lastCollapsable-hitarea",
		lastCollapsable: "lastCollapsable",
		lastExpandable: "lastExpandable",
		last: "last",
		hitarea: "hitarea"
	};

	$.fn.Treeview = $.fn.treeview;

})(jQuery);
</script>
<script type="text/javascript">
		$(document).ready(function(){
            $("#tree").treeview({
                control: "#treecontrol",
                animated: "fast",
                collapsed: true,
                toggle: function() {
                    window.console && console.log("%o was toggled", this);
                }
            });

            $("#content").css("padding-top", $("#header").height());
        });
	</script>

            </head>
<body>
<div id="container">
<div id="header">
<div class="time" xmlns="">16.03 s</div>
<h1>GouldiAutomaticComparisonTest: <strong><span class="total" xmlns="http://www.w3.org/1999/xhtml">300 total, </span><span class="failed">19 failed, </span><span class="passed">281 passed</span></strong>
</h1>
<div id="treecontrol">
<ul>
<li>
<a title="Collapse the entire tree below" href="#">Collapse</a>
                  |
                </li>
<li>
<a title="Expand the entire tree below" href="#">Expand</a>
</li>
</ul>
</div>
</div>
<div id="content">
<ul id="tree">
<li xmlns="" class="level top failed open">
<span><em class="time">
<div class="time">16.03 s</div>
</em>GouldiAutomaticComparisonTest</span>
<ul>
<li class="level suite failed open">
<span><em class="time">
<div class="time">16.03 s</div>
</em>treeComparison(int)</span>
<ul>
<li class="level test">
<span><em class="time">
<div class="time">310 ms</div>
</em><em class="status">passed</em>[1] 1</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 1.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.474 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.475 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.478 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.487 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   W(2, k) &gt; 2^k/k^\varepsilon<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  W(2, k) &gt; 2^k/k^\varepsilon<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       W(2, k) &gt; 2^k/k^\varepsilon<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: W(2, k) &gt; 2^k/k^\varepsilon<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:W(2, k) &gt; 2^k/k^\varepsilon<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.679 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: W(2, k) &gt; 2^k/k^\varepsilon<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.679 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.682 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.687 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.690 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.693 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.701 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.702 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.706 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.706 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.709 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.712 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.727 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      12.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.727 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 7.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">126 ms</div>
</em><em class="status">passed</em>[2] 2</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.737 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 2.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.739 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.740 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.746 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.747 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.837 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.838 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   (X,\Sigma)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.838 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  (X,\Sigma)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.839 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       (X,\Sigma)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.839 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: (X,\Sigma)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.839 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:(X,\Sigma)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.840 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: (X,\Sigma)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.840 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.840 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.840 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.841 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.842 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.842 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.843 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.844 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.844 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.845 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.845 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.853 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.853 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.854 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.854 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.855 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.859 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      6.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.861 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">83 ms</div>
</em><em class="status">passed</em>[3] 3</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 3.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.869 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.871 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.878 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.880 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   (p-1)!^n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  (p-1)!^n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       (p-1)!^n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: (p-1)!^n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:(p-1)!^n<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: (p-1)!^n<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.937 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.937 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.939 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.939 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.940 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.940 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.941 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.941 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.942 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.946 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      8.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.947 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 4.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">79 ms</div>
</em><em class="status">passed</em>[4] 4</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.953 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 4.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.954 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.955 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.955 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.959 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:23.960 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   f_c(z) = z^2 + c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  f_c(z) = z^2 + c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       f_c(z) = z^2 + c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.014 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: f_c(z) = z^2 + c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.015 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:f_c(z) = z^2 + c<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.015 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: f_c(z) = z^2 + c<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.015 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.016 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.016 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.019 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.019 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.021 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.023 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.023 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.024 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.029 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      10.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.030 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 7.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">142 ms</div>
</em><em class="status">passed</em>[5] 5</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 5.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.037 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.039 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.148 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \forall x \, \forall y \, P(x,y) \Leftrightarrow \forall y \, \forall x \, P(x,y)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \forall x \, \forall y \, P(x,y) \Leftrightarrow \forall y \, \forall x \, P(x,y)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \forall x \, \forall y \, P(x,y) \Leftrightarrow \forall y \, \forall x \, P(x,y)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \forall x \, \forall y \, P(x,y) \Leftrightarrow \forall y \, \forall x \, P(x,y)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\forall x \, \forall y \, P(x,y) \Leftrightarrow \forall y \, \forall x \, P(x,y)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \forall x \, \forall y \, P(x,y) \Leftrightarrow \forall y \, \forall x \, P(x,y)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.156 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.173 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      26.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.174 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 18.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">48 ms</div>
</em><em class="status">passed</em>[6] 6</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.176 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 6.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.176 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.177 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.177 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.179 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.181 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.218 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.218 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.219 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.219 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.219 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.220 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.220 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.220 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.220 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.221 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.221 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.221 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.222 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.223 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.224 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">61 ms</div>
</em><em class="status">passed</em>[7] 7</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.226 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 7.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.226 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.226 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.227 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.228 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.230 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.279 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.279 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.280 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.281 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.281 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.281 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.282 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.282 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.282 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.284 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.285 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.285 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">72 ms</div>
</em><em class="status">passed</em>[8] 8</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.287 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 8.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.287 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.291 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.293 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.351 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.351 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.351 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.352 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.352 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.352 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.352 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \alpha(x)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.353 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.353 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.353 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.356 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.356 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.356 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.356 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.358 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.358 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">147 ms</div>
</em><em class="status">passed</em>[9] 9</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 9.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.374 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.412 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.414 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   |{\Psi}\rangle=\sum_{i_1,i_2,\alpha_1,\alpha_2}\Gamma^{[1]i_1}_{\alpha_1}\lambda^{[1]}_{\alpha_1}\Gamma^{[2]i_2}_{\alpha_1\alpha_2}\lambda^{[2]}_{{\alpha}_2}|{i_1i_2}\rangle|{\Phi^{[3..N]}_{\alpha_2}}\rangle<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.415 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  |{\Psi}\rangle=\sum_{i_1,i_2,\alpha_1,\alpha_2}\Gamma^{[1]i_1}_{\alpha_1}\lambda^{[1]}_{\alpha_1}\Gamma^{[2]i_2}_{\alpha_1\alpha_2}\lambda^{[2]}_{{\alpha}_2}|{i_1i_2}\rangle|{\Phi^{[3..N]}_{\alpha_2}}\rangle<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.416 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       |{\Psi}\rangle=\sum_{i_1,i_2,\alpha_1,\alpha_2}\Gamma^{[1]i_1}_{\alpha_1}\lambda^{[1]}_{\alpha_1}\Gamma^{[2]i_2}_{\alpha_1\alpha_2}\lambda^{[2]}_{{\alpha}_2}|{i_1i_2}\rangle|{\Phi^{[3..N]}_{\alpha_2}}\rangle<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.416 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: |{\Psi}\rangle=\sum_{i_1,i_2,\alpha_1,\alpha_2}\Gamma^{[1]i_1}_{\alpha_1}\lambda^{[1]}_{\alpha_1}\Gamma^{[2]i_2}_{\alpha_1\alpha_2}\lambda^{[2]}_{{\alpha}_2}|{i_1i_2}\rangle|{\Phi^{[3..N]}_{\alpha_2}}\rangle<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.416 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:|{\Psi}\rangle=\sum_{i_1,i_2,\alpha_1,\alpha_2}\Gamma^{[1]i_1}_{\alpha_1}\lambda^{[1]}_{\alpha_1}\Gamma^{[2]i_2}_{\alpha_1\alpha_2}\lambda^{[2]}_{{\alpha}_2}|{i_1i_2}\rangle|{\Phi^{[3..N]}_{\alpha_2}}\rangle<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: |{\Psi}\rangle=\sum_{i_1,i_2,\alpha_1,\alpha_2}\Gamma^{[1]i_1}_{\alpha_1}\lambda^{[1]}_{\alpha_1}\Gamma^{[2]i_2}_{\alpha_1\alpha_2}\lambda^{[2]}_{{\alpha}_2}|{i_1i_2}\rangle|{\Phi^{[3..N]}_{\alpha_2}}\rangle<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.422 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.423 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.425 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.426 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.426 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.432 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.435 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.435 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.506 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      87.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.506 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 68.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">61 ms</div>
</em><em class="status">passed</em>[10] 10</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 10.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.512 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.514 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.554 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.555 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   z*x\le y<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.556 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  z*x\le y<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.557 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       z*x\le y<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.558 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: z*x\le y<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.560 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:z*x\le y<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.560 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: z*x\le y<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.561 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.561 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.562 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.563 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.564 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.564 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.565 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.565 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.566 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.566 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.567 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.567 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.568 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.568 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.568 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.568 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.569 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.570 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">139 ms</div>
</em><em class="status">passed</em>[11] 11</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.572 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 11.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.573 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.573 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.574 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.576 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.577 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.660 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.662 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    \frac{d}{dx}\left( \log_c x\right) = {1 \over x \ln c} , \qquad c &gt; 0, c \ne 1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   \frac{d}{dx}\left( \log_c x\right) = {1 \over x \ln c} , \qquad c &gt; 0, c \ne 1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        \frac{d}{dx}\left( \log_c x\right) = {1 \over x \ln c} , \qquad c &gt; 0, c \ne 1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  \frac{d}{dx}\left( \log_c x\right) = {1 \over x \ln c} , \qquad c &gt; 0, c \ne 1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\frac{d}{dx}\left( \log_c x\right) = {1 \over x \ln c} , \qquad c &gt; 0, c \ne 1<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \frac{d}{dx}\left( \log_c x\right) = {1 \over x \ln c} , \qquad c &gt; 0, c \ne 1<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.676 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.679 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.684 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.685 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.685 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.686 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.690 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.692 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.693 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.694 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.695 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.695 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.696 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.710 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      25.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.710 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 20.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">79 ms</div>
</em><em class="status">passed</em>[12] 12</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 12.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.714 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.715 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.715 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.718 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.720 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \theta = n \times 137.508^\circ,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \theta = n \times 137.508^\circ,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \theta = n \times 137.508^\circ,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \theta = n \times 137.508^\circ,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\theta = n \times 137.508^\circ<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \theta = n \times 137.508^\circ<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.784 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.785 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.785 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.786 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.786 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.787 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.788 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.788 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.789 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.789 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.789 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.789 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.790 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.790 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.791 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      7.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.791 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 6.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">158 ms</div>
</em><em class="status">passed</em>[13] 13</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 13.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.797 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.798 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.914 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   s_V(\mathcal{R})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.915 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  s_V(\mathcal{R})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.916 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       s_V(\mathcal{R})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.916 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: s_V(\mathcal{R})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:s_V(\mathcal{R})<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.918 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: s_V(\mathcal{R})<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.918 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.919 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.920 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.924 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.929 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.940 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.942 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.945 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.947 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.948 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.950 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.951 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">66 ms</div>
</em><em class="status">passed</em>[14] 14</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.957 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 14.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.959 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.961 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.963 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.965 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:24.966 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.006 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.006 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \ell(m)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.007 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \ell(m)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.007 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \ell(m)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.008 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \ell(m)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.008 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\ell(m)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.009 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \ell(m)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.009 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.015 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.015 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.016 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.016 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.019 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.019 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">58 ms</div>
</em><em class="status">passed</em>[15] 15</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.024 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 15.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.025 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.026 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.027 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.074 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.075 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   bx-x^2<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.075 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  bx-x^2<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.075 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       bx-x^2<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.075 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: bx-x^2<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.076 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:bx-x^2<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.076 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: bx-x^2<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.076 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.076 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.076 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.077 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.077 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.078 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.078 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.079 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.079 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.079 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.080 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.080 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.080 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.080 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.080 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.081 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.081 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      6.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.082 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">68 ms</div>
</em><em class="status">passed</em>[16] 16</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 16.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.085 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.085 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.087 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.089 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.130 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.131 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \omega_{k}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.131 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \omega_{k}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.132 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \omega_{k}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.132 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \omega_{k}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.132 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\omega_{k}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.133 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \omega_{k}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.133 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.133 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.134 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.137 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.138 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.139 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.141 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.145 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.147 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.147 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.148 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.148 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.148 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.148 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">145 ms</div>
</em><em class="status">passed</em>[17] 17</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 17.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.156 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.260 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.287 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \mathbf{m}_1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \mathbf{m}_1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \mathbf{m}_1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \mathbf{m}_1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\mathbf{m}_1<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \mathbf{m}_1<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.291 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.292 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.292 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.293 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.294 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.294 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.295 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.295 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.295 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.296 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.296 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.297 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.297 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.299 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      4.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.299 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 4.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">56 ms</div>
</em><em class="status">passed</em>[18] 18</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.301 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 18.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.301 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.301 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.302 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.302 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.303 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.347 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.348 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   r_{ij}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.349 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  r_{ij}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.349 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       r_{ij}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.350 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: r_{ij}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.350 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:r_{ij}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.350 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: r_{ij}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.350 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.350 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.351 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.351 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.352 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.352 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.352 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.353 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.353 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      5.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 4.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">53 ms</div>
</em><em class="status">passed</em>[19] 19</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 19.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.391 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.392 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    Z = \sum_{j} g_j \cdot \mathrm{e}^{- \beta E_j}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   Z = \sum_{j} g_j \cdot \mathrm{e}^{- \beta E_j}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        Z = \sum_{j} g_j \cdot \mathrm{e}^{- \beta E_j}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  Z = \sum_{j} g_j \cdot \mathrm{e}^{- \beta E_j}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:Z = \sum_{j} g_j \cdot \mathrm{e}^{- \beta E_j}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: Z = \sum_{j} g_j \cdot \mathrm{e}^{- \beta E_j}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.398 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.398 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.398 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.399 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.399 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.403 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      14.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.406 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 11.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">43 ms</div>
</em><em class="status">passed</em>[20] 20</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.411 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 20.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.411 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.411 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.412 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.413 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.414 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.446 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   S&#39;<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  S&#39;<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       S&#39;<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: S&#39;<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:S&#39;<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.448 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: S&#39;<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.448 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.448 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.448 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.449 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.449 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.449 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.452 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.452 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      1.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.452 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">51 ms</div>
</em><em class="status">passed</em>[21] 21</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.454 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 21.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.454 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.454 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.455 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.456 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.456 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.492 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.493 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   S&#39;<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.493 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  S&#39;<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.493 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       S&#39;<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.494 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: S&#39;<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.494 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:S&#39;<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.494 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: S&#39;<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.494 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.494 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.495 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.495 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      1.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">70 ms</div>
</em><em class="status">passed</em>[22] 22</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 22.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.513 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.514 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.515 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.553 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.553 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \text{Ker} (k_* - l_*) \cong \text{Im} (i_*, j_*).<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.554 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \text{Ker} (k_* - l_*) \cong \text{Im} (i_*, j_*).<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.554 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \text{Ker} (k_* - l_*) \cong \text{Im} (i_*, j_*).<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.555 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \text{Ker} (k_* - l_*) \cong \text{Im} (i_*, j_*).<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.555 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\text{Ker} (k_* - l_*) \cong \text{Im} (i_*, j_*)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.556 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \text{Ker} (k_* - l_*) \cong \text{Im} (i_*, j_*)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.556 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.556 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.557 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.559 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.562 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.562 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.563 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.564 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.564 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.566 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.566 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.566 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.567 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.567 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.569 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.569 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.574 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      20.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.576 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 16.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">54 ms</div>
</em><em class="status">passed</em>[23] 23</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.578 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 23.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.579 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.579 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.581 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.582 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.617 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.618 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   D(G,H) = \sum_{i=1}^{29} | F_i(G) - F_i(H) |<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.619 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  D(G,H) = \sum_{i=1}^{29} | F_i(G) - F_i(H) |<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.619 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       D(G,H) = \sum_{i=1}^{29} | F_i(G) - F_i(H) |<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.619 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: D(G,H) = \sum_{i=1}^{29} | F_i(G) - F_i(H) |<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.620 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:D(G,H) = \sum_{i=1}^{29} | F_i(G) - F_i(H) |<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.620 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: D(G,H) = \sum_{i=1}^{29} | F_i(G) - F_i(H) |<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.620 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.621 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.621 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.622 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      27.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 19.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">50 ms</div>
</em><em class="status">passed</em>[24] 24</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 24.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.636 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.638 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.675 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.675 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    E_\text{k} = E_t + E_\text{r} \, <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.676 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   E_{\text{k}} = E_t + E_{\text{r}} \, <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        E_{\text{k}} = E_t + E_{\text{r}} \, <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  E_{\text{k}} = E_t + E_{\text{r}} \, <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:E_{\text{k}} = E_t + E_{\text{r}} \<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: E_{\text{k}} = E_t + E_{\text{r}} \<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.679 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.682 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.682 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.682 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      11.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.683 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 8.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">55 ms</div>
</em><em class="status">passed</em>[25] 25</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.684 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 25.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.685 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.685 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.685 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.686 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.687 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.733 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.733 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \lambda(L(B)) \leq d<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.733 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \lambda(L(B)) \leq d<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.733 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \lambda(L(B)) \leq d<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \lambda(L(B)) \leq d<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\lambda(L(B)) \leq d<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \lambda(L(B)) \leq d<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.735 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.735 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.736 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.736 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.736 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.737 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.737 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.737 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.737 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.737 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.738 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.738 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.738 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.739 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      9.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.739 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 8.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">56 ms</div>
</em><em class="status">passed</em>[26] 26</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.740 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 26.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.742 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.790 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.790 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   L\left(C\right) \leq L\left(T\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.791 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  L\left(C\right) \leq L\left(T\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.791 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       L\left(C\right) \leq L\left(T\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.791 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: L\left(C\right) \leq L\left(T\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.791 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:L\left(C\right) \leq L\left(T\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.791 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: L\left(C\right) \leq L\left(T\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      7.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 6.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">58 ms</div>
</em><em class="status">passed</em>[27] 27</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.797 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 27.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.797 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.798 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.798 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.844 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.845 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   v = \frac{c}{n}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.846 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  v = \frac{c}{n}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.846 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       v = \frac{c}{n}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.847 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: v = \frac{c}{n}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.847 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:v = \frac{c}{n}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.847 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: v = \frac{c}{n}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.848 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.848 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.848 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.849 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.850 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.851 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.852 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.852 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.853 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.853 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.853 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.853 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.853 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.853 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.854 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.854 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.855 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      2.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.855 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">68 ms</div>
</em><em class="status">passed</em>[28] 28</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.856 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 28.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.856 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.857 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.857 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.858 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.859 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.911 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.911 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \sigma_y^2(\tau) = \frac{2\pi^2\tau}{3}h_{-2}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \sigma_y^2(\tau) = \frac{2\pi^2\tau}{3}h_{-2}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \sigma_y^2(\tau) = \frac{2\pi^2\tau}{3}h_{-2}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \sigma_y^2(\tau) = \frac{2\pi^2\tau}{3}h_{-2}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\sigma_y^2(\tau) = \frac{2\pi^2\tau}{3}h_{-2}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \sigma_y^2(\tau) = \frac{2\pi^2\tau}{3}h_{-2}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.914 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.915 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.916 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.916 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.918 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.918 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.919 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.919 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.919 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.920 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.920 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.923 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      21.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.924 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 15.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">72 ms</div>
</em><em class="status">passed</em>[29] 29</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.925 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 29.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.926 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.926 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.927 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.928 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.929 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.988 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.989 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    R_{s\ normal} = \sqrt{ \frac{\omega \mu_0} {2 \sigma} }<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.989 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   R_{s\ normal} = \sqrt{ \frac{\omega \mu_0} {2 \sigma} }<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.989 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        R_{s\ normal} = \sqrt{ \frac{\omega \mu_0} {2 \sigma} }<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.989 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  R_{s\ normal} = \sqrt{ \frac{\omega \mu_0} {2 \sigma} }<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.990 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:R_{s\ normal} = \sqrt{ \frac{\omega \mu_0} {2 \sigma} }<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.990 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: R_{s\ normal} = \sqrt{ \frac{\omega \mu_0} {2 \sigma} }<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.990 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.990 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.990 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.991 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.991 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.992 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.992 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.992 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.992 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.993 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.993 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.993 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.996 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      22.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 27.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[30] 30</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 30.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:25.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.000 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    \phi_1 = -30^\circ...+30^\circ<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   \phi_1 = -30^\circ...+30^\circ<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        \phi_1 = -30^\circ...+30^\circ<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  \phi_1 = -30^\circ...+30^\circ<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\phi_1 = -30^\circ...+30^\circ<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \phi_1 = -30^\circ...+30^\circ<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.037 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.037 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.037 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.037 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.038 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      15.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.038 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 9.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">73 ms</div>
</em><em class="status">passed</em>[31] 31</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.040 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 31.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.040 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.041 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.043 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.045 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.047 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.095 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.096 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.098 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.099 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.100 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.100 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.101 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.102 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.103 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.103 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.104 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.104 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.105 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.105 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.105 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.106 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.106 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.106 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.108 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.108 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">58 ms</div>
</em><em class="status">passed</em>[32] 32</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 32.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.115 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.163 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.166 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.166 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.167 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.167 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.167 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.168 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.168 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.168 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.168 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.169 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.169 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.169 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.169 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.169 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.170 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.170 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.170 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">46 ms</div>
</em><em class="status">passed</em>[33] 33</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.172 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 33.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.172 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.173 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.173 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.174 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.175 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.211 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.211 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.211 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.211 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: T_c<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.213 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.213 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.214 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.214 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">60 ms</div>
</em><em class="status">passed</em>[34] 34</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.219 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 34.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.220 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.221 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.222 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.223 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.224 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.265 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.265 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   P_1(X)=P(X)/(X-\alpha_1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.265 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  P_1(X)=P(X)/(X-\alpha_1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.266 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       P_1(X)=P(X)/(X-\alpha_1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.266 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: P_1(X)=P(X)/(X-\alpha_1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.266 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:P_1(X)=P(X)/(X-\alpha_1)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.266 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: P_1(X)=P(X)/(X-\alpha_1)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.266 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.267 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.267 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.267 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.269 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.270 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.270 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.271 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.272 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.273 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.273 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.273 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      17.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 13.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">50 ms</div>
</em><em class="status">passed</em>[35] 35</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.280 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 35.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.281 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.281 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.282 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.284 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   = \frac{k}{n}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  = \frac{k}{n}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       = \frac{k}{n}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: = \frac{k}{n}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:= \frac{k}{n}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: = \frac{k}{n}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.323 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.323 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.323 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.330 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      2.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.330 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 4.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">47 ms</div>
</em><em class="status">passed</em>[36] 36</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.331 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 36.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.332 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.332 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.332 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.333 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.334 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   n = \prod_{i=1}^r p_i^{a_i}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  n = \prod_{i=1}^r p_i^{a_i}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       n = \prod_{i=1}^r p_i^{a_i}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: n = \prod_{i=1}^r p_i^{a_i}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.369 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:n = \prod_{i=1}^r p_i^{a_i}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.369 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: n = \prod_{i=1}^r p_i^{a_i}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.369 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.369 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.369 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.372 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.372 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.373 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.373 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.373 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.373 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.374 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      18.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 10.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">43 ms</div>
</em><em class="status">passed</em>[37] 37</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 37.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.380 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.380 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.381 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.383 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.383 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.415 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.416 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   H(j \omega) = \mathcal{F}\{h(t)\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.416 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  H(j \omega) = \mathcal{F}\{h(t)\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       H(j \omega) = \mathcal{F}\{h(t)\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: H(j \omega) = \mathcal{F}\{h(t)\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:H(j \omega) = \mathcal{F}\{h(t)\}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: H(j \omega) = \mathcal{F}\{h(t)\}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.421 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.421 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.422 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      14.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.422 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 15.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">48 ms</div>
</em><em class="status">passed</em>[38] 38</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.423 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 38.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.424 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.424 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.425 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.425 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.426 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.463 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.463 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \pi/4<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \pi/4<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \pi/4<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \pi/4<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\pi/4<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \pi/4<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.469 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.469 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.469 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.470 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.470 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      1.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.470 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">63 ms</div>
</em><em class="status">passed</em>[39] 39</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.472 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 39.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.472 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.473 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.474 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.475 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.476 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.519 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.520 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   (x+y)^n = \sum_{k=0}^n {n \choose k}x^{n-k}y^k = \sum_{k=0}^n {n \choose k}x^{k}y^{n-k}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.520 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  (x+y)^n = \sum_{k=0}^n {n \choose k}x^{n-k}y^k = \sum_{k=0}^n {n \choose k}x^{k}y^{n-k}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.520 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       (x+y)^n = \sum_{k=0}^n {n \choose k}x^{n-k}y^k = \sum_{k=0}^n {n \choose k}x^{k}y^{n-k}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.521 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: (x+y)^n = \sum_{k=0}^n {n \choose k}x^{n-k}y^k = \sum_{k=0}^n {n \choose k}x^{k}y^{n-k}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.521 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:(x+y)^n = \sum_{k=0}^n {n \choose k}x^{n-k}y^k = \sum_{k=0}^n {n \choose k}x^{k}y^{n-k}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.521 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: (x+y)^n = \sum_{k=0}^n {n \choose k}x^{n-k}y^k = \sum_{k=0}^n {n \choose k}x^{k}y^{n-k}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.521 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.521 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.521 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.522 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.524 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.524 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.524 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.525 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.525 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.526 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.526 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.526 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.526 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.526 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.527 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.527 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.533 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      45.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.534 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 33.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">43 ms</div>
</em><em class="status">passed</em>[40] 40</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.536 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 40.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.537 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.537 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.538 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.539 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.540 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.570 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.571 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \ [A]_t = -kt + [A]_0<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.571 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \ [A]_t = -kt + [A]_0<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.571 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \ [A]_t = -kt + [A]_0<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.572 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \ [A]_t = -kt + [A]_0<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.572 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\ [A]_t = -kt + [A]_0<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.572 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \ [A]_t = -kt + [A]_0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.572 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.572 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.573 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.574 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.575 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.575 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.575 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.576 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.576 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.576 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.577 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.577 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.577 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.577 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.577 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.578 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.579 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      13.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.579 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 11.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">40 ms</div>
</em><em class="status">passed</em>[41] 41</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 41.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.581 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.583 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.584 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.612 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.613 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   q^{42}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.613 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  q^{42}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.613 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       q^{42}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.613 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: q^{42}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.613 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:q^{42}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.614 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: q^{42}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.614 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.614 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.614 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.616 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.616 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.617 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.617 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.617 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.617 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.618 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.618 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.618 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.618 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.618 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.618 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.619 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.619 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      2.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.619 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">142 ms</div>
</em><em class="status">passed</em>[42] 42</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.622 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 42.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.622 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.623 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.624 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \alpha(d) \le \left(\sqrt{3/2} + \varepsilon\right)^d<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \alpha(d) \le \left(\sqrt{3/2} + \varepsilon\right)^d<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \alpha(d) \le \left(\sqrt{3/2} + \varepsilon\right)^d<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \alpha(d) \le \left(\sqrt{3/2} + \varepsilon\right)^d<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\alpha(d) \le \left(\sqrt{3/2} + \varepsilon\right)^d<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \alpha(d) \le \left(\sqrt{3/2} + \varepsilon\right)^d<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.672 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.756 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.757 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.762 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      14.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.763 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 6.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">76 ms</div>
</em><em class="status">passed</em>[43] 43</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.764 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 43.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.764 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.765 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.765 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.766 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.766 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.800 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:      f^{\mu} = - 8\pi  { G \over { 3 c^4   }   } \left (  {A \over 2} T_{\alpha \beta}  + {B \over 2} T \eta_{\alpha \beta} \right ) \left ( \delta^{\mu}_{\nu} + u^{\mu} u_{\nu} \right )  u^{\alpha} x^{\nu} u^{\beta} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.800 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:     f^{\mu} = - 8\pi  { G \over { 3 c^4   }   } \left (  {A \over 2} T_{\alpha \beta}  + {B \over 2} T \eta_{\alpha \beta} \right ) \left ( \delta^{\mu}_{\nu} + u^{\mu} u_{\nu} \right )  u^{\alpha} x^{\nu} u^{\beta} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.801 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:          f^{\mu} = - 8\pi  { G \over { 3 c^4   }   } \left (  {A \over 2} T_{\alpha \beta}  + {B \over 2} T \eta_{\alpha \beta} \right ) \left ( \delta^{\mu}_{\nu} + u^{\mu} u_{\nu} \right )  u^{\alpha} x^{\nu} u^{\beta} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.801 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:    f^{\mu} = - 8\pi  { G \over { 3 c^4   }   } \left (  {A \over 2} T_{\alpha \beta}  + {B \over 2} T \eta_{\alpha \beta} \right ) \left ( \delta^{\mu}_{\nu} + u^{\mu} u_{\nu} \right )  u^{\alpha} x^{\nu} u^{\beta} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.802 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:f^{\mu} = - 8\pi  { G \over { 3 c^4   }   } \left (  {A \over 2} T_{\alpha \beta}  + {B \over 2} T \eta_{\alpha \beta} \right ) \left ( \delta^{\mu}_{\nu} + u^{\mu} u_{\nu} \right )  u^{\alpha} x^{\nu} u^{\beta}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.802 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: f^{\mu} = - 8\pi  { G \over { 3 c^4   }   } \left (  {A \over 2} T_{\alpha \beta}  + {B \over 2} T \eta_{\alpha \beta} \right ) \left ( \delta^{\mu}_{\nu} + u^{\mu} u_{\nu} \right )  u^{\alpha} x^{\nu} u^{\beta}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.803 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.803 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.803 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.804 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.805 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.806 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.806 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.807 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.807 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.810 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.810 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.811 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.811 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.812 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.813 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.816 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.839 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      53.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.840 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 43.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">62 ms</div>
</em><em class="status">passed</em>[44] 44</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.843 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 44.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.844 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.844 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.845 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.847 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.848 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.890 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.891 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    \frac{D_g u_g}{Dt} - f_{0}v_a - \beta y v_g = 0 <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.893 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   \frac{D_g u_g}{Dt} - f_{0}v_a - \beta y v_g = 0 <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.893 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        \frac{D_g u_g}{Dt} - f_{0}v_a - \beta y v_g = 0 <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  \frac{D_g u_g}{Dt} - f_{0}v_a - \beta y v_g = 0 <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\frac{D_g u_g}{Dt} - f_{0}v_a - \beta y v_g = 0<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \frac{D_g u_g}{Dt} - f_{0}v_a - \beta y v_g = 0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.895 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.895 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.895 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.896 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.896 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.898 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.898 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.900 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.900 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.900 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.900 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.901 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.904 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      25.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.904 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 20.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[45] 45</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.906 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 45.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.906 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.907 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.907 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.908 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.909 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   I_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  I_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.945 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       I_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.945 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: I_c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.945 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:I_c<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.945 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: I_c<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.946 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.946 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.946 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.947 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.948 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.949 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.949 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.950 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.950 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.951 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.951 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.951 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.952 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.952 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.952 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.953 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.954 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.954 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">68 ms</div>
</em><em class="status">passed</em>[46] 46</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.958 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 46.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.959 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.959 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.960 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.963 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:26.965 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.009 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \, A \mapsto M\alpha(A)M^{-1} ,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \, A \mapsto M\alpha(A)M^{-1} ,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \, A \mapsto M\alpha(A)M^{-1} ,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.011 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \, A \mapsto M\alpha(A)M^{-1} ,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.011 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\, A \mapsto M\alpha(A)M^{-1}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \, A \mapsto M\alpha(A)M^{-1}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.014 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.015 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.019 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.021 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.021 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.021 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.021 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.022 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.022 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.024 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      8.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.025 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 10.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">87 ms</div>
</em><em class="status">passed</em>[47] 47</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 47.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.094 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.095 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \Gamma_{\infty}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.096 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \Gamma_{\infty}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.096 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \Gamma_{\infty}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.097 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \Gamma_{\infty}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.099 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Gamma_{\infty}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.100 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Gamma_{\infty}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.100 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.100 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.101 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.102 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.104 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.106 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      2.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.117 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">73 ms</div>
</em><em class="status">passed</em>[48] 48</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.119 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 48.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.121 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.123 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.125 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.127 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.128 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.185 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.185 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   Y = \beta T_8 + I X<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.186 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  Y = \beta T_8 + I X<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.186 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       Y = \beta T_8 + I X<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.186 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: Y = \beta T_8 + I X<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.186 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:Y = \beta T_8 + I X<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.187 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: Y = \beta T_8 + I X<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.187 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.187 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.187 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.188 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.188 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.188 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.188 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.189 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.189 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.189 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.189 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.189 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.190 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.190 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.190 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.191 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.191 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      9.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.191 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 7.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">73 ms</div>
</em><em class="status">passed</em>[49] 49</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 49.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.195 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.195 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.232 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.232 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    \mu (A)= \begin{cases} 1 &amp; \mbox{ if } 0 \in A \\ <br/>                               0 &amp; \mbox{ if } 0 \notin A.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\end{cases}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.232 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   \mu (A)= \begin{cases} 1 &amp; \mbox{ if } 0 \in A \\ <br/>                               0 &amp; \mbox{ if } 0 \notin A.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\end{cases}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.233 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        \mu (A)= \begin{cases} 1 &amp; \mbox{ if } 0 \in A \\ <br/>                               0 &amp; \mbox{ if } 0 \notin A.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\end{cases}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.233 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  \mu (A)= \begin{cases} 1 &amp; \mbox{ if } 0 \in A \\ <br/>                               0 &amp; \mbox{ if } 0 \notin A.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\end{cases}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.234 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\mu (A)= \begin{cases} 1 &amp; \mbox{ if } 0 \in A \\ <br/>                               0 &amp; \mbox{ if } 0 \notin A.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\end{cases}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.234 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \mu (A)= \begin{cases} 1 &amp; \mbox{ if } 0 \in A \\ <br/>                               0 &amp; \mbox{ if } 0 \notin A.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\end{cases}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.235 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.235 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.240 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.254 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.255 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.256 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.256 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.257 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.259 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.261 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.265 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      13.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.265 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 18.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">55 ms</div>
</em><em class="status">passed</em>[50] 50</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.268 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 50.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.270 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.270 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.271 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.272 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.316 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.317 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \lambda_{in}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.317 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \lambda_{in}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.317 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \lambda_{in}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.317 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \lambda_{in}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.317 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\lambda_{in}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.318 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \lambda_{in}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.318 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.318 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.318 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.319 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.319 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.320 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.320 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.320 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.320 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.323 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      5.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.323 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 4.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[51] 51</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.324 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 51.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.365 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.365 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   rpm_{motor}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.366 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  rpm_{motor}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.366 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       rpm_{motor}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.366 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: rpm_{motor}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.366 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:rpm_{motor}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.366 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: rpm_{motor}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.367 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.367 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.367 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.369 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.369 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.369 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.369 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.372 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      17.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.372 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 25.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">173 ms</div>
</em><em class="status">passed</em>[52] 52</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.374 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 52.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.374 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.375 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.375 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.378 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.380 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.435 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.436 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \underbrace{u_1(\mathbf{x},z_1)=v_1+\dot{u}_x}_{\text{By definition of }v_1}=\overbrace{-\frac{\partial V_x}{\partial \mathbf{x}}g_x(\mathbf{x})-k_1(\underbrace{z_1-u_x(\mathbf{x})}_{e_1})}^{v_1} \, + \, \overbrace{\frac{\partial u_x}{\partial \mathbf{x}}(\underbrace{f_x(\mathbf{x})+g_x(\mathbf{x})z_1}_{\dot{\mathbf{x}} \text{ (i.e., } \frac{\operatorname{d}\mathbf{x}}{\operatorname{d}t} \text{)}})}^{\dot{u}_x \text{ (i.e., } \frac{ \operatorname{d}u_x }{\operatorname{d}t} \text{)}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.437 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \underbrace{u_1(\mathbf{x},z_1)=v_1+\dot{u}_x}_{\text{By definition of }v_1}=\overbrace{-\frac{\partial V_x}{\partial \mathbf{x}}g_x(\mathbf{x})-k_1(\underbrace{z_1-u_x(\mathbf{x})}_{e_1})}^{v_1} \, + \, \overbrace{\frac{\partial u_x}{\partial \mathbf{x}}(\underbrace{f_x(\mathbf{x})+g_x(\mathbf{x})z_1}_{\dot{\mathbf{x}} \text{ (i.e., } \frac{\operatorname{d}\mathbf{x}}{\operatorname{d}t} \text{)}})}^{\dot{u}_x \text{ (i.e., } \frac{ \operatorname{d}u_x }{\operatorname{d}t} \text{)}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.437 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \underbrace{u_1(\mathbf{x},z_1)=v_1+\dot{u}_x}_{\text{By definition of }v_1}=\overbrace{-\frac{\partial V_x}{\partial \mathbf{x}}g_x(\mathbf{x})-k_1(\underbrace{z_1-u_x(\mathbf{x})}_{e_1})}^{v_1} \, + \, \overbrace{\frac{\partial u_x}{\partial \mathbf{x}}(\underbrace{f_x(\mathbf{x})+g_x(\mathbf{x})z_1}_{\dot{\mathbf{x}} \text{ (i.e., } \frac{\operatorname{d}\mathbf{x}}{\operatorname{d}t} \text{)}})}^{\dot{u}_x \text{ (i.e., } \frac{ \operatorname{d}u_x }{\operatorname{d}t} \text{)}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.438 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \underbrace{u_1(\mathbf{x},z_1)=v_1+\dot{u}_x}_{\text{By definition of }v_1}=\overbrace{-\frac{\partial V_x}{\partial \mathbf{x}}g_x(\mathbf{x})-k_1(\underbrace{z_1-u_x(\mathbf{x})}_{e_1})}^{v_1} \, + \, \overbrace{\frac{\partial u_x}{\partial \mathbf{x}}(\underbrace{f_x(\mathbf{x})+g_x(\mathbf{x})z_1}_{\dot{\mathbf{x}} \text{ (i.e., } \frac{\operatorname{d}\mathbf{x}}{\operatorname{d}t} \text{)}})}^{\dot{u}_x \text{ (i.e., } \frac{ \operatorname{d}u_x }{\operatorname{d}t} \text{)}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\underbrace{u_1(\mathbf{x},z_1)=v_1+\dot{u}_x}_{\text{By definition of }v_1}=\overbrace{-\frac{\partial V_x}{\partial \mathbf{x}}g_x(\mathbf{x})-k_1(\underbrace{z_1-u_x(\mathbf{x})}_{e_1})}^{v_1} \, + \, \overbrace{\frac{\partial u_x}{\partial \mathbf{x}}(\underbrace{f_x(\mathbf{x})+g_x(\mathbf{x})z_1}_{\dot{\mathbf{x}} \text{ (i.e., } \frac{\operatorname{d}\mathbf{x}}{\operatorname{d}t} \text{)}})}^{\dot{u}_x \text{ (i.e., } \frac{ \operatorname{d}u_x }{\operatorname{d}t} \text{)}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \underbrace{u_1(\mathbf{x},z_1)=v_1+\dot{u}_x}_{\text{By definition of }v_1}=\overbrace{-\frac{\partial V_x}{\partial \mathbf{x}}g_x(\mathbf{x})-k_1(\underbrace{z_1-u_x(\mathbf{x})}_{e_1})}^{v_1} \, + \, \overbrace{\frac{\partial u_x}{\partial \mathbf{x}}(\underbrace{f_x(\mathbf{x})+g_x(\mathbf{x})z_1}_{\dot{\mathbf{x}} \text{ (i.e., } \frac{\operatorname{d}\mathbf{x}}{\operatorname{d}t} \text{)}})}^{\dot{u}_x \text{ (i.e., } \frac{ \operatorname{d}u_x }{\operatorname{d}t} \text{)}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.440 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.440 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.441 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.443 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.446 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.448 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.448 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.452 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.452 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      110.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 111.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">78 ms</div>
</em><em class="status">passed</em>[53] 53</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 53.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.549 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.549 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.551 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.610 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.610 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   E \left[ \hat{\sigma}^2\right]= \frac{n-1}{n} \sigma^2<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.611 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  E \left[ \hat{\sigma}^2\right]= \frac{n-1}{n} \sigma^2<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.611 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       E \left[ \hat{\sigma}^2\right]= \frac{n-1}{n} \sigma^2<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.611 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: E \left[ \hat{\sigma}^2\right]= \frac{n-1}{n} \sigma^2<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.611 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:E \left[ \hat{\sigma}^2\right]= \frac{n-1}{n} \sigma^2<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.611 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: E \left[ \hat{\sigma}^2\right]= \frac{n-1}{n} \sigma^2<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.612 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.612 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.612 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.613 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.615 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.616 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.617 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.618 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.618 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.619 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.619 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.620 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.620 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.620 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.620 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.621 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.624 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      13.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 10.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">94 ms</div>
</em><em class="status">passed</em>[54] 54</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 54.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.630 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.702 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.702 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \mathsf{fv}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.703 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \mathsf{fv}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.703 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \mathsf{fv}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.704 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \mathsf{fv}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.704 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\mathsf{fv}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.704 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \mathsf{fv}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.706 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.708 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.708 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.710 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.712 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.712 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.714 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.714 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.714 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.718 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      0.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.720 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">96 ms</div>
</em><em class="status">passed</em>[55] 55</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.724 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 55.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.724 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.725 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.726 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.729 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.732 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.798 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.800 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \sum_x \sum_y I(x,y) \,\!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.801 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \sum_x \sum_y I(x,y) \,\!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.802 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \sum_x \sum_y I(x,y) \,\!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.802 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \sum_x \sum_y I(x,y) \,\!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.803 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\sum_x \sum_y I(x,y) \,\!<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.803 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \sum_x \sum_y I(x,y) \,\!<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.804 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.804 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.805 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.807 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.810 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.811 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.811 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.812 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.812 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.813 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.814 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.814 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.815 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.815 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.816 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.816 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.818 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      14.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.819 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 9.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">67 ms</div>
</em><em class="status">passed</em>[56] 56</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 56.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.822 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.822 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.824 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.825 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.880 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.880 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \boldsymbol{F}_r<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.880 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \boldsymbol{F}_r<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.881 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \boldsymbol{F}_r<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.881 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \boldsymbol{F}_r<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.881 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\boldsymbol{F}_r<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.881 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \boldsymbol{F}_r<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.881 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.882 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.882 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.882 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.883 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.883 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.883 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.884 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.884 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.884 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.885 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.885 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.885 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.885 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.885 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.886 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.886 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.887 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">45 ms</div>
</em><em class="status">passed</em>[57] 57</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.891 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 57.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.892 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.892 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.893 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.893 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.929 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.929 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   0\rightarrow B\rightarrow A\oplus B\rightarrow A\rightarrow0.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  0\rightarrow B\rightarrow A\oplus B\rightarrow A\rightarrow0.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       0\rightarrow B\rightarrow A\oplus B\rightarrow A\rightarrow0.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: 0\rightarrow B\rightarrow A\oplus B\rightarrow A\rightarrow0.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:0\rightarrow B\rightarrow A\oplus B\rightarrow A\rightarrow0<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: 0\rightarrow B\rightarrow A\oplus B\rightarrow A\rightarrow0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      9.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 4.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">72 ms</div>
</em><em class="status">passed</em>[58] 58</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.937 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 58.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.939 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.940 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.986 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.986 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   (\nabla_Y T)(\alpha_1, \alpha_2, \ldots, X_1, X_2, \ldots) =Y(T(\alpha_1,\alpha_2,\ldots,X_1,X_2,\ldots))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.987 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  (\nabla_Y T)(\alpha_1, \alpha_2, \ldots, X_1, X_2, \ldots) =Y(T(\alpha_1,\alpha_2,\ldots,X_1,X_2,\ldots))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.987 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       (\nabla_Y T)(\alpha_1, \alpha_2, \ldots, X_1, X_2, \ldots) =Y(T(\alpha_1,\alpha_2,\ldots,X_1,X_2,\ldots))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.987 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: (\nabla_Y T)(\alpha_1, \alpha_2, \ldots, X_1, X_2, \ldots) =Y(T(\alpha_1,\alpha_2,\ldots,X_1,X_2,\ldots))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.988 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:(\nabla_Y T)(\alpha_1, \alpha_2, \ldots, X_1, X_2, \ldots) =Y(T(\alpha_1,\alpha_2,\ldots,X_1,X_2,\ldots))<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.988 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: (\nabla_Y T)(\alpha_1, \alpha_2, \ldots, X_1, X_2, \ldots) =Y(T(\alpha_1,\alpha_2,\ldots,X_1,X_2,\ldots))<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.988 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.989 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.989 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.992 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.996 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.996 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:27.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.008 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      40.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.009 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 30.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">57 ms</div>
</em><em class="status">passed</em>[59] 59</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.011 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 59.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.011 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.014 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.014 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.051 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.052 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    \sum_{n \in \mathbb{Z}^d} |\psi(t,n)|^2 |n| \leq C <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.052 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   \sum_{n \in \mathbb{Z}^d} |\psi(t,n)|^2 |n| \leq C <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.052 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        \sum_{n \in \mathbb{Z}^d} |\psi(t,n)|^2 |n| \leq C <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.052 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  \sum_{n \in \mathbb{Z}^d} |\psi(t,n)|^2 |n| \leq C <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.052 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\sum_{n \in \mathbb{Z}^d} |\psi(t,n)|^2 |n| \leq C<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.053 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \sum_{n \in \mathbb{Z}^d} |\psi(t,n)|^2 |n| \leq C<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.053 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.053 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.053 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.054 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.057 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.057 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.058 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.059 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.060 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.062 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.063 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.064 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.064 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.065 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.065 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.065 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.067 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      23.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.067 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 16.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">74 ms</div>
</em><em class="status">passed</em>[60] 60</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.069 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 60.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.069 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.069 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.070 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.071 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.072 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    p = {\frac{-x\pm\sqrt{x^2-4(\frac{-gx^2}{2v^2})(\frac{-gx^2}{2v^2}-y)}}{2(\frac{-gx^2}{2v^2}) }}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   p = {\frac{-x\pm\sqrt{x^2-4(\frac{-gx^2}{2v^2})(\frac{-gx^2}{2v^2}-y)}}{2(\frac{-gx^2}{2v^2}) }}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        p = {\frac{-x\pm\sqrt{x^2-4(\frac{-gx^2}{2v^2})(\frac{-gx^2}{2v^2}-y)}}{2(\frac{-gx^2}{2v^2}) }}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  p = {\frac{-x\pm\sqrt{x^2-4(\frac{-gx^2}{2v^2})(\frac{-gx^2}{2v^2}-y)}}{2(\frac{-gx^2}{2v^2}) }}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:p = {\frac{-x\pm\sqrt{x^2-4(\frac{-gx^2}{2v^2})(\frac{-gx^2}{2v^2}-y)}}{2(\frac{-gx^2}{2v^2}) }}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: p = {\frac{-x\pm\sqrt{x^2-4(\frac{-gx^2}{2v^2})(\frac{-gx^2}{2v^2}-y)}}{2(\frac{-gx^2}{2v^2}) }}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.117 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.118 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.119 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.120 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.121 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.124 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.125 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.126 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.126 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.126 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.126 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.127 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.142 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      53.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.143 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 35.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">57 ms</div>
</em><em class="status">passed</em>[61] 61</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.144 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 61.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.144 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.145 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.145 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.148 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.190 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.192 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \left\{ z \in H: \left| z \right| &gt; 1,\, \left| \,\mbox{Re}(z) \,\right| &lt; \frac{1}{2} \right\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.192 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \left\{ z \in H: \left| z \right| &gt; 1,\, \left| \,\mbox{Re}(z) \,\right| &lt; \frac{1}{2} \right\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \left\{ z \in H: \left| z \right| &gt; 1,\, \left| \,\mbox{Re}(z) \,\right| &lt; \frac{1}{2} \right\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \left\{ z \in H: \left| z \right| &gt; 1,\, \left| \,\mbox{Re}(z) \,\right| &lt; \frac{1}{2} \right\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\left\{ z \in H: \left| z \right| &gt; 1,\, \left| \,\mbox{Re}(z) \,\right| &lt; \frac{1}{2} \right\}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \left\{ z \in H: \left| z \right| &gt; 1,\, \left| \,\mbox{Re}(z) \,\right| &lt; \frac{1}{2} \right\}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.194 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.194 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.195 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.195 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.195 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.196 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.196 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.197 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.197 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.197 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.197 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.197 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.198 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.198 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.200 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      30.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.200 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 10.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">50 ms</div>
</em><em class="status">passed</em>[62] 62</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 62.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.204 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.240 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.242 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   T-\lambda I<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.243 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  T-\lambda I<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.244 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       T-\lambda I<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.244 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: T-\lambda I<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.245 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:T-\lambda I<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: T-\lambda I<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.251 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.251 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.251 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">56 ms</div>
</em><em class="status">passed</em>[63] 63</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.255 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 63.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.256 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.257 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.259 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.261 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.264 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.298 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.298 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/>    y\left( x \right) = {\mathop{\rm sgn}} \left( {{\rho }} \right)\frac{{{\sigma _y}}}{{{\sigma _x}}}\left( {x - {\mu _x}} \right) + {\mu _y}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">  <br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.299 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/>    y\left( x \right) = {\mathop{\rm sgn}} \left( {{\rho }} \right)\frac{{{\sigma _y}}}{{{\sigma _x}}}\left( {x - {\mu _x}} \right) + {\mu _y}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">  <br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.299 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/>    y\left( x \right) = {\mathop{\rm sgn}} \left( {{\rho }} \right)\frac{{{\sigma _y}}}{{{\sigma _x}}}\left( {x - {\mu _x}} \right) + {\mu _y}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">  <br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.300 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/>    y\left( x \right) = {\mathop{\rm sgn}} \left( {{\rho }} \right)\frac{{{\sigma _y}}}{{{\sigma _x}}}\left( {x - {\mu _x}} \right) + {\mu _y}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">  <br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.300 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:y\left( x \right) = {\mathop{\rm sgn}} \left( {{\rho }} \right)\frac{{{\sigma _y}}}{{{\sigma _x}}}\left( {x - {\mu _x}} \right) + {\mu _y}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.301 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: y\left( x \right) = {\mathop{\rm sgn}} \left( {{\rho }} \right)\frac{{{\sigma _y}}}{{{\sigma _x}}}\left( {x - {\mu _x}} \right) + {\mu _y}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.301 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.301 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.301 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.302 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.303 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.303 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.303 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.304 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.304 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.305 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.305 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.306 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.306 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.306 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.306 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.306 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.309 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      27.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.310 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 19.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">45 ms</div>
</em><em class="status">passed</em>[64] 64</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.311 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 64.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.311 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.312 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.312 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.313 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.313 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.349 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.349 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   x=b \ <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.349 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  x=b \ <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.349 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       x=b \ <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.349 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: x=b \ <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.350 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:x=b \<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.350 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: x=b \<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.350 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.350 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.350 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.351 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.351 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.352 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.352 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.352 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.353 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.353 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.353 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.353 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      1.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.356 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">62 ms</div>
</em><em class="status">passed</em>[65] 65</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 65.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.358 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.358 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.358 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.399 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   H^1(K)=\sqrt{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  H^1(K)=\sqrt{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       H^1(K)=\sqrt{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: H^1(K)=\sqrt{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:H^1(K)=\sqrt{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: H^1(K)=\sqrt{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.402 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.402 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.416 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.416 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.416 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      7.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 6.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[66] 66</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 66.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.422 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.422 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.457 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.458 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   P_i = \mbox{head}(E_K (S_{i-1}), x) \oplus C_i<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.458 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  P_i = \mbox{head}(E_K (S_{i-1}), x) \oplus C_i<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.458 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       P_i = \mbox{head}(E_K (S_{i-1}), x) \oplus C_i<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.458 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: P_i = \mbox{head}(E_K (S_{i-1}), x) \oplus C_i<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.458 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:P_i = \mbox{head}(E_K (S_{i-1}), x) \oplus C_i<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.458 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: P_i = \mbox{head}(E_K (S_{i-1}), x) \oplus C_i<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.459 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.459 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.459 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.459 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.460 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.461 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.461 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.462 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.462 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.463 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.463 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.463 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      18.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 13.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">58 ms</div>
</em><em class="status">passed</em>[67] 67</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.471 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 67.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.472 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.472 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.473 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.474 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.475 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.516 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.516 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \frac{ \partial f}{ \partial x} = f_x = \partial_x f.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.517 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \frac{ \partial f}{ \partial x} = f_x = \partial_x f.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.517 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \frac{ \partial f}{ \partial x} = f_x = \partial_x f.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.517 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \frac{ \partial f}{ \partial x} = f_x = \partial_x f.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.517 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\frac{ \partial f}{ \partial x} = f_x = \partial_x f<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.517 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \frac{ \partial f}{ \partial x} = f_x = \partial_x f<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.518 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.518 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.518 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.520 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.520 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.521 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.522 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.522 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.523 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.524 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.525 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.525 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.526 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.526 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.526 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.526 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.527 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      15.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.527 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 14.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">47 ms</div>
</em><em class="status">passed</em>[68] 68</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.528 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 68.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.529 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.529 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.529 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.531 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.531 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.569 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.569 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    P_x = P - \{ a\mid a \geq x\} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.569 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   P_x = P - \{ a\mid a \geq x\} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.570 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        P_x = P - \{ a\mid a \geq x\} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.570 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  P_x = P - \{ a\mid a \geq x\} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.570 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:P_x = P - \{ a\mid a \geq x\}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.570 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: P_x = P - \{ a\mid a \geq x\}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.570 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.570 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.571 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.571 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.571 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.572 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.572 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.573 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.573 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.573 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.573 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.573 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.573 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.574 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.574 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.574 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.575 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      10.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.575 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">66 ms</div>
</em><em class="status">passed</em>[69] 69</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.576 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 69.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.576 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.576 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.576 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.577 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.578 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \eta = \frac{ work\ done } {heat\ absorbed}  = \frac{ Q1-Q2 }{ Q1}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \eta = \frac{ work\ done } {heat\ absorbed}  = \frac{ Q1-Q2 }{ Q1}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \eta = \frac{ work\ done } {heat\ absorbed}  = \frac{ Q1-Q2 }{ Q1}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \eta = \frac{ work\ done } {heat\ absorbed}  = \frac{ Q1-Q2 }{ Q1}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\eta = \frac{ work\ done } {heat\ absorbed}  = \frac{ Q1-Q2 }{ Q1}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \eta = \frac{ work\ done } {heat\ absorbed}  = \frac{ Q1-Q2 }{ Q1}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.630 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.635 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.635 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.635 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.635 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.640 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      49.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.641 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 81.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[70] 70</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.643 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 70.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.644 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.644 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.645 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.647 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.648 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   df = {\partial f \over \partial x}dx + {\partial f \over \partial y}dy = pdx + vdy<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  df = {\partial f \over \partial x}dx + {\partial f \over \partial y}dy = pdx + vdy<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       df = {\partial f \over \partial x}dx + {\partial f \over \partial y}dy = pdx + vdy<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: df = {\partial f \over \partial x}dx + {\partial f \over \partial y}dy = pdx + vdy<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:df = {\partial f \over \partial x}dx + {\partial f \over \partial y}dy = pdx + vdy<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: df = {\partial f \over \partial x}dx + {\partial f \over \partial y}dy = pdx + vdy<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.682 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.682 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.683 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.683 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.683 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.683 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.684 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.684 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.684 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.684 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.684 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.685 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.685 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.687 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      32.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.687 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 47.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">38 ms</div>
</em><em class="status">passed</em>[71] 71</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.688 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 71.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.688 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.688 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.688 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.689 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.690 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.721 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   h_{r,s}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  h_{r,s}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       h_{r,s}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: h_{r,s}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:h_{r,s}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: h_{r,s}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.724 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.724 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.724 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.724 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.725 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.725 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.725 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.725 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.725 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.725 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.726 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.726 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.726 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.726 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">69 ms</div>
</em><em class="status">passed</em>[72] 72</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.727 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 72.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.728 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.728 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.728 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.730 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.730 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    K^M_*(k) := T^*(k^\times)/(a\otimes (1-a)) <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   K^M_*(k) := T^*(k^\times)/(a\otimes (1-a)) <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        K^M_*(k) := T^*(k^\times)/(a\otimes (1-a)) <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  K^M_*(k) := T^*(k^\times)/(a\otimes (1-a)) <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:K^M_*(k) := T^*(k^\times)/(a\otimes (1-a))<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.784 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: K^M_*(k) := T^*(k^\times)/(a\otimes (1-a))<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.784 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.784 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.784 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.785 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.785 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.786 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.786 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.786 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.787 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.789 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.789 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.790 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.790 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.790 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      30.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 17.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">45 ms</div>
</em><em class="status">passed</em>[73] 73</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.798 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 73.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.798 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.800 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.800 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.834 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \{C : K_X \cdot C = 0\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \{C : K_X \cdot C = 0\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \{C : K_X \cdot C = 0\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \{C : K_X \cdot C = 0\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\{C : K_X \cdot C = 0\}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \{C : K_X \cdot C = 0\}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.837 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.838 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.838 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.839 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.840 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.840 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.841 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.841 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.841 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.842 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.842 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.842 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.842 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.843 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      7.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.843 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 4.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">48 ms</div>
</em><em class="status">passed</em>[74] 74</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.844 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 74.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.844 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.844 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.844 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.845 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.846 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.879 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.879 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \Theta \wedge<br/>(d\Theta)^n \neq 0<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.879 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \Theta \wedge<br/>(d\Theta)^n \neq 0<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.880 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \Theta \wedge<br/>(d\Theta)^n \neq 0<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.880 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \Theta \wedge<br/>(d\Theta)^n \neq 0<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.880 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Theta \wedge<br/>(d\Theta)^n \neq 0<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.880 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Theta \wedge<br/>(d\Theta)^n \neq 0<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.880 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.881 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.881 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.883 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.884 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.885 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.885 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.886 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.886 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.886 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.887 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.887 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.887 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.888 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.888 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.889 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.890 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      8.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.891 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 7.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">42 ms</div>
</em><em class="status">passed</em>[75] 75</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.893 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 75.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.895 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.895 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.929 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.929 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   D\left(\rho u_i\right)/Dt\approx0<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  D\left(\rho u_i\right)/Dt\approx0<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       D\left(\rho u_i\right)/Dt\approx0<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: D\left(\rho u_i\right)/Dt\approx0<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:D\left(\rho u_i\right)/Dt\approx0<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: D\left(\rho u_i\right)/Dt\approx0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      13.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 11.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">42 ms</div>
</em><em class="status">passed</em>[76] 76</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 76.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    z_{t} = \lambda_{1}z_{t-1} + \varepsilon_{t} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   z_{t} = \lambda_{1}z_{t-1} + \varepsilon_{t} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        z_{t} = \lambda_{1}z_{t-1} + \varepsilon_{t} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  z_{t} = \lambda_{1}z_{t-1} + \varepsilon_{t} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:z_{t} = \lambda_{1}z_{t-1} + \varepsilon_{t}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: z_{t} = \lambda_{1}z_{t-1} + \varepsilon_{t}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.973 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.973 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.974 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.974 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.974 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.975 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.975 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.978 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      16.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.978 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 10.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">72 ms</div>
</em><em class="status">passed</em>[77] 77</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.979 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 77.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.979 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.979 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.980 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.981 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:28.981 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.026 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.027 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   b_3<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.028 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  b_3<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.029 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       b_3<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.029 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: b_3<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.030 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:b_3<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: b_3<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.037 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.039 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.040 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.042 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.044 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.045 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.045 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.045 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.046 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.046 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.047 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.048 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.048 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.049 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">60 ms</div>
</em><em class="status">passed</em>[78] 78</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.052 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 78.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.053 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.053 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.054 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.056 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.058 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.106 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   b_3<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  b_3<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       b_3<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: b_3<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:b_3<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: b_3<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.108 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.108 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.108 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.108 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.109 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.109 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.109 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">52 ms</div>
</em><em class="status">passed</em>[79] 79</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 79.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.148 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    \Delta W = \int_{V_1}^{V_2} p \mathrm{d}V \,\!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   \Delta W = \int_{V_1}^{V_2} p \mathrm{d}V \,\!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        \Delta W = \int_{V_1}^{V_2} p \mathrm{d}V \,\!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  \Delta W = \int_{V_1}^{V_2} p \mathrm{d}V \,\!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Delta W = \int_{V_1}^{V_2} p \mathrm{d}V \,\!<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Delta W = \int_{V_1}^{V_2} p \mathrm{d}V \,\!<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.156 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.163 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      20.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 12.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[80] 80</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 80.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.166 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.166 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.168 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.169 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \dim f(Z) &gt; n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \dim f(Z) &gt; n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \dim f(Z) &gt; n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \dim f(Z) &gt; n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\dim f(Z) &gt; n<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \dim f(Z) &gt; n<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.204 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.205 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.206 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.207 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.207 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.207 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      6.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 7.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">37 ms</div>
</em><em class="status">passed</em>[81] 81</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 81.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.211 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.211 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.211 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.242 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.242 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \frac{d}{dt} \log_e t = \frac{1}{t}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.242 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \frac{d}{dt} \log_e t = \frac{1}{t}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.242 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \frac{d}{dt} \log_e t = \frac{1}{t}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.243 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \frac{d}{dt} \log_e t = \frac{1}{t}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.243 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\frac{d}{dt} \log_e t = \frac{1}{t}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.243 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \frac{d}{dt} \log_e t = \frac{1}{t}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.243 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.243 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.243 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.244 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.244 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.245 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.245 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.245 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.245 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.245 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      13.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 14.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">51 ms</div>
</em><em class="status">passed</em>[82] 82</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 82.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.287 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   h_i : X \to \{-1,+1\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  h_i : X \to \{-1,+1\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       h_i : X \to \{-1,+1\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.290 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: h_i : X \to \{-1,+1\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.290 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:h_i : X \to \{-1,+1\}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.290 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: h_i : X \to \{-1,+1\}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.291 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.291 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.291 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.293 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.294 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.295 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.295 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.296 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.296 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.296 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.297 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.297 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.297 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.297 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.297 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.298 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.298 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      12.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.299 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 6.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[83] 83</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.302 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 83.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.302 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.302 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.303 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.305 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.306 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.334 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.334 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   2\le seqs \le6<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  2\le seqs \le6<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       2\le seqs \le6<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: 2\le seqs \le6<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:2\le seqs \le6<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: 2\le seqs \le6<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.336 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.336 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.337 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.338 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.338 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.338 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.339 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.340 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.340 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.341 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.341 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.341 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.341 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.341 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.342 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.342 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      10.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.342 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 13.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[84] 84</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.343 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 84.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.343 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.344 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.344 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.345 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.346 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:    F = \{ (x,y) : x \in \mathcal{R}^b,\, y \in \mathcal{R}^n,\; x=y \}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:   F = \{ (x,y) : x \in \mathcal{R}^b,\, y \in \mathcal{R}^n,\; x=y \}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:        F = \{ (x,y) : x \in \mathcal{R}^b,\, y \in \mathcal{R}^n,\; x=y \}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks:  F = \{ (x,y) : x \in \mathcal{R}^b,\, y \in \mathcal{R}^n,\; x=y \}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:F = \{ (x,y) : x \in \mathcal{R}^b,\, y \in \mathcal{R}^n,\; x=y \}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: F = \{ (x,y) : x \in \mathcal{R}^b,\, y \in \mathcal{R}^n,\; x=y \}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.378 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.378 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.380 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.380 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.381 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.381 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.381 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.381 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.381 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.383 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      27.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.383 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 14.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">42 ms</div>
</em><em class="status">passed</em>[85] 85</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.385 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 85.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.385 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.385 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.385 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.386 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.386 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   X_i(\omega)=\omega_i<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  X_i(\omega)=\omega_i<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       X_i(\omega)=\omega_i<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: X_i(\omega)=\omega_i<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:X_i(\omega)=\omega_i<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: X_i(\omega)=\omega_i<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.421 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.421 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.422 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.423 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.424 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.424 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.424 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.424 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.424 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.425 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.425 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.425 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.426 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      7.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.426 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 6.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[86] 86</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.429 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 86.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.432 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.462 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/>{\partial{L}\over \partial q_i} = {\mathrm{d} \over \mathrm{d}t}{\partial{L}\over \partial{\dot{q_i}}}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/>{\partial{L}\over \partial q_i} = {\mathrm{d} \over \mathrm{d}t}{\partial{L}\over \partial{\dot{q_i}}}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/>{\partial{L}\over \partial q_i} = {\mathrm{d} \over \mathrm{d}t}{\partial{L}\over \partial{\dot{q_i}}}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/>{\partial{L}\over \partial q_i} = {\mathrm{d} \over \mathrm{d}t}{\partial{L}\over \partial{\dot{q_i}}}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:{\partial{L}\over \partial q_i} = {\mathrm{d} \over \mathrm{d}t}{\partial{L}\over \partial{\dot{q_i}}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: {\partial{L}\over \partial q_i} = {\mathrm{d} \over \mathrm{d}t}{\partial{L}\over \partial{\dot{q_i}}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.469 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.470 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      22.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.470 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 19.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">45 ms</div>
</em><em class="status">passed</em>[87] 87</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.471 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 87.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.471 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.471 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.472 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.472 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.472 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.502 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.502 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   x_7<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.502 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  x_7<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       x_7<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: x_7<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.504 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:x_7<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.504 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: x_7<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.505 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.505 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.505 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.512 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.512 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.513 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.513 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.514 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.514 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.514 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.514 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.515 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.515 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.515 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[88] 88</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.516 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 88.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.517 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.517 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.517 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.518 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.518 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.549 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.549 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \Pi_n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \Pi_n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \Pi_n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \Pi_n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Pi_n<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Pi_n<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.551 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.551 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.551 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.551 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.553 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.553 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.553 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.553 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.553 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.554 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.554 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.554 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.554 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[89] 89</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.556 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 89.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.557 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.558 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.558 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.559 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.559 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.589 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.590 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \sigma^2 = X^TVX,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.590 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \sigma^2 = X^TVX,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.591 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \sigma^2 = X^TVX,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \sigma^2 = X^TVX,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\sigma^2 = X^TVX<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \sigma^2 = X^TVX<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/>Caught an exception: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.596 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.596 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      12.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.596 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 15.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">80 ms</div>
</em><em class="status">passed</em>[90] 90</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 90.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.598 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.598 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.599 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.599 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \int_{\mathbb{R}^n}f\,dx = \int_0^\infty\left\{\int_{\partial B(x_0;r)} f\,dS\right\}\,dr.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \int_{\mathbb{R}^n}f\,dx = \int_0^\infty\left\{\int_{\partial B(x_0;r)} f\,dS\right\}\,dr.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \int_{\mathbb{R}^n}f\,dx = \int_0^\infty\left\{\int_{\partial B(x_0;r)} f\,dS\right\}\,dr.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \int_{\mathbb{R}^n}f\,dx = \int_0^\infty\left\{\int_{\partial B(x_0;r)} f\,dS\right\}\,dr.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\int_{\mathbb{R}^n}f\,dx = \int_0^\infty\left\{\int_{\partial B(x_0;r)} f\,dS\right\}\,dr<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \int_{\mathbb{R}^n}f\,dx = \int_0^\infty\left\{\int_{\partial B(x_0;r)} f\,dS\right\}\,dr<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.672 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.672 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.676 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      36.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 32.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">50 ms</div>
</em><em class="status">passed</em>[91] 91</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 91.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.679 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.718 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.719 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/>\{x, p_x\}_{DB} = \{y, p_y\}_{DB} = \frac{1}{2}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.719 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/>\{x, p_x\}_{DB} = \{y, p_y\}_{DB} = \frac{1}{2}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.719 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/>\{x, p_x\}_{DB} = \{y, p_y\}_{DB} = \frac{1}{2}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.719 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/>\{x, p_x\}_{DB} = \{y, p_y\}_{DB} = \frac{1}{2}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.719 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\{x, p_x\}_{DB} = \{y, p_y\}_{DB} = \frac{1}{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.720 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \{x, p_x\}_{DB} = \{y, p_y\}_{DB} = \frac{1}{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.720 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.720 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.720 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.721 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.721 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.721 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.724 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.724 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.724 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.725 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.727 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      21.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.727 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 16.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">60 ms</div>
</em><em class="status">passed</em>[92] 92</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.729 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 92.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.729 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.729 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.730 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.730 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.731 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.774 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   G_{k, \sigma} (y)= 1-(1+ky/\sigma)^{-1/k} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  G_{k, \sigma} (y)= 1-(1+ky/\sigma)^{-1/k} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.777 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       G_{k, \sigma} (y)= 1-(1+ky/\sigma)^{-1/k} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: G_{k, \sigma} (y)= 1-(1+ky/\sigma)^{-1/k} <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:G_{k, \sigma} (y)= 1-(1+ky/\sigma)^{-1/k}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: G_{k, \sigma} (y)= 1-(1+ky/\sigma)^{-1/k}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.780 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.784 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.784 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.784 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.784 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.787 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      21.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.787 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 18.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[93] 93</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.789 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 93.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.790 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.790 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.791 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   L(H_B) \otimes C(X)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  L(H_B) \otimes C(X)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       L(H_B) \otimes C(X)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: L(H_B) \otimes C(X)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:L(H_B) \otimes C(X)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: L(H_B) \otimes C(X)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.830 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.830 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.830 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.833 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      8.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.833 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 8.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[94] 94</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.834 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 94.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.834 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.834 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.869 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.869 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \pi_i = 2^{-N} \tbinom Ni<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \pi_i = 2^{-N} \tbinom Ni<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \pi_i = 2^{-N} \tbinom Ni<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \pi_i = 2^{-N} \tbinom Ni<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\pi_i = 2^{-N} \tbinom Ni<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \pi_i = 2^{-N} \tbinom Ni<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.871 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.871 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.871 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.872 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.872 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.872 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.874 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.874 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.874 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      12.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.874 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 13.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">57 ms</div>
</em><em class="status">passed</em>[95] 95</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.875 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 95.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.875 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.876 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.876 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.877 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.878 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.918 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.918 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   (\sqrt{p_1}, \cdots ,\sqrt{p_n})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.918 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  (\sqrt{p_1}, \cdots ,\sqrt{p_n})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.919 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       (\sqrt{p_1}, \cdots ,\sqrt{p_n})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.919 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: (\sqrt{p_1}, \cdots ,\sqrt{p_n})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.919 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:(\sqrt{p_1}, \cdots ,\sqrt{p_n})<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.920 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: (\sqrt{p_1}, \cdots ,\sqrt{p_n})<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.920 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.920 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.920 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.922 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.923 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.924 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.926 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.926 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.926 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.927 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.927 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.927 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.928 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.928 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.928 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.929 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      12.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 2.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">43 ms</div>
</em><em class="status">passed</em>[96] 96</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 96.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.967 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.967 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \boldsymbol{s}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.967 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \boldsymbol{s}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.967 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \boldsymbol{s}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.967 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \boldsymbol{s}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.968 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\boldsymbol{s}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.968 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \boldsymbol{s}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.968 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.968 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.968 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.969 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.969 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.970 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.970 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.973 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.973 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.974 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      0.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.974 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[97] 97</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.975 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 97.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:29.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.007 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.008 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \mathbf{J^TW\  \Delta y}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.008 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \mathbf{J^TW\  \Delta y}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.008 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \mathbf{J^TW\  \Delta y}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.009 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \mathbf{J^TW\  \Delta y}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.009 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\mathbf{J^TW\  \Delta y}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.009 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \mathbf{J^TW\  \Delta y}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.009 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.009 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.009 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/>Caught an exception: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.011 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.011 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.014 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.014 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.014 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.014 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.015 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      5.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.015 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 9.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">40 ms</div>
</em><em class="status">passed</em>[98] 98</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 98.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.019 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.049 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.050 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \bar V^*<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.050 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \bar V^*<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.050 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \bar V^*<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.050 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \bar V^*<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.050 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\bar V^*<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.051 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \bar V^*<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.051 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.051 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.051 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.051 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.052 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.052 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.052 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.052 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.053 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.053 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.053 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.053 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.053 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.054 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.054 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.054 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.055 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      4.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.055 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 4.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">42 ms</div>
</em><em class="status">passed</em>[99] 99</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.057 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 99.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.058 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.058 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.058 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.060 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.062 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.091 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.092 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \;\frac{(n+\delta-1)(n+\delta-2)\cdots n}{(\delta-1)!}\;<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.092 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \;\frac{(n+\delta-1)(n+\delta-2)\cdots n}{(\delta-1)!}\;<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.092 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \;\frac{(n+\delta-1)(n+\delta-2)\cdots n}{(\delta-1)!}\;<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.092 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \;\frac{(n+\delta-1)(n+\delta-2)\cdots n}{(\delta-1)!}\;<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.093 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\;\frac{(n+\delta-1)(n+\delta-2)\cdots n}{(\delta-1)!}\<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.093 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \;\frac{(n+\delta-1)(n+\delta-2)\cdots n}{(\delta-1)!}\<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.093 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.094 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.094 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.094 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.095 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.095 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.095 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.096 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.096 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.096 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.097 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.097 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.097 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.097 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.097 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.097 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.099 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      24.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.099 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 16.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[100] 100</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.100 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 100.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.100 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.100 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.101 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.101 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.101 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.139 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.140 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   y_k[n]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.140 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  y_k[n]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.140 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       y_k[n]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.140 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: y_k[n]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.141 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:y_k[n]<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.141 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: y_k[n]<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.141 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.141 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.142 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.142 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.143 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.144 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.144 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.144 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.145 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.145 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.145 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.146 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.146 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.146 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.146 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.147 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.148 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      4.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[101] 101</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 101.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.184 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.184 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   |f(a+\alpha,b+\beta) - f(a,b)| &lt; \epsilon<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.185 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  |f(a+\alpha,b+\beta) - f(a,b)| &lt; \epsilon<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.185 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       |f(a+\alpha,b+\beta) - f(a,b)| &lt; \epsilon<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.185 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: |f(a+\alpha,b+\beta) - f(a,b)| &lt; \epsilon<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.185 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:|f(a+\alpha,b+\beta) - f(a,b)| &lt; \epsilon<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.185 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: |f(a+\alpha,b+\beta) - f(a,b)| &lt; \epsilon<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.185 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.186 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.186 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.187 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.188 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.188 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.189 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.189 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.190 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.191 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.191 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.192 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.192 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.192 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.192 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.192 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.194 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      23.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.194 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 14.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[102] 102</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.195 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 102.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.195 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.195 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.195 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.196 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.196 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.227 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.228 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \epsilon_{jk\ell}\epsilon_{\ell mn}=\delta_{j,m}\delta_{k,n}-\delta_{j,n} \delta_{k,m}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.228 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \epsilon_{jk\ell}\epsilon_{\ell mn}=\delta_{j,m}\delta_{k,n}-\delta_{j,n} \delta_{k,m}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.228 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \epsilon_{jk\ell}\epsilon_{\ell mn}=\delta_{j,m}\delta_{k,n}-\delta_{j,n} \delta_{k,m}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.229 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \epsilon_{jk\ell}\epsilon_{\ell mn}=\delta_{j,m}\delta_{k,n}-\delta_{j,n} \delta_{k,m}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.229 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\epsilon_{jk\ell}\epsilon_{\ell mn}=\delta_{j,m}\delta_{k,n}-\delta_{j,n} \delta_{k,m}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.229 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \epsilon_{jk\ell}\epsilon_{\ell mn}=\delta_{j,m}\delta_{k,n}-\delta_{j,n} \delta_{k,m}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.229 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.229 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.229 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.230 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.231 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.231 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.232 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.232 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.232 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.233 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.233 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.233 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.233 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.233 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.234 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.234 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.236 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      23.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.236 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 28.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">59 ms</div>
</em><em class="status">passed</em>[103] 103</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.237 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 103.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.237 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.237 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.237 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.238 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.238 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.284 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \ph@@{z} = \theta + 2n\cpi<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.284 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \ph@@{z} = \theta + 2n\cpi<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.284 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \ph@@{z} = \theta + 2n\cpi<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.284 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \ph@@{z} = \theta + 2n\cpi<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.284 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\ph@@{z} = \theta + 2n\cpi<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.284 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \ph@@{z} = \theta + 2n\cpi<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.285 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.285 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.285 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.285 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.286 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.286 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.287 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.291 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.292 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.293 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.294 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      9.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.295 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">62 ms</div>
</em><em class="status">passed</em>[104] 104</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.297 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 104.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.297 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.298 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.298 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.300 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.300 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.334 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.334 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[z^{n}=\left(x^{n}-\genfrac{(}{)}{0.0pt}{}{n}{2}x^{n-2}y^{2}+\genfrac{(}{)}{0.0%<br/>pt}{}{n}{4}x^{n-4}y^{4}-\cdots\right)+i\left(\genfrac{(}{)}{0.0pt}{}{n}{1}x^{n%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">-1}y-\genfrac{(}{)}{0.0pt}{}{n}{3}x^{n-3}y^{3}+\cdots\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.334 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[z^{n}=\left(x^{n}-\genfrac{(}{)}{0.0pt}{}{n}{2}x^{n-2}y^{2}+\genfrac{(}{)}{0.0%<br/>pt}{}{n}{4}x^{n-4}y^{4}-\cdots\right)+i\left(\genfrac{(}{)}{0.0pt}{}{n}{1}x^{n%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">-1}y-\genfrac{(}{)}{0.0pt}{}{n}{3}x^{n-3}y^{3}+\cdots\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.334 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[z^{n}=\left(x^{n}-\genfrac{(}{)}{0.0pt}{}{n}{2}x^{n-2}y^{2}+\genfrac{(}{)}{0.0%<br/>pt}{}{n}{4}x^{n-4}y^{4}-\cdots\right)+i\left(\genfrac{(}{)}{0.0pt}{}{n}{1}x^{n%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">-1}y-\genfrac{(}{)}{0.0pt}{}{n}{3}x^{n-3}y^{3}+\cdots\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.334 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[z^{n}=\left(x^{n}-\genfrac{(}{)}{0.0pt}{}{n}{2}x^{n-2}y^{2}+\genfrac{(}{)}{0.0pt}{}{n}{4}x^{n-4}y^{4}-\cdots\right)+i\left(\genfrac{(}{)}{0.0pt}{}{n}{1}x^{n-1}y-\genfrac{(}{)}{0.0pt}{}{n}{3}x^{n-3}y^{3}+\cdots\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:z^{n}=\left(x^{n}-\genfrac{(}{)}{0.0pt}{}{n}{2}x^{n-2}y^{2}+\genfrac{(}{)}{0.0pt}{}{n}{4}x^{n-4}y^{4}-\cdots\right)+i\left(\genfrac{(}{)}{0.0pt}{}{n}{1}x^{n-1}y-\genfrac{(}{)}{0.0pt}{}{n}{3}x^{n-3}y^{3}+\cdots\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: z^{n}=\left(x^{n}-\genfrac{(}{)}{0.0pt}{}{n}{2}x^{n-2}y^{2}+\genfrac{(}{)}{0.0pt}{}{n}{4}x^{n-4}y^{4}-\cdots\right)+i\left(\genfrac{(}{)}{0.0pt}{}{n}{1}x^{n-1}y-\genfrac{(}{)}{0.0pt}{}{n}{3}x^{n-3}y^{3}+\cdots\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.336 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.336 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.337 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.337 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.337 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.338 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.339 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.339 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.339 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.339 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.339 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.340 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.340 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.358 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      79.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.358 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 47.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[105] 105</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 105.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\ln\left(1+z\right)=z-\frac{z^{2}}{2}+\frac{z^{3}}{3}-\cdots,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\ln\left(1+z\right)=z-\frac{z^{2}}{2}+\frac{z^{3}}{3}-\cdots,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\ln\left(1+z\right)=z-\frac{z^{2}}{2}+\frac{z^{3}}{3}-\cdots,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\ln\left(1+z\right)=z-\frac{z^{2}}{2}+\frac{z^{3}}{3}-\cdots,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\ln\left(1+z\right)=z-\frac{z^{2}}{2}+\frac{z^{3}}{3}-\cdots<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \ln\left(1+z\right)=z-\frac{z^{2}}{2}+\frac{z^{3}}{3}-\cdots<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.398 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.398 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.398 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.398 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      24.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 26.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">47 ms</div>
</em><em class="status">passed</em>[106] 106</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 106.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.402 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.403 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.403 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.438 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.438 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[P(z)=\prod^{\infty}_{n=1}\left(1-\frac{z}{z_{n}}\right)e^{z/z_{n}}\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[P(z)=\prod^{\infty}_{n=1}\left(1-\frac{z}{z_{n}}\right)e^{z/z_{n}}\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[P(z)=\prod^{\infty}_{n=1}\left(1-\frac{z}{z_{n}}\right)e^{z/z_{n}}\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[P(z)=\prod^{\infty}_{n=1}\left(1-\frac{z}{z_{n}}\right)e^{z/z_{n}}\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:P(z)=\prod^{\infty}_{n=1}\left(1-\frac{z}{z_{n}}\right)e^{z/z_{n}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: P(z)=\prod^{\infty}_{n=1}\left(1-\frac{z}{z_{n}}\right)e^{z/z_{n}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.440 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.440 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.440 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.441 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.441 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.441 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.441 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.442 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.442 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.443 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.443 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.443 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.443 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.444 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      25.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 15.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">38 ms</div>
</em><em class="status">passed</em>[107] 107</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.449 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 107.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.449 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.449 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.481 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.482 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.482 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.482 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.482 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.482 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: <br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.484 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.484 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.484 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.484 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.485 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.485 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.485 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.485 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.485 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.485 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.485 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.486 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.486 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      40.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.486 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 42.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">57 ms</div>
</em><em class="status">passed</em>[108] 108</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.487 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 108.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.487 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.487 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.488 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.488 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.489 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.523 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.524 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[A_{n}B_{n-1}-B_{n}A_{n-1}=(-1)^{n-1}\prod^{n}_{k=1}a_{k},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.524 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[A_{n}B_{n-1}-B_{n}A_{n-1}=(-1)^{n-1}\prod^{n}_{k=1}a_{k},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.524 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[A_{n}B_{n-1}-B_{n}A_{n-1}=(-1)^{n-1}\prod^{n}_{k=1}a_{k},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.525 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[A_{n}B_{n-1}-B_{n}A_{n-1}=(-1)^{n-1}\prod^{n}_{k=1}a_{k},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.525 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:A_{n}B_{n-1}-B_{n}A_{n-1}=(-1)^{n-1}\prod^{n}_{k=1}a_{k}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.525 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: A_{n}B_{n-1}-B_{n}A_{n-1}=(-1)^{n-1}\prod^{n}_{k=1}a_{k}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.525 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.526 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.526 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.527 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.528 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.530 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.531 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.531 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.532 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.533 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.533 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.534 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.534 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.534 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.534 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.535 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      33.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 23.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">54 ms</div>
</em><em class="status">passed</em>[109] 109</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 109.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[Aw_{1}(z)+Bw_{2}(z)=0,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[Aw_{1}(z)+Bw_{2}(z)=0,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[Aw_{1}(z)+Bw_{2}(z)=0,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[Aw_{1}(z)+Bw_{2}(z)=0,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:Aw_{1}(z)+Bw_{2}(z)=0<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: Aw_{1}(z)+Bw_{2}(z)=0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.596 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.596 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.596 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.598 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.598 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.598 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.598 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.598 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.598 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.599 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.600 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      11.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.600 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 17.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[110] 110</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.601 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 110.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.601 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.602 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.602 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.603 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.604 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.639 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.639 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[f(x)=\sum^{\infty}_{k=0}a_{k}x^{k},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.639 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[f(x)=\sum^{\infty}_{k=0}a_{k}x^{k},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.640 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[f(x)=\sum^{\infty}_{k=0}a_{k}x^{k},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.640 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[f(x)=\sum^{\infty}_{k=0}a_{k}x^{k},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.640 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:f(x)=\sum^{\infty}_{k=0}a_{k}x^{k}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.640 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: f(x)=\sum^{\infty}_{k=0}a_{k}x^{k}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.640 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.640 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.640 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.641 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.641 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.642 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.642 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.642 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.642 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.643 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.643 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.643 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.643 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.644 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.644 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.644 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.645 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      17.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.645 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 12.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">59 ms</div>
</em><em class="status">passed</em>[111] 111</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.646 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 111.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.646 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.646 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.646 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.647 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.648 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.689 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.690 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[I(x)=-\sum_{s=0}^{2n}(a_{s}\ln x+b_{s})x^{-s}+O\left(x^{-2n-1+\epsilon}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.691 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[I(x)=-\sum_{s=0}^{2n}(a_{s}\ln x+b_{s})x^{-s}+O\left(x^{-2n-1+\epsilon}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.692 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[I(x)=-\sum_{s=0}^{2n}(a_{s}\ln x+b_{s})x^{-s}+O\left(x^{-2n-1+\epsilon}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.692 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[I(x)=-\sum_{s=0}^{2n}(a_{s}\ln x+b_{s})x^{-s}+O\left(x^{-2n-1+\epsilon}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.692 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:I(x)=-\sum_{s=0}^{2n}(a_{s}\ln x+b_{s})x^{-s}+O\left(x^{-2n-1+\epsilon}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.693 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: I(x)=-\sum_{s=0}^{2n}(a_{s}\ln x+b_{s})x^{-s}+O\left(x^{-2n-1+\epsilon}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.693 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.693 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.693 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.693 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.694 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.694 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.695 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.695 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.695 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.696 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.696 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.696 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.696 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.696 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.697 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.697 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.704 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      43.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 34.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[112] 112</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 112.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.708 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.708 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.708 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.709 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.736 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.737 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[h(t)\sim\exp\left(i\kappa t^{p}\right)\sum_{s=0}^{\infty}b_{s}t^{-\beta_{s}},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.737 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[h(t)\sim\exp\left(i\kappa t^{p}\right)\sum_{s=0}^{\infty}b_{s}t^{-\beta_{s}},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.737 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[h(t)\sim\exp\left(i\kappa t^{p}\right)\sum_{s=0}^{\infty}b_{s}t^{-\beta_{s}},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.737 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[h(t)\sim\exp\left(i\kappa t^{p}\right)\sum_{s=0}^{\infty}b_{s}t^{-\beta_{s}},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.738 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:h(t)\sim\exp\left(i\kappa t^{p}\right)\sum_{s=0}^{\infty}b_{s}t^{-\beta_{s}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.738 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: h(t)\sim\exp\left(i\kappa t^{p}\right)\sum_{s=0}^{\infty}b_{s}t^{-\beta_{s}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.738 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.738 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.738 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.739 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.742 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.742 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.742 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.742 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.745 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      26.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.745 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 28.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[113] 113</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.746 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 113.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.746 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.747 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.747 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.747 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.748 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[e^{\lambda_{j}z}z^{\mu_{j}}\sum_{s=0}^{\infty}\frac{a_{s,j}}{z^{s}},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[e^{\lambda_{j}z}z^{\mu_{j}}\sum_{s=0}^{\infty}\frac{a_{s,j}}{z^{s}},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[e^{\lambda_{j}z}z^{\mu_{j}}\sum_{s=0}^{\infty}\frac{a_{s,j}}{z^{s}},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[e^{\lambda_{j}z}z^{\mu_{j}}\sum_{s=0}^{\infty}\frac{a_{s,j}}{z^{s}},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:e^{\lambda_{j}z}z^{\mu_{j}}\sum_{s=0}^{\infty}\frac{a_{s,j}}{z^{s}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: e^{\lambda_{j}z}z^{\mu_{j}}\sum_{s=0}^{\infty}\frac{a_{s,j}}{z^{s}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.780 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.780 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.784 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      25.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.785 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 18.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">47 ms</div>
</em><em class="status">passed</em>[114] 114</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.786 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 114.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.786 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.786 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.786 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.787 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.787 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.819 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.819 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.819 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.820 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.820 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.820 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.820 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: <br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.823 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.826 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.827 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.827 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.827 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.830 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.830 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.830 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.830 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      27.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 30.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">65 ms</div>
</em><em class="status">passed</em>[115] 115</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.833 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 115.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.833 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.833 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.834 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.893 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.894 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: <br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.895 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.895 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.895 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.895 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.895 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.896 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.896 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.896 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.896 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.898 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      16.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.898 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 19.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">52 ms</div>
</em><em class="status">passed</em>[116] 116</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 116.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.900 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.900 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[B_{n}\left(mx\right)=m^{n-1}\sum_{k=0}^{m-1}B_{n}\left(x+\frac{k}{m}\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[B_{n}\left(mx\right)=m^{n-1}\sum_{k=0}^{m-1}B_{n}\left(x+\frac{k}{m}\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[B_{n}\left(mx\right)=m^{n-1}\sum_{k=0}^{m-1}B_{n}\left(x+\frac{k}{m}\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[B_{n}\left(mx\right)=m^{n-1}\sum_{k=0}^{m-1}B_{n}\left(x+\frac{k}{m}\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:B_{n}\left(mx\right)=m^{n-1}\sum_{k=0}^{m-1}B_{n}\left(x+\frac{k}{m}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: B_{n}\left(mx\right)=m^{n-1}\sum_{k=0}^{m-1}B_{n}\left(x+\frac{k}{m}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.937 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.939 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.939 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.940 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.941 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.942 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.945 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.946 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.946 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.946 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.947 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.947 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.950 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      28.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.950 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 23.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">46 ms</div>
</em><em class="status">passed</em>[117] 117</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.952 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 117.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.953 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.954 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.954 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.956 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.957 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.988 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.989 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\int E_{n}\left(t\right)\mathrm{d}t=\frac{E_{n+1}\left(t\right)}{n+1}+\text{%<br/>const.},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.989 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\int E_{n}\left(t\right)\mathrm{d}t=\frac{E_{n+1}\left(t\right)}{n+1}+\text{%<br/>const.},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.989 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\int E_{n}\left(t\right)\mathrm{d}t=\frac{E_{n+1}\left(t\right)}{n+1}+\text{%<br/>const.},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.990 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\int E_{n}\left(t\right)\mathrm{d}t=\frac{E_{n+1}\left(t\right)}{n+1}+\text{const.},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.990 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\int E_{n}\left(t\right)\mathrm{d}t=\frac{E_{n+1}\left(t\right)}{n+1}+\text{const.}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.990 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \int E_{n}\left(t\right)\mathrm{d}t=\frac{E_{n+1}\left(t\right)}{n+1}+\text{const.}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.990 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.990 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.991 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.992 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.993 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.993 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.993 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.996 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      23.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 20.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">81 ms</div>
</em><em class="status">passed</em>[118] 118</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 118.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:30.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.000 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.001 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.030 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[{M_{\nu}^{2}}\left(x\right)\sim\frac{2}{\pi x}\left(1+\frac{1}{2}\frac{\mu-1}{%<br/>(2x)^{2}}+\frac{1\cdot 3}{2\cdot 4}\frac{(\mu-1)(\mu-9)}{(2x)^{4}}+\frac{1%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\cdot 3\cdot 5}{2\cdot 4\cdot 6}\frac{(\mu-1)(\mu-9)(\mu-25)}{(2x)^{6}}+\cdots%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[{M_{\nu}^{2}}\left(x\right)\sim\frac{2}{\pi x}\left(1+\frac{1}{2}\frac{\mu-1}{%<br/>(2x)^{2}}+\frac{1\cdot 3}{2\cdot 4}\frac{(\mu-1)(\mu-9)}{(2x)^{4}}+\frac{1%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\cdot 3\cdot 5}{2\cdot 4\cdot 6}\frac{(\mu-1)(\mu-9)(\mu-25)}{(2x)^{6}}+\cdots%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[{M_{\nu}^{2}}\left(x\right)\sim\frac{2}{\pi x}\left(1+\frac{1}{2}\frac{\mu-1}{%<br/>(2x)^{2}}+\frac{1\cdot 3}{2\cdot 4}\frac{(\mu-1)(\mu-9)}{(2x)^{4}}+\frac{1%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\cdot 3\cdot 5}{2\cdot 4\cdot 6}\frac{(\mu-1)(\mu-9)(\mu-25)}{(2x)^{6}}+\cdots%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[{M_{\nu}^{2}}\left(x\right)\sim\frac{2}{\pi x}\left(1+\frac{1}{2}\frac{\mu-1}{(2x)^{2}}+\frac{1\cdot 3}{2\cdot 4}\frac{(\mu-1)(\mu-9)}{(2x)^{4}}+\frac{1\cdot 3\cdot 5}{2\cdot 4\cdot 6}\frac{(\mu-1)(\mu-9)(\mu-25)}{(2x)^{6}}+\cdots\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:{M_{\nu}^{2}}\left(x\right)\sim\frac{2}{\pi x}\left(1+\frac{1}{2}\frac{\mu-1}{(2x)^{2}}+\frac{1\cdot 3}{2\cdot 4}\frac{(\mu-1)(\mu-9)}{(2x)^{4}}+\frac{1\cdot 3\cdot 5}{2\cdot 4\cdot 6}\frac{(\mu-1)(\mu-9)(\mu-25)}{(2x)^{6}}+\cdots\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: {M_{\nu}^{2}}\left(x\right)\sim\frac{2}{\pi x}\left(1+\frac{1}{2}\frac{\mu-1}{(2x)^{2}}+\frac{1\cdot 3}{2\cdot 4}\frac{(\mu-1)(\mu-9)}{(2x)^{4}}+\frac{1\cdot 3\cdot 5}{2\cdot 4\cdot 6}\frac{(\mu-1)(\mu-9)(\mu-25)}{(2x)^{6}}+\cdots\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.037 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.037 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.037 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.038 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.078 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      76.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.078 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 56.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">72 ms</div>
</em><em class="status">passed</em>[119] 119</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.080 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 119.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.080 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.080 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.080 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.081 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.081 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.130 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.131 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[{N_{\nu}^{2}}\left(x\right)\sim\frac{2}{\pi x}\left(1-\frac{1}{2}\frac{\mu-3}{%<br/>(2x)^{2}}-\frac{1}{2\cdot 4}\frac{(\mu-1)(\mu-45)}{(2x)^{4}}-\cdots\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.131 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[{N_{\nu}^{2}}\left(x\right)\sim\frac{2}{\pi x}\left(1-\frac{1}{2}\frac{\mu-3}{%<br/>(2x)^{2}}-\frac{1}{2\cdot 4}\frac{(\mu-1)(\mu-45)}{(2x)^{4}}-\cdots\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.131 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[{N_{\nu}^{2}}\left(x\right)\sim\frac{2}{\pi x}\left(1-\frac{1}{2}\frac{\mu-3}{%<br/>(2x)^{2}}-\frac{1}{2\cdot 4}\frac{(\mu-1)(\mu-45)}{(2x)^{4}}-\cdots\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.132 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[{N_{\nu}^{2}}\left(x\right)\sim\frac{2}{\pi x}\left(1-\frac{1}{2}\frac{\mu-3}{(2x)^{2}}-\frac{1}{2\cdot 4}\frac{(\mu-1)(\mu-45)}{(2x)^{4}}-\cdots\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.132 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:{N_{\nu}^{2}}\left(x\right)\sim\frac{2}{\pi x}\left(1-\frac{1}{2}\frac{\mu-3}{(2x)^{2}}-\frac{1}{2\cdot 4}\frac{(\mu-1)(\mu-45)}{(2x)^{4}}-\cdots\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.132 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: {N_{\nu}^{2}}\left(x\right)\sim\frac{2}{\pi x}\left(1-\frac{1}{2}\frac{\mu-3}{(2x)^{2}}-\frac{1}{2\cdot 4}\frac{(\mu-1)(\mu-45)}{(2x)^{4}}-\cdots\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.133 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.133 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.133 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.134 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.135 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.135 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.136 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.136 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.137 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.138 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.138 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.138 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.139 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.139 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.139 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.139 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      47.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 38.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">70 ms</div>
</em><em class="status">passed</em>[120] 120</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 120.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.189 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.190 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[J_{\nu}&#39;\left(z\right)=\frac{(\tfrac{1}{2}z)^{\nu-1}}{2\Gamma\left(\nu\right)}%<br/>\prod_{k=1}^{\infty}\left(1-\frac{z^{2}}{{{j^{\prime}_{\nu,k}}^{\mspace{-16.0%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">mu }2}}}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.191 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[J_{\nu}&#39;\left(z\right)=\frac{(\tfrac{1}{2}z)^{\nu-1}}{2\Gamma\left(\nu\right)}%<br/>\prod_{k=1}^{\infty}\left(1-\frac{z^{2}}{{{j^{\prime}_{\nu,k}}^{\mspace{-16.0%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">mu }2}}}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[J_{\nu}&#39;\left(z\right)=\frac{(\tfrac{1}{2}z)^{\nu-1}}{2\Gamma\left(\nu\right)}%<br/>\prod_{k=1}^{\infty}\left(1-\frac{z^{2}}{{{j^{\prime}_{\nu,k}}^{\mspace{-16.0%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">mu }2}}}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[J_{\nu}&#39;\left(z\right)=\frac{(\tfrac{1}{2}z)^{\nu-1}}{2\Gamma\left(\nu\right)}\prod_{k=1}^{\infty}\left(1-\frac{z^{2}}{{{j^{\prime}_{\nu,k}}^{\mspace{-16.0mu }2}}}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.193 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:J_{\nu}&#39;\left(z\right)=\frac{(\tfrac{1}{2}z)^{\nu-1}}{2\Gamma\left(\nu\right)}\prod_{k=1}^{\infty}\left(1-\frac{z^{2}}{{{j^{\prime}_{\nu,k}}^{\mspace{-16.0mu }2}}}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.194 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: J_{\nu}&#39;\left(z\right)=\frac{(\tfrac{1}{2}z)^{\nu-1}}{2\Gamma\left(\nu\right)}\prod_{k=1}^{\infty}\left(1-\frac{z^{2}}{{{j^{\prime}_{\nu,k}}^{\mspace{-16.0mu }2}}}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.194 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.194 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.194 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.195 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.197 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.197 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.197 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.198 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.200 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.206 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.207 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.221 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      50.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.221 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 41.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[121] 121</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.225 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 121.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.225 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.225 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.226 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.227 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.227 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.261 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.261 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[J_{\nu}&#39;\left(j_{\nu,m}\right)\sim(-1)^{m}\frac{(2/\nu)^{\frac{2}{3}}}{\pi M%<br/>\left(a_{m}\right)}\sum_{k=0}^{\infty}\frac{\beta_{k}}{\nu^{2k/3}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.261 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[J_{\nu}&#39;\left(j_{\nu,m}\right)\sim(-1)^{m}\frac{(2/\nu)^{\frac{2}{3}}}{\pi M%<br/>\left(a_{m}\right)}\sum_{k=0}^{\infty}\frac{\beta_{k}}{\nu^{2k/3}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.262 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[J_{\nu}&#39;\left(j_{\nu,m}\right)\sim(-1)^{m}\frac{(2/\nu)^{\frac{2}{3}}}{\pi M%<br/>\left(a_{m}\right)}\sum_{k=0}^{\infty}\frac{\beta_{k}}{\nu^{2k/3}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.262 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[J_{\nu}&#39;\left(j_{\nu,m}\right)\sim(-1)^{m}\frac{(2/\nu)^{\frac{2}{3}}}{\pi M\left(a_{m}\right)}\sum_{k=0}^{\infty}\frac{\beta_{k}}{\nu^{2k/3}},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.262 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:J_{\nu}&#39;\left(j_{\nu,m}\right)\sim(-1)^{m}\frac{(2/\nu)^{\frac{2}{3}}}{\pi M\left(a_{m}\right)}\sum_{k=0}^{\infty}\frac{\beta_{k}}{\nu^{2k/3}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.262 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: J_{\nu}&#39;\left(j_{\nu,m}\right)\sim(-1)^{m}\frac{(2/\nu)^{\frac{2}{3}}}{\pi M\left(a_{m}\right)}\sum_{k=0}^{\infty}\frac{\beta_{k}}{\nu^{2k/3}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.262 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.262 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.263 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.263 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.264 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.264 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.264 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.265 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.265 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.266 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.266 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.266 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.266 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.267 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.267 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.267 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      46.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 40.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">53 ms</div>
</em><em class="status">passed</em>[122] 122</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 122.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.276 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.276 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.308 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.308 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[J_{\nu}\left(j_{\nu,m}&#39;\right)=\frac{h(\zeta)\mathrm{Ai}\left(a^{\prime}_{m}%<br/>\right)}{\nu^{\frac{1}{3}}}\left(1+O\left(\frac{1}{\nu^{\frac{4}{3}}}\right)%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.309 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[J_{\nu}\left(j_{\nu,m}&#39;\right)=\frac{h(\zeta)\mathrm{Ai}\left(a^{\prime}_{m}%<br/>\right)}{\nu^{\frac{1}{3}}}\left(1+O\left(\frac{1}{\nu^{\frac{4}{3}}}\right)%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.309 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[J_{\nu}\left(j_{\nu,m}&#39;\right)=\frac{h(\zeta)\mathrm{Ai}\left(a^{\prime}_{m}%<br/>\right)}{\nu^{\frac{1}{3}}}\left(1+O\left(\frac{1}{\nu^{\frac{4}{3}}}\right)%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.309 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[J_{\nu}\left(j_{\nu,m}&#39;\right)=\frac{h(\zeta)\mathrm{Ai}\left(a^{\prime}_{m}\right)}{\nu^{\frac{1}{3}}}\left(1+O\left(\frac{1}{\nu^{\frac{4}{3}}}\right)\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.309 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:J_{\nu}\left(j_{\nu,m}&#39;\right)=\frac{h(\zeta)\mathrm{Ai}\left(a^{\prime}_{m}\right)}{\nu^{\frac{1}{3}}}\left(1+O\left(\frac{1}{\nu^{\frac{4}{3}}}\right)\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.309 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: J_{\nu}\left(j_{\nu,m}&#39;\right)=\frac{h(\zeta)\mathrm{Ai}\left(a^{\prime}_{m}\right)}{\nu^{\frac{1}{3}}}\left(1+O\left(\frac{1}{\nu^{\frac{4}{3}}}\right)\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.309 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.310 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.310 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.310 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.311 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.312 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.312 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.313 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.313 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.314 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.314 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.314 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.314 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.315 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.315 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.315 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      38.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 28.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">47 ms</div>
</em><em class="status">passed</em>[123] 123</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 123.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.330 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.330 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.331 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.363 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.363 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[J_{\nu}&#39;\left(x\right)Y_{\nu}\left(\lambda x\right)-Y_{\nu}&#39;\left(x\right)J_{%<br/>\nu}\left(\lambda x\right)\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.363 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[J_{\nu}&#39;\left(x\right)Y_{\nu}\left(\lambda x\right)-Y_{\nu}&#39;\left(x\right)J_{%<br/>\nu}\left(\lambda x\right)\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[J_{\nu}&#39;\left(x\right)Y_{\nu}\left(\lambda x\right)-Y_{\nu}&#39;\left(x\right)J_{%<br/>\nu}\left(\lambda x\right)\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[J_{\nu}&#39;\left(x\right)Y_{\nu}\left(\lambda x\right)-Y_{\nu}&#39;\left(x\right)J_{\nu}\left(\lambda x\right)\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:J_{\nu}&#39;\left(x\right)Y_{\nu}\left(\lambda x\right)-Y_{\nu}&#39;\left(x\right)J_{\nu}\left(\lambda x\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: J_{\nu}&#39;\left(x\right)Y_{\nu}\left(\lambda x\right)-Y_{\nu}&#39;\left(x\right)J_{\nu}\left(\lambda x\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.366 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.367 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.369 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.374 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      27.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.375 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 30.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">57 ms</div>
</em><em class="status">passed</em>[124] 124</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 124.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.405 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.405 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\int_{0}^{\infty}\frac{t^{\nu+1}J_{\nu}\left(at\right)}{(t^{2}+b^{2})^{\mu+1}}%<br/>\mathrm{d}t=\frac{a^{\mu}b^{\nu-\mu}}{2^{\mu}\Gamma\left(\mu+1\right)}K_{\nu-%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\mu}\left(ab\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.406 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\int_{0}^{\infty}\frac{t^{\nu+1}J_{\nu}\left(at\right)}{(t^{2}+b^{2})^{\mu+1}}%<br/>\mathrm{d}t=\frac{a^{\mu}b^{\nu-\mu}}{2^{\mu}\Gamma\left(\mu+1\right)}K_{\nu-%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\mu}\left(ab\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.406 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\int_{0}^{\infty}\frac{t^{\nu+1}J_{\nu}\left(at\right)}{(t^{2}+b^{2})^{\mu+1}}%<br/>\mathrm{d}t=\frac{a^{\mu}b^{\nu-\mu}}{2^{\mu}\Gamma\left(\mu+1\right)}K_{\nu-%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\mu}\left(ab\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.406 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\int_{0}^{\infty}\frac{t^{\nu+1}J_{\nu}\left(at\right)}{(t^{2}+b^{2})^{\mu+1}}\mathrm{d}t=\frac{a^{\mu}b^{\nu-\mu}}{2^{\mu}\Gamma\left(\mu+1\right)}K_{\nu-\mu}\left(ab\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.406 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\int_{0}^{\infty}\frac{t^{\nu+1}J_{\nu}\left(at\right)}{(t^{2}+b^{2})^{\mu+1}}\mathrm{d}t=\frac{a^{\mu}b^{\nu-\mu}}{2^{\mu}\Gamma\left(\mu+1\right)}K_{\nu-\mu}\left(ab\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.406 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \int_{0}^{\infty}\frac{t^{\nu+1}J_{\nu}\left(at\right)}{(t^{2}+b^{2})^{\mu+1}}\mathrm{d}t=\frac{a^{\mu}b^{\nu-\mu}}{2^{\mu}\Gamma\left(\mu+1\right)}K_{\nu-\mu}\left(ab\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.407 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.407 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.407 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.408 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.408 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.410 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.410 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.410 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.410 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.411 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.411 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.412 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.412 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.413 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.413 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.413 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.432 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      56.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 51.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">54 ms</div>
</em><em class="status">passed</em>[125] 125</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 125.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.435 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.435 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.436 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.437 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.437 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.475 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.476 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\mathscr{C}_{\nu}\left(u\pm v\right)=\sum_{k=-\infty}^{\infty}\mathscr{C}_{\nu%<br/>\mp k}\left(u\right)J_{k}\left(v\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.477 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\mathscr{C}_{\nu}\left(u\pm v\right)=\sum_{k=-\infty}^{\infty}\mathscr{C}_{\nu%<br/>\mp k}\left(u\right)J_{k}\left(v\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.477 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\mathscr{C}_{\nu}\left(u\pm v\right)=\sum_{k=-\infty}^{\infty}\mathscr{C}_{\nu%<br/>\mp k}\left(u\right)J_{k}\left(v\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.477 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\mathscr{C}_{\nu}\left(u\pm v\right)=\sum_{k=-\infty}^{\infty}\mathscr{C}_{\nu\mp k}\left(u\right)J_{k}\left(v\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.477 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\mathscr{C}_{\nu}\left(u\pm v\right)=\sum_{k=-\infty}^{\infty}\mathscr{C}_{\nu\mp k}\left(u\right)J_{k}\left(v\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.478 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \mathscr{C}_{\nu}\left(u\pm v\right)=\sum_{k=-\infty}^{\infty}\mathscr{C}_{\nu\mp k}\left(u\right)J_{k}\left(v\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.478 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.478 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.478 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.479 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.479 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.481 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.481 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.482 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.482 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.484 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.487 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      33.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.487 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 25.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">74 ms</div>
</em><em class="status">passed</em>[126] 126</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.490 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 126.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.491 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.492 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.492 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.493 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.494 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\widetilde{J}_{\nu}\left(x\right)=\left(\frac{2\tanh(\frac{1}{2}\pi\nu)}{\pi%<br/>\nu}\right)^{\frac{1}{2}}\cos\left(\nu\ln(\tfrac{1}{2}x)-\gamma_{\nu}\right)+O%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">(x^{2}),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\widetilde{J}_{\nu}\left(x\right)=\left(\frac{2\tanh(\frac{1}{2}\pi\nu)}{\pi%<br/>\nu}\right)^{\frac{1}{2}}\cos\left(\nu\ln(\tfrac{1}{2}x)-\gamma_{\nu}\right)+O%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">(x^{2}),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\widetilde{J}_{\nu}\left(x\right)=\left(\frac{2\tanh(\frac{1}{2}\pi\nu)}{\pi%<br/>\nu}\right)^{\frac{1}{2}}\cos\left(\nu\ln(\tfrac{1}{2}x)-\gamma_{\nu}\right)+O%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">(x^{2}),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\widetilde{J}_{\nu}\left(x\right)=\left(\frac{2\tanh(\frac{1}{2}\pi\nu)}{\pi\nu}\right)^{\frac{1}{2}}\cos\left(\nu\ln(\tfrac{1}{2}x)-\gamma_{\nu}\right)+O(x^{2}),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\widetilde{J}_{\nu}\left(x\right)=\left(\frac{2\tanh(\frac{1}{2}\pi\nu)}{\pi\nu}\right)^{\frac{1}{2}}\cos\left(\nu\ln(\tfrac{1}{2}x)-\gamma_{\nu}\right)+O(x^{2})<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \widetilde{J}_{\nu}\left(x\right)=\left(\frac{2\tanh(\frac{1}{2}\pi\nu)}{\pi\nu}\right)^{\frac{1}{2}}\cos\left(\nu\ln(\tfrac{1}{2}x)-\gamma_{\nu}\right)+O(x^{2})<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.549 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.549 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.551 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.551 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.564 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      51.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.564 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 48.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[127] 127</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.565 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 127.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.566 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.566 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.566 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.567 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.567 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.602 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.602 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[K_{\nu}\left(z\right)\sim\left(\frac{\pi}{2z}\right)^{\frac{1}{2}}e^{-z}\sum_{%<br/>k=0}^{\infty}\frac{a_{k}(\nu)}{z^{k}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.602 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[K_{\nu}\left(z\right)\sim\left(\frac{\pi}{2z}\right)^{\frac{1}{2}}e^{-z}\sum_{%<br/>k=0}^{\infty}\frac{a_{k}(\nu)}{z^{k}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.602 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[K_{\nu}\left(z\right)\sim\left(\frac{\pi}{2z}\right)^{\frac{1}{2}}e^{-z}\sum_{%<br/>k=0}^{\infty}\frac{a_{k}(\nu)}{z^{k}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.603 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[K_{\nu}\left(z\right)\sim\left(\frac{\pi}{2z}\right)^{\frac{1}{2}}e^{-z}\sum_{k=0}^{\infty}\frac{a_{k}(\nu)}{z^{k}},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.603 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:K_{\nu}\left(z\right)\sim\left(\frac{\pi}{2z}\right)^{\frac{1}{2}}e^{-z}\sum_{k=0}^{\infty}\frac{a_{k}(\nu)}{z^{k}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.603 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: K_{\nu}\left(z\right)\sim\left(\frac{\pi}{2z}\right)^{\frac{1}{2}}e^{-z}\sum_{k=0}^{\infty}\frac{a_{k}(\nu)}{z^{k}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.603 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.603 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.604 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.604 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.605 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.607 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.608 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.608 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.608 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.609 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.609 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.609 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.609 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.609 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.610 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.610 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.614 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      33.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.614 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 30.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[128] 128</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.615 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 128.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.615 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.615 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.615 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.616 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.616 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.647 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.648 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[N_{\nu}\left(x\right)e^{i\!\phi_{\nu}\left(x\right)}=\operatorname{ker}_{\nu}x%<br/>+i\operatorname{kei}_{\nu}x,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.649 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[N_{\nu}\left(x\right)e^{i\!\phi_{\nu}\left(x\right)}=\operatorname{ker}_{\nu}x%<br/>+i\operatorname{kei}_{\nu}x,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.649 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[N_{\nu}\left(x\right)e^{i\!\phi_{\nu}\left(x\right)}=\operatorname{ker}_{\nu}x%<br/>+i\operatorname{kei}_{\nu}x,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.649 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[N_{\nu}\left(x\right)e^{i\!\phi_{\nu}\left(x\right)}=\operatorname{ker}_{\nu}x+i\operatorname{kei}_{\nu}x,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.649 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:N_{\nu}\left(x\right)e^{i\!\phi_{\nu}\left(x\right)}=\operatorname{ker}_{\nu}x+i\operatorname{kei}_{\nu}x<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.649 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: N_{\nu}\left(x\right)e^{i\!\phi_{\nu}\left(x\right)}=\operatorname{ker}_{\nu}x+i\operatorname{kei}_{\nu}x<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.649 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.649 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.650 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.650 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.651 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.652 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.652 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.652 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.653 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.654 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.654 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.655 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.655 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.655 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.656 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.657 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.662 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      30.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 26.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">74 ms</div>
</em><em class="status">passed</em>[129] 129</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 129.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.715 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[a=-n-\frac{2}{\pi}\sqrt{zn}-\frac{2z}{\pi^{2}}+\tfrac{1}{2}b+\tfrac{1}{4}+%<br/>\frac{z^{2}\left(\frac{1}{3}-4\pi^{-2}\right)+z-(b-1)^{2}+\frac{1}{4}}{4\pi%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\sqrt{zn}}+O\left(\frac{1}{n}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[a=-n-\frac{2}{\pi}\sqrt{zn}-\frac{2z}{\pi^{2}}+\tfrac{1}{2}b+\tfrac{1}{4}+%<br/>\frac{z^{2}\left(\frac{1}{3}-4\pi^{-2}\right)+z-(b-1)^{2}+\frac{1}{4}}{4\pi%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\sqrt{zn}}+O\left(\frac{1}{n}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[a=-n-\frac{2}{\pi}\sqrt{zn}-\frac{2z}{\pi^{2}}+\tfrac{1}{2}b+\tfrac{1}{4}+%<br/>\frac{z^{2}\left(\frac{1}{3}-4\pi^{-2}\right)+z-(b-1)^{2}+\frac{1}{4}}{4\pi%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\sqrt{zn}}+O\left(\frac{1}{n}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[a=-n-\frac{2}{\pi}\sqrt{zn}-\frac{2z}{\pi^{2}}+\tfrac{1}{2}b+\tfrac{1}{4}+\frac{z^{2}\left(\frac{1}{3}-4\pi^{-2}\right)+z-(b-1)^{2}+\frac{1}{4}}{4\pi\sqrt{zn}}+O\left(\frac{1}{n}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:a=-n-\frac{2}{\pi}\sqrt{zn}-\frac{2z}{\pi^{2}}+\tfrac{1}{2}b+\tfrac{1}{4}+\frac{z^{2}\left(\frac{1}{3}-4\pi^{-2}\right)+z-(b-1)^{2}+\frac{1}{4}}{4\pi\sqrt{zn}}+O\left(\frac{1}{n}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: a=-n-\frac{2}{\pi}\sqrt{zn}-\frac{2z}{\pi^{2}}+\tfrac{1}{2}b+\tfrac{1}{4}+\frac{z^{2}\left(\frac{1}{3}-4\pi^{-2}\right)+z-(b-1)^{2}+\frac{1}{4}}{4\pi\sqrt{zn}}+O\left(\frac{1}{n}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.718 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.718 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.719 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.719 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.720 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.720 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.724 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.724 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.740 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      70.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.740 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 44.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">64 ms</div>
</em><em class="status">passed</em>[130] 130</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 130.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.742 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.742 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.774 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.775 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\left(z\frac{\mathrm{d}}{\mathrm{d}z}z\right)^{n}\left(e^{-\frac{1}{2}z}z^{%<br/>\kappa-1}M_{\kappa,\mu}\left(z\right)\right)={\left(\tfrac{1}{2}+\mu+\kappa%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)_{n}}e^{-\frac{1}{2}z}z^{\kappa+n-1}\*M_{\kappa+n,\mu}\left(z\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.775 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\left(z\frac{\mathrm{d}}{\mathrm{d}z}z\right)^{n}\left(e^{-\frac{1}{2}z}z^{%<br/>\kappa-1}M_{\kappa,\mu}\left(z\right)\right)={\left(\tfrac{1}{2}+\mu+\kappa%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)_{n}}e^{-\frac{1}{2}z}z^{\kappa+n-1}\*M_{\kappa+n,\mu}\left(z\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.775 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\left(z\frac{\mathrm{d}}{\mathrm{d}z}z\right)^{n}\left(e^{-\frac{1}{2}z}z^{%<br/>\kappa-1}M_{\kappa,\mu}\left(z\right)\right)={\left(\tfrac{1}{2}+\mu+\kappa%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)_{n}}e^{-\frac{1}{2}z}z^{\kappa+n-1}\*M_{\kappa+n,\mu}\left(z\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.775 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\left(z\frac{\mathrm{d}}{\mathrm{d}z}z\right)^{n}\left(e^{-\frac{1}{2}z}z^{\kappa-1}M_{\kappa,\mu}\left(z\right)\right)={\left(\tfrac{1}{2}+\mu+\kappa\right)_{n}}e^{-\frac{1}{2}z}z^{\kappa+n-1}\*M_{\kappa+n,\mu}\left(z\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.775 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\left(z\frac{\mathrm{d}}{\mathrm{d}z}z\right)^{n}\left(e^{-\frac{1}{2}z}z^{\kappa-1}M_{\kappa,\mu}\left(z\right)\right)={\left(\tfrac{1}{2}+\mu+\kappa\right)_{n}}e^{-\frac{1}{2}z}z^{\kappa+n-1}\*M_{\kappa+n,\mu}\left(z\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \left(z\frac{\mathrm{d}}{\mathrm{d}z}z\right)^{n}\left(e^{-\frac{1}{2}z}z^{\kappa-1}M_{\kappa,\mu}\left(z\right)\right)={\left(\tfrac{1}{2}+\mu+\kappa\right)_{n}}e^{-\frac{1}{2}z}z^{\kappa+n-1}\*M_{\kappa+n,\mu}\left(z\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.777 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.780 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.780 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.780 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.780 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.780 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.804 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      64.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.805 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 40.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">59 ms</div>
</em><em class="status">passed</em>[131] 131</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.805 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 131.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.806 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.806 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.806 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.807 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.807 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\frac{1}{2\pi\mathrm{i}}\int_{-\infty}^{(0+)}e^{zt+\frac{1}{2}t^{-1}}t^{\kappa%<br/>}W_{\kappa,\mu}\left(t^{-1}\right)\mathrm{d}t=\frac{2z^{-\kappa-\frac{1}{2}}}{%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\Gamma\left(\frac{1}{2}+\mu-\kappa\right)\Gamma\left(\frac{1}{2}-\mu-\kappa%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)}K_{2\mu}\left(2\sqrt{z}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\frac{1}{2\pi\mathrm{i}}\int_{-\infty}^{(0+)}e^{zt+\frac{1}{2}t^{-1}}t^{\kappa%<br/>}W_{\kappa,\mu}\left(t^{-1}\right)\mathrm{d}t=\frac{2z^{-\kappa-\frac{1}{2}}}{%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\Gamma\left(\frac{1}{2}+\mu-\kappa\right)\Gamma\left(\frac{1}{2}-\mu-\kappa%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)}K_{2\mu}\left(2\sqrt{z}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\frac{1}{2\pi\mathrm{i}}\int_{-\infty}^{(0+)}e^{zt+\frac{1}{2}t^{-1}}t^{\kappa%<br/>}W_{\kappa,\mu}\left(t^{-1}\right)\mathrm{d}t=\frac{2z^{-\kappa-\frac{1}{2}}}{%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\Gamma\left(\frac{1}{2}+\mu-\kappa\right)\Gamma\left(\frac{1}{2}-\mu-\kappa%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)}K_{2\mu}\left(2\sqrt{z}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\frac{1}{2\pi\mathrm{i}}\int_{-\infty}^{(0+)}e^{zt+\frac{1}{2}t^{-1}}t^{\kappa}W_{\kappa,\mu}\left(t^{-1}\right)\mathrm{d}t=\frac{2z^{-\kappa-\frac{1}{2}}}{\Gamma\left(\frac{1}{2}+\mu-\kappa\right)\Gamma\left(\frac{1}{2}-\mu-\kappa\right)}K_{2\mu}\left(2\sqrt{z}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\frac{1}{2\pi\mathrm{i}}\int_{-\infty}^{(0+)}e^{zt+\frac{1}{2}t^{-1}}t^{\kappa}W_{\kappa,\mu}\left(t^{-1}\right)\mathrm{d}t=\frac{2z^{-\kappa-\frac{1}{2}}}{\Gamma\left(\frac{1}{2}+\mu-\kappa\right)\Gamma\left(\frac{1}{2}-\mu-\kappa\right)}K_{2\mu}\left(2\sqrt{z}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \frac{1}{2\pi\mathrm{i}}\int_{-\infty}^{(0+)}e^{zt+\frac{1}{2}t^{-1}}t^{\kappa}W_{\kappa,\mu}\left(t^{-1}\right)\mathrm{d}t=\frac{2z^{-\kappa-\frac{1}{2}}}{\Gamma\left(\frac{1}{2}+\mu-\kappa\right)\Gamma\left(\frac{1}{2}-\mu-\kappa\right)}K_{2\mu}\left(2\sqrt{z}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.837 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.839 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.840 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.840 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.841 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.841 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.842 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.842 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.843 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.843 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.843 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.843 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.843 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      82.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 59.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">45 ms</div>
</em><em class="status">passed</em>[132] 132</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 132.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.898 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.898 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[h\left(\epsilon,\ell;r\right)=\left(\frac{2}{\pi\tau}\frac{A(\epsilon,\ell)}{1%<br/>-e^{-2\pi/\tau}}\right)^{\ifrac{1}{2}}G_{\ell}\left(-1/\tau,\tau r\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.898 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[h\left(\epsilon,\ell;r\right)=\left(\frac{2}{\pi\tau}\frac{A(\epsilon,\ell)}{1%<br/>-e^{-2\pi/\tau}}\right)^{\ifrac{1}{2}}G_{\ell}\left(-1/\tau,\tau r\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.898 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[h\left(\epsilon,\ell;r\right)=\left(\frac{2}{\pi\tau}\frac{A(\epsilon,\ell)}{1%<br/>-e^{-2\pi/\tau}}\right)^{\ifrac{1}{2}}G_{\ell}\left(-1/\tau,\tau r\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.898 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[h\left(\epsilon,\ell;r\right)=\left(\frac{2}{\pi\tau}\frac{A(\epsilon,\ell)}{1-e^{-2\pi/\tau}}\right)^{\ifrac{1}{2}}G_{\ell}\left(-1/\tau,\tau r\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:h\left(\epsilon,\ell;r\right)=\left(\frac{2}{\pi\tau}\frac{A(\epsilon,\ell)}{1-e^{-2\pi/\tau}}\right)^{\ifrac{1}{2}}G_{\ell}\left(-1/\tau,\tau r\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: h\left(\epsilon,\ell;r\right)=\left(\frac{2}{\pi\tau}\frac{A(\epsilon,\ell)}{1-e^{-2\pi/\tau}}\right)^{\ifrac{1}{2}}G_{\ell}\left(-1/\tau,\tau r\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.900 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.900 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.900 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.901 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.901 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.902 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.902 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.902 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.902 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.903 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.903 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.903 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.910 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      50.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.910 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 35.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[133] 133</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.911 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 133.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.911 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.914 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.942 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.942 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[N(n,k)=\frac{1}{n}\genfrac{(}{)}{0.0pt}{}{n}{k}\genfrac{(}{)}{0.0pt}{}{n}{k-1}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.943 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[N(n,k)=\frac{1}{n}\genfrac{(}{)}{0.0pt}{}{n}{k}\genfrac{(}{)}{0.0pt}{}{n}{k-1}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.943 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[N(n,k)=\frac{1}{n}\genfrac{(}{)}{0.0pt}{}{n}{k}\genfrac{(}{)}{0.0pt}{}{n}{k-1}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.943 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[N(n,k)=\frac{1}{n}\genfrac{(}{)}{0.0pt}{}{n}{k}\genfrac{(}{)}{0.0pt}{}{n}{k-1}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.943 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:N(n,k)=\frac{1}{n}\genfrac{(}{)}{0.0pt}{}{n}{k}\genfrac{(}{)}{0.0pt}{}{n}{k-1}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.943 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: N(n,k)=\frac{1}{n}\genfrac{(}{)}{0.0pt}{}{n}{k}\genfrac{(}{)}{0.0pt}{}{n}{k-1}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.943 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.943 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.945 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.945 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.945 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.946 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.947 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.947 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.947 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.948 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.948 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.948 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.948 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.949 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      30.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.950 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 19.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">50 ms</div>
</em><em class="status">passed</em>[134] 134</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.950 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 134.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.951 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.951 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.951 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.952 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.952 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.985 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.985 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[A_{k}(n)=\sum_{\begin{subarray}{c}1&lt;h\leq k\\<br/>\left(h,k\right)=1\end{subarray}}{\mathrm{e}^{\pi\mathrm{i}f(h,k)-(2\pi\mathrm%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">{i}nh/k)}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.986 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:99<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Eval replacement of subarray: \[A_{k}(n)=\sum_{\begin{array}{c}1&lt;h\leq k\\<br/>\left(h,k\right)=1\end{array}}{\mathrm{e}^{\pi\mathrm{i}f(h,k)-(2\pi\mathrm%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">{i}nh/k)}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.986 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[A_{k}(n)=\sum_{\begin{array}{c}1&lt;h\leq k\\<br/>\left(h,k\right)=1\end{array}}{\mathrm{e}^{\pi\mathrm{i}f(h,k)-(2\pi\mathrm%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">{i}nh/k)}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.986 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[A_{k}(n)=\sum_{\begin{array}{c}1&lt;h\leq k\\<br/>\left(h,k\right)=1\end{array}}{\mathrm{e}^{\pi\mathrm{i}f(h,k)-(2\pi\mathrm%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">{i}nh/k)}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.987 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[A_{k}(n)=\sum_{\begin{array}{c}1&lt;h\leq k\\<br/>\left(h,k\right)=1\end{array}}{\mathrm{e}^{\pi\mathrm{i}f(h,k)-(2\pi\mathrm{i}nh/k)}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.987 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:A_{k}(n)=\sum_{\begin{array}{c}1&lt;h\leq k\\<br/>\left(h,k\right)=1\end{array}}{\mathrm{e}^{\pi\mathrm{i}f(h,k)-(2\pi\mathrm{i}nh/k)}}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.987 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: A_{k}(n)=\sum_{\begin{array}{c}1&lt;h\leq k\\<br/>\left(h,k\right)=1\end{array}}{\mathrm{e}^{\pi\mathrm{i}f(h,k)-(2\pi\mathrm{i}nh/k)}}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.987 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.987 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.987 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.989 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.991 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.992 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.992 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.992 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.992 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.993 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.993 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:31.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      46.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.000 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 39.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">64 ms</div>
</em><em class="status">passed</em>[135] 135</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.001 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 135.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.001 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.002 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.002 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.004 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.004 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.046 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.047 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[S\left(n,m\right)=\frac{1}{m!}\sum_{k=0}^{n-1}\genfrac{&lt;}{&gt;}{0.0pt}{}{n}{k}%<br/>\genfrac{(}{)}{0.0pt}{}{k}{n-m},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.048 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[S\left(n,m\right)=\frac{1}{m!}\sum_{k=0}^{n-1}\genfrac{&lt;}{&gt;}{0.0pt}{}{n}{k}%<br/>\genfrac{(}{)}{0.0pt}{}{k}{n-m},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.048 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[S\left(n,m\right)=\frac{1}{m!}\sum_{k=0}^{n-1}\genfrac{&lt;}{&gt;}{0.0pt}{}{n}{k}%<br/>\genfrac{(}{)}{0.0pt}{}{k}{n-m},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.048 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[S\left(n,m\right)=\frac{1}{m!}\sum_{k=0}^{n-1}\genfrac{&lt;}{&gt;}{0.0pt}{}{n}{k}\genfrac{(}{)}{0.0pt}{}{k}{n-m},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.049 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:S\left(n,m\right)=\frac{1}{m!}\sum_{k=0}^{n-1}\genfrac{&lt;}{&gt;}{0.0pt}{}{n}{k}\genfrac{(}{)}{0.0pt}{}{k}{n-m}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.049 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: S\left(n,m\right)=\frac{1}{m!}\sum_{k=0}^{n-1}\genfrac{&lt;}{&gt;}{0.0pt}{}{n}{k}\genfrac{(}{)}{0.0pt}{}{k}{n-m}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.049 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.049 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.049 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.050 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.050 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.051 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.051 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.051 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.052 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.053 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.054 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.055 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.055 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.056 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.056 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.056 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.064 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      40.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.065 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 28.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">47 ms</div>
</em><em class="status">passed</em>[136] 136</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.067 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 136.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.067 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.067 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.067 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.068 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.069 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.105 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.106 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\frac{{\mathrm{d}}^{2}w}{{\mathrm{d}z}^{2}}=aw,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.106 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\frac{{\mathrm{d}}^{2}w}{{\mathrm{d}z}^{2}}=aw,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.106 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\frac{{\mathrm{d}}^{2}w}{{\mathrm{d}z}^{2}}=aw,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\frac{{\mathrm{d}}^{2}w}{{\mathrm{d}z}^{2}}=aw,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\frac{{\mathrm{d}}^{2}w}{{\mathrm{d}z}^{2}}=aw<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \frac{{\mathrm{d}}^{2}w}{{\mathrm{d}z}^{2}}=aw<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.109 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      10.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 9.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">51 ms</div>
</em><em class="status">passed</em>[137] 137</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 137.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.115 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.157 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[2\sin u\sin v=\cos\left(u-v\right)-\cos\left(u+v\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[2\sin u\sin v=\cos\left(u-v\right)-\cos\left(u+v\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[2\sin u\sin v=\cos\left(u-v\right)-\cos\left(u+v\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[2\sin u\sin v=\cos\left(u-v\right)-\cos\left(u+v\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:2\sin u\sin v=\cos\left(u-v\right)-\cos\left(u+v\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: 2\sin u\sin v=\cos\left(u-v\right)-\cos\left(u+v\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.159 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.159 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.159 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.163 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      21.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.163 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 20.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[138] 138</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 138.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.166 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.204 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[{\cos^{2}}u-{\cos^{2}}v=-\sin\left(u+v\right)\sin\left(u-v\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.204 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[{\cos^{2}}u-{\cos^{2}}v=-\sin\left(u+v\right)\sin\left(u-v\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.204 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[{\cos^{2}}u-{\cos^{2}}v=-\sin\left(u+v\right)\sin\left(u-v\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.204 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[{\cos^{2}}u-{\cos^{2}}v=-\sin\left(u+v\right)\sin\left(u-v\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.205 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:{\cos^{2}}u-{\cos^{2}}v=-\sin\left(u+v\right)\sin\left(u-v\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.205 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: {\cos^{2}}u-{\cos^{2}}v=-\sin\left(u+v\right)\sin\left(u-v\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.205 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.205 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.205 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.206 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.207 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.207 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.211 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      29.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.213 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 21.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">55 ms</div>
</em><em class="status">passed</em>[139] 139</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.213 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 139.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.214 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.214 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.214 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[{\operatorname{gd}^{-1}}\left(x\right)=\ln\tan\left(\tfrac{1}{2}x+\tfrac{1}{4}%<br/>\pi\right)=\ln\left(\sec x+\tan x\right)=\operatorname{arcsinh}\left(\tan x%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)=\operatorname{arccsch}\left(\cot x\right)=\operatorname{arccosh}\left(%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\sec x\right)=\operatorname{arcsech}\left(\cos x\right)=\operatorname{arctanh}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\left(\sin x\right)=\operatorname{arccoth}\left(\csc x\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[{\operatorname{gd}^{-1}}\left(x\right)=\ln\tan\left(\tfrac{1}{2}x+\tfrac{1}{4}%<br/>\pi\right)=\ln\left(\sec x+\tan x\right)=\operatorname{arcsinh}\left(\tan x%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)=\operatorname{arccsch}\left(\cot x\right)=\operatorname{arccosh}\left(%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\sec x\right)=\operatorname{arcsech}\left(\cos x\right)=\operatorname{arctanh}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\left(\sin x\right)=\operatorname{arccoth}\left(\csc x\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[{\operatorname{gd}^{-1}}\left(x\right)=\ln\tan\left(\tfrac{1}{2}x+\tfrac{1}{4}%<br/>\pi\right)=\ln\left(\sec x+\tan x\right)=\operatorname{arcsinh}\left(\tan x%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)=\operatorname{arccsch}\left(\cot x\right)=\operatorname{arccosh}\left(%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\sec x\right)=\operatorname{arcsech}\left(\cos x\right)=\operatorname{arctanh}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\left(\sin x\right)=\operatorname{arccoth}\left(\csc x\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[{\operatorname{gd}^{-1}}\left(x\right)=\ln\tan\left(\tfrac{1}{2}x+\tfrac{1}{4}\pi\right)=\ln\left(\sec x+\tan x\right)=\operatorname{arcsinh}\left(\tan x\right)=\operatorname{arccsch}\left(\cot x\right)=\operatorname{arccosh}\left(\sec x\right)=\operatorname{arcsech}\left(\cos x\right)=\operatorname{arctanh}\left(\sin x\right)=\operatorname{arccoth}\left(\csc x\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:{\operatorname{gd}^{-1}}\left(x\right)=\ln\tan\left(\tfrac{1}{2}x+\tfrac{1}{4}\pi\right)=\ln\left(\sec x+\tan x\right)=\operatorname{arcsinh}\left(\tan x\right)=\operatorname{arccsch}\left(\cot x\right)=\operatorname{arccosh}\left(\sec x\right)=\operatorname{arcsech}\left(\cos x\right)=\operatorname{arctanh}\left(\sin x\right)=\operatorname{arccoth}\left(\csc x\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: {\operatorname{gd}^{-1}}\left(x\right)=\ln\tan\left(\tfrac{1}{2}x+\tfrac{1}{4}\pi\right)=\ln\left(\sec x+\tan x\right)=\operatorname{arcsinh}\left(\tan x\right)=\operatorname{arccsch}\left(\cot x\right)=\operatorname{arccosh}\left(\sec x\right)=\operatorname{arcsech}\left(\cos x\right)=\operatorname{arctanh}\left(\sin x\right)=\operatorname{arccoth}\left(\csc x\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.251 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.251 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.267 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      88.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.267 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 54.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">43 ms</div>
</em><em class="status">passed</em>[140] 140</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.268 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 140.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.268 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.268 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.269 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.269 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.269 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.302 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.302 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[w=\operatorname{Arcsinh}z=(-1)^{k}\operatorname{arcsinh}z+k\pi i,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.303 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[w=\operatorname{Arcsinh}z=(-1)^{k}\operatorname{arcsinh}z+k\pi i,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.303 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[w=\operatorname{Arcsinh}z=(-1)^{k}\operatorname{arcsinh}z+k\pi i,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.303 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[w=\operatorname{Arcsinh}z=(-1)^{k}\operatorname{arcsinh}z+k\pi i,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.303 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:w=\operatorname{Arcsinh}z=(-1)^{k}\operatorname{arcsinh}z+k\pi i<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.303 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: w=\operatorname{Arcsinh}z=(-1)^{k}\operatorname{arcsinh}z+k\pi i<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.303 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.303 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.304 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.304 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.304 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.305 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.305 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.306 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.306 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.307 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.308 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.308 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.308 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.308 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.308 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.309 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.310 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      19.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.310 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 15.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">48 ms</div>
</em><em class="status">passed</em>[141] 141</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.313 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 141.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.313 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.313 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.314 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.314 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.315 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.344 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.344 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\operatorname{arcsinh}z=\ln\left(2z\right)+\frac{1}{2}\frac{1}{2z^{2}}-\frac{1%<br/>\cdot 3}{2\cdot 4}\frac{1}{4z^{4}}+\frac{1\cdot 3\cdot 5}{2\cdot 4\cdot 6}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\frac{1}{6z^{6}}-\cdots,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.344 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\operatorname{arcsinh}z=\ln\left(2z\right)+\frac{1}{2}\frac{1}{2z^{2}}-\frac{1%<br/>\cdot 3}{2\cdot 4}\frac{1}{4z^{4}}+\frac{1\cdot 3\cdot 5}{2\cdot 4\cdot 6}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\frac{1}{6z^{6}}-\cdots,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.346 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\operatorname{arcsinh}z=\ln\left(2z\right)+\frac{1}{2}\frac{1}{2z^{2}}-\frac{1%<br/>\cdot 3}{2\cdot 4}\frac{1}{4z^{4}}+\frac{1\cdot 3\cdot 5}{2\cdot 4\cdot 6}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\frac{1}{6z^{6}}-\cdots,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.346 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\operatorname{arcsinh}z=\ln\left(2z\right)+\frac{1}{2}\frac{1}{2z^{2}}-\frac{1\cdot 3}{2\cdot 4}\frac{1}{4z^{4}}+\frac{1\cdot 3\cdot 5}{2\cdot 4\cdot 6}\frac{1}{6z^{6}}-\cdots,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.347 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\operatorname{arcsinh}z=\ln\left(2z\right)+\frac{1}{2}\frac{1}{2z^{2}}-\frac{1\cdot 3}{2\cdot 4}\frac{1}{4z^{4}}+\frac{1\cdot 3\cdot 5}{2\cdot 4\cdot 6}\frac{1}{6z^{6}}-\cdots<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.347 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \operatorname{arcsinh}z=\ln\left(2z\right)+\frac{1}{2}\frac{1}{2z^{2}}-\frac{1\cdot 3}{2\cdot 4}\frac{1}{4z^{4}}+\frac{1\cdot 3\cdot 5}{2\cdot 4\cdot 6}\frac{1}{6z^{6}}-\cdots<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.348 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.348 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.348 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.348 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.349 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.349 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.349 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.350 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.350 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.351 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.351 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.351 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.351 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.351 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.352 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.352 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      44.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 26.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">37 ms</div>
</em><em class="status">passed</em>[142] 142</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 142.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.362 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.362 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.362 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.392 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\ln x=2^{m}\ln\left(1+y\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\ln x=2^{m}\ln\left(1+y\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\ln x=2^{m}\ln\left(1+y\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\ln x=2^{m}\ln\left(1+y\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\ln x=2^{m}\ln\left(1+y\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \ln x=2^{m}\ln\left(1+y\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      12.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 10.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">56 ms</div>
</em><em class="status">passed</em>[143] 143</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.399 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 143.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.399 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.399 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.443 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.444 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.445 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.445 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.445 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.446 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.446 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: <br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.446 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.446 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.448 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.448 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.448 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.449 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.449 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.449 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.452 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.453 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      46.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.454 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 71.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">52 ms</div>
</em><em class="status">passed</em>[144] 144</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.456 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 144.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.457 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.458 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.459 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.461 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.461 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\partial_{j}R_{-a}\left(\mathbf{b};\mathbf{z}\right)=-aw_{j}R_{-a-1}\left(%<br/>\mathbf{b}+\mathbf{e}_{j};\mathbf{z}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\partial_{j}R_{-a}\left(\mathbf{b};\mathbf{z}\right)=-aw_{j}R_{-a-1}\left(%<br/>\mathbf{b}+\mathbf{e}_{j};\mathbf{z}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\partial_{j}R_{-a}\left(\mathbf{b};\mathbf{z}\right)=-aw_{j}R_{-a-1}\left(%<br/>\mathbf{b}+\mathbf{e}_{j};\mathbf{z}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\partial_{j}R_{-a}\left(\mathbf{b};\mathbf{z}\right)=-aw_{j}R_{-a-1}\left(\mathbf{b}+\mathbf{e}_{j};\mathbf{z}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\partial_{j}R_{-a}\left(\mathbf{b};\mathbf{z}\right)=-aw_{j}R_{-a-1}\left(\mathbf{b}+\mathbf{e}_{j};\mathbf{z}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \partial_{j}R_{-a}\left(\mathbf{b};\mathbf{z}\right)=-aw_{j}R_{-a-1}\left(\mathbf{b}+\mathbf{e}_{j};\mathbf{z}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.502 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.502 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.504 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.504 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      33.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 27.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">42 ms</div>
</em><em class="status">passed</em>[145] 145</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 145.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[R_{J}\left(0,y,z,\pm\sqrt{yz}\right)=\pm\frac{3}{2\sqrt{yz}}R_{F}\left(0,y,z%<br/>\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[R_{J}\left(0,y,z,\pm\sqrt{yz}\right)=\pm\frac{3}{2\sqrt{yz}}R_{F}\left(0,y,z%<br/>\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[R_{J}\left(0,y,z,\pm\sqrt{yz}\right)=\pm\frac{3}{2\sqrt{yz}}R_{F}\left(0,y,z%<br/>\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[R_{J}\left(0,y,z,\pm\sqrt{yz}\right)=\pm\frac{3}{2\sqrt{yz}}R_{F}\left(0,y,z\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:R_{J}\left(0,y,z,\pm\sqrt{yz}\right)=\pm\frac{3}{2\sqrt{yz}}R_{F}\left(0,y,z\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: R_{J}\left(0,y,z,\pm\sqrt{yz}\right)=\pm\frac{3}{2\sqrt{yz}}R_{F}\left(0,y,z\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      31.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.551 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 29.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">48 ms</div>
</em><em class="status">passed</em>[146] 146</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.551 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 146.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.553 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.553 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.590 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: <br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.596 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.596 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.598 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.598 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.598 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.599 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      27.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.599 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 50.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">42 ms</div>
</em><em class="status">passed</em>[147] 147</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.600 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 147.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.600 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.600 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.600 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.601 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.601 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\Pi\left(\alpha^{2},k\right)-K\left(k\right)=\tfrac{1}{3}\alpha^{2}R_{J}\left(%<br/>0,{k^{\prime}}^{2},1,1-\alpha^{2}\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\Pi\left(\alpha^{2},k\right)-K\left(k\right)=\tfrac{1}{3}\alpha^{2}R_{J}\left(%<br/>0,{k^{\prime}}^{2},1,1-\alpha^{2}\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\Pi\left(\alpha^{2},k\right)-K\left(k\right)=\tfrac{1}{3}\alpha^{2}R_{J}\left(%<br/>0,{k^{\prime}}^{2},1,1-\alpha^{2}\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\Pi\left(\alpha^{2},k\right)-K\left(k\right)=\tfrac{1}{3}\alpha^{2}R_{J}\left(0,{k^{\prime}}^{2},1,1-\alpha^{2}\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Pi\left(\alpha^{2},k\right)-K\left(k\right)=\tfrac{1}{3}\alpha^{2}R_{J}\left(0,{k^{\prime}}^{2},1,1-\alpha^{2}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Pi\left(\alpha^{2},k\right)-K\left(k\right)=\tfrac{1}{3}\alpha^{2}R_{J}\left(0,{k^{\prime}}^{2},1,1-\alpha^{2}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.635 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.635 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.636 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.636 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.636 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.636 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.636 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.642 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      34.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.642 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 49.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[148] 148</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.643 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 148.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.643 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.643 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.643 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.644 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.644 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.672 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[(x-y)^{2}U=\left(\sqrt{x^{4}+a^{4}}+\sqrt{y^{4}+a^{4}}\right)^{2}-(x^{2}-y^{2}%<br/>)^{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.672 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[(x-y)^{2}U=\left(\sqrt{x^{4}+a^{4}}+\sqrt{y^{4}+a^{4}}\right)^{2}-(x^{2}-y^{2}%<br/>)^{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.672 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[(x-y)^{2}U=\left(\sqrt{x^{4}+a^{4}}+\sqrt{y^{4}+a^{4}}\right)^{2}-(x^{2}-y^{2}%<br/>)^{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[(x-y)^{2}U=\left(\sqrt{x^{4}+a^{4}}+\sqrt{y^{4}+a^{4}}\right)^{2}-(x^{2}-y^{2})^{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:(x-y)^{2}U=\left(\sqrt{x^{4}+a^{4}}+\sqrt{y^{4}+a^{4}}\right)^{2}-(x^{2}-y^{2})^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: (x-y)^{2}U=\left(\sqrt{x^{4}+a^{4}}+\sqrt{y^{4}+a^{4}}\right)^{2}-(x^{2}-y^{2})^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.675 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.675 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.675 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.676 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.676 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.682 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      44.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.682 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 26.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">60 ms</div>
</em><em class="status">passed</em>[149] 149</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.682 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 149.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.683 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.683 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.683 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.684 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.684 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.733 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.733 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[C\left(z\right)\pm iS\left(z\right)=\tfrac{1}{2}(1\pm i)\operatorname{erf}\zeta.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.733 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[C\left(z\right)\pm iS\left(z\right)=\tfrac{1}{2}(1\pm i)\operatorname{erf}\zeta.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[C\left(z\right)\pm iS\left(z\right)=\tfrac{1}{2}(1\pm i)\operatorname{erf}\zeta.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[C\left(z\right)\pm iS\left(z\right)=\tfrac{1}{2}(1\pm i)\operatorname{erf}\zeta.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:C\left(z\right)\pm iS\left(z\right)=\tfrac{1}{2}(1\pm i)\operatorname{erf}\zeta<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: C\left(z\right)\pm iS\left(z\right)=\tfrac{1}{2}(1\pm i)\operatorname{erf}\zeta<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.734 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.735 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.735 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.736 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.736 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.736 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.737 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.738 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.738 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.738 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.739 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.739 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.739 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.739 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      21.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 22.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">38 ms</div>
</em><em class="status">passed</em>[150] 150</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 150.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.771 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.771 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\Im\psi\left(\tfrac{1}{2}+iy\right)=\frac{\pi}{2}\tanh\left(\pi y\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.772 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\Im\psi\left(\tfrac{1}{2}+iy\right)=\frac{\pi}{2}\tanh\left(\pi y\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.772 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\Im\psi\left(\tfrac{1}{2}+iy\right)=\frac{\pi}{2}\tanh\left(\pi y\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.772 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\Im\psi\left(\tfrac{1}{2}+iy\right)=\frac{\pi}{2}\tanh\left(\pi y\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.772 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Im\psi\left(\tfrac{1}{2}+iy\right)=\frac{\pi}{2}\tanh\left(\pi y\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.773 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Im\psi\left(\tfrac{1}{2}+iy\right)=\frac{\pi}{2}\tanh\left(\pi y\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.774 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.774 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.775 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.777 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.777 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.777 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.777 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.780 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      22.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 24.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">47 ms</div>
</em><em class="status">passed</em>[151] 151</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 151.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.782 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.783 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.784 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.820 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\Gamma\left(z\right)\Gamma\left(1-z\right)=\pi/\sin\left(\pi z\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\Gamma\left(z\right)\Gamma\left(1-z\right)=\pi/\sin\left(\pi z\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\Gamma\left(z\right)\Gamma\left(1-z\right)=\pi/\sin\left(\pi z\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\Gamma\left(z\right)\Gamma\left(1-z\right)=\pi/\sin\left(\pi z\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Gamma\left(z\right)\Gamma\left(1-z\right)=\pi/\sin\left(\pi z\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.822 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Gamma\left(z\right)\Gamma\left(1-z\right)=\pi/\sin\left(\pi z\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.822 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.822 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.822 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.823 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.824 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.825 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.825 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.825 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.825 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.826 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.826 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.826 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.826 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.826 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.826 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.827 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      22.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 18.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[152] 152</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 152.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.830 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.830 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.860 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.861 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\psi\left(1+z\right)=-\gamma+\sum_{k=2}^{\infty}(-1)^{k}\zeta\left(k\right)z^{%<br/>k-1},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.861 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\psi\left(1+z\right)=-\gamma+\sum_{k=2}^{\infty}(-1)^{k}\zeta\left(k\right)z^{%<br/>k-1},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.861 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\psi\left(1+z\right)=-\gamma+\sum_{k=2}^{\infty}(-1)^{k}\zeta\left(k\right)z^{%<br/>k-1},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.861 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\psi\left(1+z\right)=-\gamma+\sum_{k=2}^{\infty}(-1)^{k}\zeta\left(k\right)z^{k-1},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.861 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\psi\left(1+z\right)=-\gamma+\sum_{k=2}^{\infty}(-1)^{k}\zeta\left(k\right)z^{k-1}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \psi\left(1+z\right)=-\gamma+\sum_{k=2}^{\infty}(-1)^{k}\zeta\left(k\right)z^{k-1}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.868 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      32.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.868 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 24.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">37 ms</div>
</em><em class="status">passed</em>[153] 153</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.869 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 153.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.869 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.869 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.869 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.896 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.896 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\psi\left(\frac{z+1}{2}\right)-\psi\left(\frac{z}{2}\right)=2\sum_{k=0}^{%<br/>\infty}\frac{(-1)^{k}}{k+z}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.896 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\psi\left(\frac{z+1}{2}\right)-\psi\left(\frac{z}{2}\right)=2\sum_{k=0}^{%<br/>\infty}\frac{(-1)^{k}}{k+z}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\psi\left(\frac{z+1}{2}\right)-\psi\left(\frac{z}{2}\right)=2\sum_{k=0}^{%<br/>\infty}\frac{(-1)^{k}}{k+z}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\psi\left(\frac{z+1}{2}\right)-\psi\left(\frac{z}{2}\right)=2\sum_{k=0}^{\infty}\frac{(-1)^{k}}{k+z}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\psi\left(\frac{z+1}{2}\right)-\psi\left(\frac{z}{2}\right)=2\sum_{k=0}^{\infty}\frac{(-1)^{k}}{k+z}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \psi\left(\frac{z+1}{2}\right)-\psi\left(\frac{z}{2}\right)=2\sum_{k=0}^{\infty}\frac{(-1)^{k}}{k+z}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.897 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.898 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.898 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.899 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.900 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.900 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.900 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.901 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.901 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.901 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.901 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.901 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.901 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.905 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      31.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.906 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 22.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">56 ms</div>
</em><em class="status">passed</em>[154] 154</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.907 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 154.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.907 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.907 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.908 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.908 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.908 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\operatorname{Ln}\Gamma\left(z\right)=\left(z-\tfrac{1}{2}\right)\ln z-z+%<br/>\tfrac{1}{2}\ln\left(2\pi\right)+2\int_{0}^{\infty}\frac{\operatorname{arctan}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\left(t/z\right)}{e^{2\pi t}-1}\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.937 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\operatorname{Ln}\Gamma\left(z\right)=\left(z-\tfrac{1}{2}\right)\ln z-z+%<br/>\tfrac{1}{2}\ln\left(2\pi\right)+2\int_{0}^{\infty}\frac{\operatorname{arctan}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\left(t/z\right)}{e^{2\pi t}-1}\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.937 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\operatorname{Ln}\Gamma\left(z\right)=\left(z-\tfrac{1}{2}\right)\ln z-z+%<br/>\tfrac{1}{2}\ln\left(2\pi\right)+2\int_{0}^{\infty}\frac{\operatorname{arctan}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\left(t/z\right)}{e^{2\pi t}-1}\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\operatorname{Ln}\Gamma\left(z\right)=\left(z-\tfrac{1}{2}\right)\ln z-z+\tfrac{1}{2}\ln\left(2\pi\right)+2\int_{0}^{\infty}\frac{\operatorname{arctan}\left(t/z\right)}{e^{2\pi t}-1}\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\operatorname{Ln}\Gamma\left(z\right)=\left(z-\tfrac{1}{2}\right)\ln z-z+\tfrac{1}{2}\ln\left(2\pi\right)+2\int_{0}^{\infty}\frac{\operatorname{arctan}\left(t/z\right)}{e^{2\pi t}-1}\mathrm{d}t<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \operatorname{Ln}\Gamma\left(z\right)=\left(z-\tfrac{1}{2}\right)\ln z-z+\tfrac{1}{2}\ln\left(2\pi\right)+2\int_{0}^{\infty}\frac{\operatorname{arctan}\left(t/z\right)}{e^{2\pi t}-1}\mathrm{d}t<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.938 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.939 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.940 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.942 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.943 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.946 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.947 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.948 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.948 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.948 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.949 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.949 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.961 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      57.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.962 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 42.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[155] 155</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.965 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 155.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.966 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.966 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.967 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.969 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:32.970 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.009 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: <br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.010 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.011 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.011 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.011 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.011 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.012 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.013 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      14.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.014 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 12.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">57 ms</div>
</em><em class="status">passed</em>[156] 156</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.014 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 156.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.015 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.015 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.015 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.054 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.054 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\int_{P}^{(1+,0+,1-,0-)}t^{a-1}(1-t)^{b-1}\mathrm{d}t=-4e^{\pi i(a+b)}\sin%<br/>\left(\pi a\right)\sin\left(\pi b\right)\mathrm{B}\left(a,b\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.054 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\int_{P}^{(1+,0+,1-,0-)}t^{a-1}(1-t)^{b-1}\mathrm{d}t=-4e^{\pi i(a+b)}\sin%<br/>\left(\pi a\right)\sin\left(\pi b\right)\mathrm{B}\left(a,b\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.055 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\int_{P}^{(1+,0+,1-,0-)}t^{a-1}(1-t)^{b-1}\mathrm{d}t=-4e^{\pi i(a+b)}\sin%<br/>\left(\pi a\right)\sin\left(\pi b\right)\mathrm{B}\left(a,b\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.055 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\int_{P}^{(1+,0+,1-,0-)}t^{a-1}(1-t)^{b-1}\mathrm{d}t=-4e^{\pi i(a+b)}\sin\left(\pi a\right)\sin\left(\pi b\right)\mathrm{B}\left(a,b\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.055 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\int_{P}^{(1+,0+,1-,0-)}t^{a-1}(1-t)^{b-1}\mathrm{d}t=-4e^{\pi i(a+b)}\sin\left(\pi a\right)\sin\left(\pi b\right)\mathrm{B}\left(a,b\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.055 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \int_{P}^{(1+,0+,1-,0-)}t^{a-1}(1-t)^{b-1}\mathrm{d}t=-4e^{\pi i(a+b)}\sin\left(\pi a\right)\sin\left(\pi b\right)\mathrm{B}\left(a,b\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.055 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.056 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.056 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.057 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.058 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.058 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.058 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.058 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.059 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.059 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.060 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.060 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.060 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.060 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.060 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.060 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.071 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      69.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.071 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 54.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[157] 157</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.072 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 157.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.072 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.072 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.073 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.073 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.074 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.104 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.105 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[W=-\sum_{1\leq\ell&lt;j\leq n}\ln|e^{i\theta_{\ell}}-e^{i\theta_{j}}|,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.106 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[W=-\sum_{1\leq\ell&lt;j\leq n}\ln|e^{i\theta_{\ell}}-e^{i\theta_{j}}|,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.106 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[W=-\sum_{1\leq\ell&lt;j\leq n}\ln|e^{i\theta_{\ell}}-e^{i\theta_{j}}|,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.106 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[W=-\sum_{1\leq\ell&lt;j\leq n}\ln|e^{i\theta_{\ell}}-e^{i\theta_{j}}|,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:W=-\sum_{1\leq\ell&lt;j\leq n}\ln|e^{i\theta_{\ell}}-e^{i\theta_{j}}|<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: W=-\sum_{1\leq\ell&lt;j\leq n}\ln|e^{i\theta_{\ell}}-e^{i\theta_{j}}|<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.107 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.108 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.109 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.109 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.110 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.111 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      36.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 15.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[158] 158</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.117 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 158.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.117 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.117 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.118 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.119 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.119 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[K_{j}c_{j-1}+L_{j}c_{j}+M_{j}c_{j+1}=0,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[K_{j}c_{j-1}+L_{j}c_{j}+M_{j}c_{j+1}=0,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[K_{j}c_{j-1}+L_{j}c_{j}+M_{j}c_{j+1}=0,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[K_{j}c_{j-1}+L_{j}c_{j}+M_{j}c_{j+1}=0,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:K_{j}c_{j-1}+L_{j}c_{j}+M_{j}c_{j+1}=0<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: K_{j}c_{j-1}+L_{j}c_{j}+M_{j}c_{j+1}=0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.156 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.157 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.157 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.157 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.159 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.159 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      27.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 16.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">54 ms</div>
</em><em class="status">passed</em>[159] 159</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 159.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.163 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.163 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.196 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.196 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[R_{j}=\frac{(n-j)(j+n+\gamma+\delta)(j+\gamma)(j+\delta)}{(\gamma+\delta+2j)(%<br/>\gamma+\delta+2j+1)}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.196 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[R_{j}=\frac{(n-j)(j+n+\gamma+\delta)(j+\gamma)(j+\delta)}{(\gamma+\delta+2j)(%<br/>\gamma+\delta+2j+1)}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.196 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[R_{j}=\frac{(n-j)(j+n+\gamma+\delta)(j+\gamma)(j+\delta)}{(\gamma+\delta+2j)(%<br/>\gamma+\delta+2j+1)}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.197 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[R_{j}=\frac{(n-j)(j+n+\gamma+\delta)(j+\gamma)(j+\delta)}{(\gamma+\delta+2j)(\gamma+\delta+2j+1)}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.197 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:R_{j}=\frac{(n-j)(j+n+\gamma+\delta)(j+\gamma)(j+\delta)}{(\gamma+\delta+2j)(\gamma+\delta+2j+1)}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.198 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: R_{j}=\frac{(n-j)(j+n+\gamma+\delta)(j+\gamma)(j+\delta)}{(\gamma+\delta+2j)(\gamma+\delta+2j+1)}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.198 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.198 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.198 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.199 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.200 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.201 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.204 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.205 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.205 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.206 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.206 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.206 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.206 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.207 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      48.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 31.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">59 ms</div>
</em><em class="status">passed</em>[160] 160</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 160.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.218 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.251 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.251 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\lim_{z\to 1-}\frac{F\left(a,b;c;z\right)}{(1-z)^{c-a-b}}=\frac{\Gamma\left(c%<br/>\right)\Gamma\left(a+b-c\right)}{\Gamma\left(a\right)\Gamma\left(b\right)}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\lim_{z\to 1-}\frac{F\left(a,b;c;z\right)}{(1-z)^{c-a-b}}=\frac{\Gamma\left(c%<br/>\right)\Gamma\left(a+b-c\right)}{\Gamma\left(a\right)\Gamma\left(b\right)}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\lim_{z\to 1-}\frac{F\left(a,b;c;z\right)}{(1-z)^{c-a-b}}=\frac{\Gamma\left(c%<br/>\right)\Gamma\left(a+b-c\right)}{\Gamma\left(a\right)\Gamma\left(b\right)}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\lim_{z\to 1-}\frac{F\left(a,b;c;z\right)}{(1-z)^{c-a-b}}=\frac{\Gamma\left(c\right)\Gamma\left(a+b-c\right)}{\Gamma\left(a\right)\Gamma\left(b\right)}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\lim_{z\to 1-}\frac{F\left(a,b;c;z\right)}{(1-z)^{c-a-b}}=\frac{\Gamma\left(c\right)\Gamma\left(a+b-c\right)}{\Gamma\left(a\right)\Gamma\left(b\right)}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \lim_{z\to 1-}\frac{F\left(a,b;c;z\right)}{(1-z)^{c-a-b}}=\frac{\Gamma\left(c\right)\Gamma\left(a+b-c\right)}{\Gamma\left(a\right)\Gamma\left(b\right)}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.253 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.253 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.253 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.254 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.256 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.258 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.259 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.261 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.261 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.262 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.262 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.263 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.263 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.263 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.263 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.263 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      47.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 34.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">60 ms</div>
</em><em class="status">passed</em>[161] 161</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.276 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 161.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.324 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[F\left(1,a;a+1;-1\right)=\tfrac{1}{2}a\left(\psi\left(\tfrac{1}{2}a+\tfrac{1}{%<br/>2}\right)-\psi\left(\tfrac{1}{2}a\right)\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[F\left(1,a;a+1;-1\right)=\tfrac{1}{2}a\left(\psi\left(\tfrac{1}{2}a+\tfrac{1}{%<br/>2}\right)-\psi\left(\tfrac{1}{2}a\right)\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[F\left(1,a;a+1;-1\right)=\tfrac{1}{2}a\left(\psi\left(\tfrac{1}{2}a+\tfrac{1}{%<br/>2}\right)-\psi\left(\tfrac{1}{2}a\right)\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[F\left(1,a;a+1;-1\right)=\tfrac{1}{2}a\left(\psi\left(\tfrac{1}{2}a+\tfrac{1}{2}\right)-\psi\left(\tfrac{1}{2}a\right)\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:F\left(1,a;a+1;-1\right)=\tfrac{1}{2}a\left(\psi\left(\tfrac{1}{2}a+\tfrac{1}{2}\right)-\psi\left(\tfrac{1}{2}a\right)\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: F\left(1,a;a+1;-1\right)=\tfrac{1}{2}a\left(\psi\left(\tfrac{1}{2}a+\tfrac{1}{2}\right)-\psi\left(\tfrac{1}{2}a\right)\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.330 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.330 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      38.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.335 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 27.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">59 ms</div>
</em><em class="status">passed</em>[162] 162</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.336 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 162.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.337 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.338 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.339 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.340 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.341 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.378 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.378 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[F\left({a,1-a\atop c};z\right)=(1-z)^{c-1}F\left({\frac{1}{2}(c-a),\frac{1}{2}%<br/>(a+c-1)\atop c};4z(1-z)\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.378 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[F\left({a,1-a\atop c};z\right)=(1-z)^{c-1}F\left({\frac{1}{2}(c-a),\frac{1}{2}%<br/>(a+c-1)\atop c};4z(1-z)\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[F\left({a,1-a\atop c};z\right)=(1-z)^{c-1}F\left({\frac{1}{2}(c-a),\frac{1}{2}%<br/>(a+c-1)\atop c};4z(1-z)\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[F\left({a,1-a\atop c};z\right)=(1-z)^{c-1}F\left({\frac{1}{2}(c-a),\frac{1}{2}(a+c-1)\atop c};4z(1-z)\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:F\left({a,1-a\atop c};z\right)=(1-z)^{c-1}F\left({\frac{1}{2}(c-a),\frac{1}{2}(a+c-1)\atop c};4z(1-z)\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: F\left({a,1-a\atop c};z\right)=(1-z)^{c-1}F\left({\frac{1}{2}(c-a),\frac{1}{2}(a+c-1)\atop c};4z(1-z)\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.380 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.380 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.381 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.381 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.381 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.381 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.382 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.382 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.382 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.383 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.383 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.383 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.383 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      57.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 38.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">45 ms</div>
</em><em class="status">passed</em>[163] 163</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 163.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\Psi^{(\mathrm{U})}\left(\mathbf{x}\right)=\int_{-\infty}^{\infty}\int_{-%<br/>\infty}^{\infty}\exp\left(i\Phi^{(\mathrm{U})}\left(s,t;\mathbf{x}\right)%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)\mathrm{d}s\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\Psi^{(\mathrm{U})}\left(\mathbf{x}\right)=\int_{-\infty}^{\infty}\int_{-%<br/>\infty}^{\infty}\exp\left(i\Phi^{(\mathrm{U})}\left(s,t;\mathbf{x}\right)%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)\mathrm{d}s\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\Psi^{(\mathrm{U})}\left(\mathbf{x}\right)=\int_{-\infty}^{\infty}\int_{-%<br/>\infty}^{\infty}\exp\left(i\Phi^{(\mathrm{U})}\left(s,t;\mathbf{x}\right)%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)\mathrm{d}s\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\Psi^{(\mathrm{U})}\left(\mathbf{x}\right)=\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}\exp\left(i\Phi^{(\mathrm{U})}\left(s,t;\mathbf{x}\right)\right)\mathrm{d}s\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Psi^{(\mathrm{U})}\left(\mathbf{x}\right)=\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}\exp\left(i\Phi^{(\mathrm{U})}\left(s,t;\mathbf{x}\right)\right)\mathrm{d}s\mathrm{d}t<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Psi^{(\mathrm{U})}\left(\mathbf{x}\right)=\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}\exp\left(i\Phi^{(\mathrm{U})}\left(s,t;\mathbf{x}\right)\right)\mathrm{d}s\mathrm{d}t<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.432 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.432 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.435 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.435 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.435 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.435 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.436 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.436 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.436 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.440 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      55.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.441 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 32.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">53 ms</div>
</em><em class="status">passed</em>[164] 164</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.441 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 164.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.442 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.442 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.442 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.443 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.443 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.479 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.480 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[x=y=-\tfrac{1}{4}z^{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.481 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[x=y=-\tfrac{1}{4}z^{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.482 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[x=y=-\tfrac{1}{4}z^{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.482 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[x=y=-\tfrac{1}{4}z^{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.482 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:x=y=-\tfrac{1}{4}z^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.482 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: x=y=-\tfrac{1}{4}z^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.483 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.484 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.484 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.485 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.485 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.486 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.486 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.486 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.487 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.487 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.488 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.489 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.490 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.490 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.492 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      14.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.492 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 4.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[165] 165</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 165.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.536 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.537 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.538 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.538 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.538 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.538 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.538 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: <br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.538 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.539 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.539 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.540 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.540 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.541 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.541 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      20.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 25.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[166] 166</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 166.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\frac{{\partial}^{j}E_{p}\left(z\right)}{{\partial p}^{j}}=(-1)^{j}\int_{1}^{%<br/>\infty}(\ln t)^{j}t^{-p}e^{-zt}\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\frac{{\partial}^{j}E_{p}\left(z\right)}{{\partial p}^{j}}=(-1)^{j}\int_{1}^{%<br/>\infty}(\ln t)^{j}t^{-p}e^{-zt}\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\frac{{\partial}^{j}E_{p}\left(z\right)}{{\partial p}^{j}}=(-1)^{j}\int_{1}^{%<br/>\infty}(\ln t)^{j}t^{-p}e^{-zt}\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\frac{{\partial}^{j}E_{p}\left(z\right)}{{\partial p}^{j}}=(-1)^{j}\int_{1}^{\infty}(\ln t)^{j}t^{-p}e^{-zt}\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.581 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\frac{{\partial}^{j}E_{p}\left(z\right)}{{\partial p}^{j}}=(-1)^{j}\int_{1}^{\infty}(\ln t)^{j}t^{-p}e^{-zt}\mathrm{d}t<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.581 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \frac{{\partial}^{j}E_{p}\left(z\right)}{{\partial p}^{j}}=(-1)^{j}\int_{1}^{\infty}(\ln t)^{j}t^{-p}e^{-zt}\mathrm{d}t<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.581 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.581 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.581 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.582 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.582 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.583 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.583 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.583 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.583 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.584 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.584 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.584 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.584 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.585 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.585 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.585 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.589 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      46.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.589 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 41.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[167] 167</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.590 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 167.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.590 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.591 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.591 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.591 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.623 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\operatorname{am}\left(x,k\right)=\int_{0}^{x}\operatorname{dn}\left(t,k\right%<br/>)\mathrm{d}t.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\operatorname{am}\left(x,k\right)=\int_{0}^{x}\operatorname{dn}\left(t,k\right%<br/>)\mathrm{d}t.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\operatorname{am}\left(x,k\right)=\int_{0}^{x}\operatorname{dn}\left(t,k\right%<br/>)\mathrm{d}t.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\operatorname{am}\left(x,k\right)=\int_{0}^{x}\operatorname{dn}\left(t,k\right)\mathrm{d}t.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\operatorname{am}\left(x,k\right)=\int_{0}^{x}\operatorname{dn}\left(t,k\right)\mathrm{d}t<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \operatorname{am}\left(x,k\right)=\int_{0}^{x}\operatorname{dn}\left(t,k\right)\mathrm{d}t<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.630 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.630 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.630 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      25.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 13.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">47 ms</div>
</em><em class="status">passed</em>[168] 168</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.635 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 168.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.636 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.636 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.637 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.638 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.638 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\frac{{\mathrm{d}}^{2}\theta(t)}{{\mathrm{d}t}^{2}}=-\sin\theta(t),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\frac{{\mathrm{d}}^{2}\theta(t)}{{\mathrm{d}t}^{2}}=-\sin\theta(t),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.672 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\frac{{\mathrm{d}}^{2}\theta(t)}{{\mathrm{d}t}^{2}}=-\sin\theta(t),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.672 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\frac{{\mathrm{d}}^{2}\theta(t)}{{\mathrm{d}t}^{2}}=-\sin\theta(t),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\frac{{\mathrm{d}}^{2}\theta(t)}{{\mathrm{d}t}^{2}}=-\sin\theta(t)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \frac{{\mathrm{d}}^{2}\theta(t)}{{\mathrm{d}t}^{2}}=-\sin\theta(t)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.675 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.675 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.676 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.676 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.676 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.679 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.679 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.679 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      22.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 16.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[169] 169</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.682 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 169.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.683 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.683 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.683 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.684 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.685 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: <br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.718 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.718 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.718 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.719 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.720 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.720 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.720 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.721 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.721 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.721 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.721 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.721 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.722 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      25.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 41.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">50 ms</div>
</em><em class="status">passed</em>[170] 170</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.725 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 170.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.726 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.726 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.727 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.727 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.728 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.756 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.757 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\frac{{\mathrm{d}}^{2}w}{{\mathrm{d}z^{\prime}}^{2}}+(h^{\prime}-\nu(\nu+1){k^%<br/>{\prime}}^{2}{\operatorname{sn}^{2}}\left(z^{\prime},k^{\prime}\right))w=0.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\frac{{\mathrm{d}}^{2}w}{{\mathrm{d}z^{\prime}}^{2}}+(h^{\prime}-\nu(\nu+1){k^%<br/>{\prime}}^{2}{\operatorname{sn}^{2}}\left(z^{\prime},k^{\prime}\right))w=0.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\frac{{\mathrm{d}}^{2}w}{{\mathrm{d}z^{\prime}}^{2}}+(h^{\prime}-\nu(\nu+1){k^%<br/>{\prime}}^{2}{\operatorname{sn}^{2}}\left(z^{\prime},k^{\prime}\right))w=0.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\frac{{\mathrm{d}}^{2}w}{{\mathrm{d}z^{\prime}}^{2}}+(h^{\prime}-\nu(\nu+1){k^{\prime}}^{2}{\operatorname{sn}^{2}}\left(z^{\prime},k^{\prime}\right))w=0.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\frac{{\mathrm{d}}^{2}w}{{\mathrm{d}z^{\prime}}^{2}}+(h^{\prime}-\nu(\nu+1){k^{\prime}}^{2}{\operatorname{sn}^{2}}\left(z^{\prime},k^{\prime}\right))w=0<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \frac{{\mathrm{d}}^{2}w}{{\mathrm{d}z^{\prime}}^{2}}+(h^{\prime}-\nu(\nu+1){k^{\prime}}^{2}{\operatorname{sn}^{2}}\left(z^{\prime},k^{\prime}\right))w=0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.762 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.762 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.763 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.763 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.763 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.764 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.764 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.764 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.764 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.774 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      44.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.774 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 42.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">38 ms</div>
</em><em class="status">passed</em>[171] 171</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.775 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 171.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.775 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.777 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.803 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.804 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[b^{2m+1}_{\nu}\left(k^{2}\right)=\tfrac{1}{2}(H_{m}+\nu(\nu+1)k^{2}),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.804 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[b^{2m+1}_{\nu}\left(k^{2}\right)=\tfrac{1}{2}(H_{m}+\nu(\nu+1)k^{2}),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.804 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[b^{2m+1}_{\nu}\left(k^{2}\right)=\tfrac{1}{2}(H_{m}+\nu(\nu+1)k^{2}),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.805 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[b^{2m+1}_{\nu}\left(k^{2}\right)=\tfrac{1}{2}(H_{m}+\nu(\nu+1)k^{2}),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.805 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:b^{2m+1}_{\nu}\left(k^{2}\right)=\tfrac{1}{2}(H_{m}+\nu(\nu+1)k^{2})<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.805 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: b^{2m+1}_{\nu}\left(k^{2}\right)=\tfrac{1}{2}(H_{m}+\nu(\nu+1)k^{2})<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.805 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.805 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.805 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.807 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.808 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.808 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.808 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.808 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.809 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.809 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.809 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.809 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.810 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.810 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.810 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.810 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.813 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      30.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.813 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 24.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">119 ms</div>
</em><em class="status">passed</em>[172] 172</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.814 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 172.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.814 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.814 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.814 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.815 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.815 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.850 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.850 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\mathsf{Q}_{n}\left(\cos\theta\right)=\frac{2^{2n+1}(n!)^{2}}{(2n+1)!}\*\sum_{%<br/>k=0}^{\infty}\frac{1\cdot 3\cdots(2k-1)}{k!}\*\frac{(n+1)(n+2)\cdots(n+k)}{(2n%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">+3)(2n+5)\cdots(2n+2k+1)}\*\cos\left((n+2k+1)\theta\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.850 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\mathsf{Q}_{n}\left(\cos\theta\right)=\frac{2^{2n+1}(n!)^{2}}{(2n+1)!}\*\sum_{%<br/>k=0}^{\infty}\frac{1\cdot 3\cdots(2k-1)}{k!}\*\frac{(n+1)(n+2)\cdots(n+k)}{(2n%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">+3)(2n+5)\cdots(2n+2k+1)}\*\cos\left((n+2k+1)\theta\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.851 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\mathsf{Q}_{n}\left(\cos\theta\right)=\frac{2^{2n+1}(n!)^{2}}{(2n+1)!}\*\sum_{%<br/>k=0}^{\infty}\frac{1\cdot 3\cdots(2k-1)}{k!}\*\frac{(n+1)(n+2)\cdots(n+k)}{(2n%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">+3)(2n+5)\cdots(2n+2k+1)}\*\cos\left((n+2k+1)\theta\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.851 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\mathsf{Q}_{n}\left(\cos\theta\right)=\frac{2^{2n+1}(n!)^{2}}{(2n+1)!}\*\sum_{k=0}^{\infty}\frac{1\cdot 3\cdots(2k-1)}{k!}\*\frac{(n+1)(n+2)\cdots(n+k)}{(2n+3)(2n+5)\cdots(2n+2k+1)}\*\cos\left((n+2k+1)\theta\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.851 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\mathsf{Q}_{n}\left(\cos\theta\right)=\frac{2^{2n+1}(n!)^{2}}{(2n+1)!}\*\sum_{k=0}^{\infty}\frac{1\cdot 3\cdots(2k-1)}{k!}\*\frac{(n+1)(n+2)\cdots(n+k)}{(2n+3)(2n+5)\cdots(2n+2k+1)}\*\cos\left((n+2k+1)\theta\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.851 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \mathsf{Q}_{n}\left(\cos\theta\right)=\frac{2^{2n+1}(n!)^{2}}{(2n+1)!}\*\sum_{k=0}^{\infty}\frac{1\cdot 3\cdots(2k-1)}{k!}\*\frac{(n+1)(n+2)\cdots(n+k)}{(2n+3)(2n+5)\cdots(2n+2k+1)}\*\cos\left((n+2k+1)\theta\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.851 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.851 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.852 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.852 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.856 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.857 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.858 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.858 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.859 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.861 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      104.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 90.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">54 ms</div>
</em><em class="status">passed</em>[173] 173</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 173.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.937 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.970 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.970 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[P^{m}_{n-\frac{1}{2}}\left(\cosh\xi\right)=\frac{\Gamma\left(n+m+\tfrac{1}{2}%<br/>\right)}{\Gamma\left(n-m+\tfrac{1}{2}\right)}\*\left(\frac{2}{\pi\sinh\xi}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)^{1/2}\boldsymbol{Q}^{n}_{m-\frac{1}{2}}\left(\coth\xi\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[P^{m}_{n-\frac{1}{2}}\left(\cosh\xi\right)=\frac{\Gamma\left(n+m+\tfrac{1}{2}%<br/>\right)}{\Gamma\left(n-m+\tfrac{1}{2}\right)}\*\left(\frac{2}{\pi\sinh\xi}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)^{1/2}\boldsymbol{Q}^{n}_{m-\frac{1}{2}}\left(\coth\xi\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[P^{m}_{n-\frac{1}{2}}\left(\cosh\xi\right)=\frac{\Gamma\left(n+m+\tfrac{1}{2}%<br/>\right)}{\Gamma\left(n-m+\tfrac{1}{2}\right)}\*\left(\frac{2}{\pi\sinh\xi}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)^{1/2}\boldsymbol{Q}^{n}_{m-\frac{1}{2}}\left(\coth\xi\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[P^{m}_{n-\frac{1}{2}}\left(\cosh\xi\right)=\frac{\Gamma\left(n+m+\tfrac{1}{2}\right)}{\Gamma\left(n-m+\tfrac{1}{2}\right)}\*\left(\frac{2}{\pi\sinh\xi}\right)^{1/2}\boldsymbol{Q}^{n}_{m-\frac{1}{2}}\left(\coth\xi\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:P^{m}_{n-\frac{1}{2}}\left(\cosh\xi\right)=\frac{\Gamma\left(n+m+\tfrac{1}{2}\right)}{\Gamma\left(n-m+\tfrac{1}{2}\right)}\*\left(\frac{2}{\pi\sinh\xi}\right)^{1/2}\boldsymbol{Q}^{n}_{m-\frac{1}{2}}\left(\coth\xi\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: P^{m}_{n-\frac{1}{2}}\left(\cosh\xi\right)=\frac{\Gamma\left(n+m+\tfrac{1}{2}\right)}{\Gamma\left(n-m+\tfrac{1}{2}\right)}\*\left(\frac{2}{\pi\sinh\xi}\right)^{1/2}\boldsymbol{Q}^{n}_{m-\frac{1}{2}}\left(\coth\xi\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.973 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.974 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.974 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.975 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.975 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.975 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.987 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      57.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.987 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 39.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">124 ms</div>
</em><em class="status">passed</em>[174] 174</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.988 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 174.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.988 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.988 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.988 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.989 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:33.990 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.026 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.026 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[{\left(\alpha^{2}+\eta\right)^{1/2}+\tfrac{1}{2}\alpha\ln\eta-\alpha\ln\left(%<br/>\left(\alpha^{2}+\eta\right)^{1/2}+\alpha\right)}={\operatorname{arccos}\left(%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\frac{x}{\left(1+\alpha^{2}\right)^{1/2}}\right)+\frac{\alpha}{2}\ln\left(%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\frac{1+\alpha^{2}+\left(\alpha^{2}-1\right)x^{2}-2\alpha x\left(1+\alpha^{2}-%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">x^{2}\right)^{1/2}}{\left(1+\alpha^{2}\right)\left(1-x^{2}\right)}\right)},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.027 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[{\left(\alpha^{2}+\eta\right)^{1/2}+\tfrac{1}{2}\alpha\ln\eta-\alpha\ln\left(%<br/>\left(\alpha^{2}+\eta\right)^{1/2}+\alpha\right)}={\operatorname{arccos}\left(%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\frac{x}{\left(1+\alpha^{2}\right)^{1/2}}\right)+\frac{\alpha}{2}\ln\left(%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\frac{1+\alpha^{2}+\left(\alpha^{2}-1\right)x^{2}-2\alpha x\left(1+\alpha^{2}-%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">x^{2}\right)^{1/2}}{\left(1+\alpha^{2}\right)\left(1-x^{2}\right)}\right)},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.027 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[{\left(\alpha^{2}+\eta\right)^{1/2}+\tfrac{1}{2}\alpha\ln\eta-\alpha\ln\left(%<br/>\left(\alpha^{2}+\eta\right)^{1/2}+\alpha\right)}={\operatorname{arccos}\left(%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\frac{x}{\left(1+\alpha^{2}\right)^{1/2}}\right)+\frac{\alpha}{2}\ln\left(%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\frac{1+\alpha^{2}+\left(\alpha^{2}-1\right)x^{2}-2\alpha x\left(1+\alpha^{2}-%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">x^{2}\right)^{1/2}}{\left(1+\alpha^{2}\right)\left(1-x^{2}\right)}\right)},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.028 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[{\left(\alpha^{2}+\eta\right)^{1/2}+\tfrac{1}{2}\alpha\ln\eta-\alpha\ln\left(\left(\alpha^{2}+\eta\right)^{1/2}+\alpha\right)}={\operatorname{arccos}\left(\frac{x}{\left(1+\alpha^{2}\right)^{1/2}}\right)+\frac{\alpha}{2}\ln\left(\frac{1+\alpha^{2}+\left(\alpha^{2}-1\right)x^{2}-2\alpha x\left(1+\alpha^{2}-x^{2}\right)^{1/2}}{\left(1+\alpha^{2}\right)\left(1-x^{2}\right)}\right)},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.028 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:{\left(\alpha^{2}+\eta\right)^{1/2}+\tfrac{1}{2}\alpha\ln\eta-\alpha\ln\left(\left(\alpha^{2}+\eta\right)^{1/2}+\alpha\right)}={\operatorname{arccos}\left(\frac{x}{\left(1+\alpha^{2}\right)^{1/2}}\right)+\frac{\alpha}{2}\ln\left(\frac{1+\alpha^{2}+\left(\alpha^{2}-1\right)x^{2}-2\alpha x\left(1+\alpha^{2}-x^{2}\right)^{1/2}}{\left(1+\alpha^{2}\right)\left(1-x^{2}\right)}\right)}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.028 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: {\left(\alpha^{2}+\eta\right)^{1/2}+\tfrac{1}{2}\alpha\ln\eta-\alpha\ln\left(\left(\alpha^{2}+\eta\right)^{1/2}+\alpha\right)}={\operatorname{arccos}\left(\frac{x}{\left(1+\alpha^{2}\right)^{1/2}}\right)+\frac{\alpha}{2}\ln\left(\frac{1+\alpha^{2}+\left(\alpha^{2}-1\right)x^{2}-2\alpha x\left(1+\alpha^{2}-x^{2}\right)^{1/2}}{\left(1+\alpha^{2}\right)\left(1-x^{2}\right)}\right)}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.028 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.029 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.029 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.029 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.038 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.039 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.040 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.042 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.042 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.042 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.043 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      110.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 64.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">118 ms</div>
</em><em class="status">passed</em>[175] 175</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 175.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.115 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.148 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.148 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[U_{m}(\xi)\sim D_{m}\left(\xi\right)-\frac{1}{2^{6}h}\left(D_{m+4}\left(\xi%<br/>\right)-4!\dbinom{m}{4}D_{m-4}\left(\xi\right)\right)+\frac{1}{2^{13}h^{2}}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\left(D_{m+8}\left(\xi\right)-2^{5}(m+2)D_{m+4}\left(\xi\right)+4!\,2^{5}(m-1)%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\dbinom{m}{4}D_{m-4}\left(\xi\right)+8!\genfrac{(}{)}{0.0pt}{}{m}{8}D_{m-8}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\left(\xi\right)\right)+\cdots,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[U_{m}(\xi)\sim D_{m}\left(\xi\right)-\frac{1}{2^{6}h}\left(D_{m+4}\left(\xi%<br/>\right)-4!\dbinom{m}{4}D_{m-4}\left(\xi\right)\right)+\frac{1}{2^{13}h^{2}}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\left(D_{m+8}\left(\xi\right)-2^{5}(m+2)D_{m+4}\left(\xi\right)+4!\,2^{5}(m-1)%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\dbinom{m}{4}D_{m-4}\left(\xi\right)+8!\genfrac{(}{)}{0.0pt}{}{m}{8}D_{m-8}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\left(\xi\right)\right)+\cdots,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[U_{m}(\xi)\sim D_{m}\left(\xi\right)-\frac{1}{2^{6}h}\left(D_{m+4}\left(\xi%<br/>\right)-4!\dbinom{m}{4}D_{m-4}\left(\xi\right)\right)+\frac{1}{2^{13}h^{2}}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\left(D_{m+8}\left(\xi\right)-2^{5}(m+2)D_{m+4}\left(\xi\right)+4!\,2^{5}(m-1)%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\dbinom{m}{4}D_{m-4}\left(\xi\right)+8!\genfrac{(}{)}{0.0pt}{}{m}{8}D_{m-8}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\left(\xi\right)\right)+\cdots,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[U_{m}(\xi)\sim D_{m}\left(\xi\right)-\frac{1}{2^{6}h}\left(D_{m+4}\left(\xi\right)-4!\dbinom{m}{4}D_{m-4}\left(\xi\right)\right)+\frac{1}{2^{13}h^{2}}\left(D_{m+8}\left(\xi\right)-2^{5}(m+2)D_{m+4}\left(\xi\right)+4!\,2^{5}(m-1)\dbinom{m}{4}D_{m-4}\left(\xi\right)+8!\genfrac{(}{)}{0.0pt}{}{m}{8}D_{m-8}\left(\xi\right)\right)+\cdots,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:U_{m}(\xi)\sim D_{m}\left(\xi\right)-\frac{1}{2^{6}h}\left(D_{m+4}\left(\xi\right)-4!\dbinom{m}{4}D_{m-4}\left(\xi\right)\right)+\frac{1}{2^{13}h^{2}}\left(D_{m+8}\left(\xi\right)-2^{5}(m+2)D_{m+4}\left(\xi\right)+4!\,2^{5}(m-1)\dbinom{m}{4}D_{m-4}\left(\xi\right)+8!\genfrac{(}{)}{0.0pt}{}{m}{8}D_{m-8}\left(\xi\right)\right)+\cdots<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.149 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: U_{m}(\xi)\sim D_{m}\left(\xi\right)-\frac{1}{2^{6}h}\left(D_{m+4}\left(\xi\right)-4!\dbinom{m}{4}D_{m-4}\left(\xi\right)\right)+\frac{1}{2^{13}h^{2}}\left(D_{m+8}\left(\xi\right)-2^{5}(m+2)D_{m+4}\left(\xi\right)+4!\,2^{5}(m-1)\dbinom{m}{4}D_{m-4}\left(\xi\right)+8!\genfrac{(}{)}{0.0pt}{}{m}{8}D_{m-8}\left(\xi\right)\right)+\cdots<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.229 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      121.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.230 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 105.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">45 ms</div>
</em><em class="status">passed</em>[176] 176</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.233 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 176.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.234 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.234 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.234 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.235 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.235 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.272 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.273 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: <br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.276 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.276 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.276 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.276 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      28.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 41.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">51 ms</div>
</em><em class="status">passed</em>[177] 177</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.279 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 177.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.279 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.279 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.279 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.280 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.280 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.312 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.313 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[4(\boldsymbol{{\eta}}^{1}(T_{1})\cdot\boldsymbol{{\eta}}^{2}(T_{2})-%<br/>\boldsymbol{{\eta}}^{2}(T_{1})\cdot\boldsymbol{{\eta}}^{1}(T_{2}))=|T_{1}\cap T%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">_{2}|\pmod{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.313 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[4(\boldsymbol{{\eta}}^{1}(T_{1})\cdot\boldsymbol{{\eta}}^{2}(T_{2})-%<br/>\boldsymbol{{\eta}}^{2}(T_{1})\cdot\boldsymbol{{\eta}}^{1}(T_{2}))=|T_{1}\cap T%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">_{2}|\pmod{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.313 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[4(\boldsymbol{{\eta}}^{1}(T_{1})\cdot\boldsymbol{{\eta}}^{2}(T_{2})-%<br/>\boldsymbol{{\eta}}^{2}(T_{1})\cdot\boldsymbol{{\eta}}^{1}(T_{2}))=|T_{1}\cap T%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">_{2}|\pmod{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.313 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[4(\boldsymbol{{\eta}}^{1}(T_{1})\cdot\boldsymbol{{\eta}}^{2}(T_{2})-\boldsymbol{{\eta}}^{2}(T_{1})\cdot\boldsymbol{{\eta}}^{1}(T_{2}))=|T_{1}\cap T_{2}|\pmod{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.313 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:4(\boldsymbol{{\eta}}^{1}(T_{1})\cdot\boldsymbol{{\eta}}^{2}(T_{2})-\boldsymbol{{\eta}}^{2}(T_{1})\cdot\boldsymbol{{\eta}}^{1}(T_{2}))=|T_{1}\cap T_{2}|\pmod{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.314 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: 4(\boldsymbol{{\eta}}^{1}(T_{1})\cdot\boldsymbol{{\eta}}^{2}(T_{2})-\boldsymbol{{\eta}}^{2}(T_{1})\cdot\boldsymbol{{\eta}}^{1}(T_{2}))=|T_{1}\cap T_{2}|\pmod{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.314 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.314 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.314 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.314 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.315 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.315 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.315 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.316 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.316 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.317 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.317 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.317 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.317 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.317 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.318 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.318 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      46.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 38.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">47 ms</div>
</em><em class="status">passed</em>[178] 178</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.333 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 178.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.333 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.334 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.334 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.336 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.338 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.375 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.375 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\Lambda\left(n\right)=\ln p,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\Lambda\left(n\right)=\ln p,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\Lambda\left(n\right)=\ln p,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\Lambda\left(n\right)=\ln p,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Lambda\left(n\right)=\ln p<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Lambda\left(n\right)=\ln p<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.378 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.378 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.378 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.379 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.380 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.380 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.380 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      7.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.380 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 7.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">55 ms</div>
</em><em class="status">passed</em>[179] 179</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.381 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 179.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.381 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.382 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.382 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.383 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.383 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.429 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.429 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\sum_{n=1}^{\infty}f(n)=\prod_{p}(1-f(p))^{-1}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.429 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\sum_{n=1}^{\infty}f(n)=\prod_{p}(1-f(p))^{-1}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.429 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\sum_{n=1}^{\infty}f(n)=\prod_{p}(1-f(p))^{-1}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.429 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\sum_{n=1}^{\infty}f(n)=\prod_{p}(1-f(p))^{-1}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\sum_{n=1}^{\infty}f(n)=\prod_{p}(1-f(p))^{-1}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \sum_{n=1}^{\infty}f(n)=\prod_{p}(1-f(p))^{-1}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.432 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.432 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.432 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.435 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      25.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.436 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 20.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">63 ms</div>
</em><em class="status">passed</em>[180] 180</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.437 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 180.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.437 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.437 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.437 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.438 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.438 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.487 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.488 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[n=x_{1}^{2}+x_{2}^{2}+\dots+x_{k}^{2},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.489 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[n=x_{1}^{2}+x_{2}^{2}+\dots+x_{k}^{2},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.489 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[n=x_{1}^{2}+x_{2}^{2}+\dots+x_{k}^{2},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.490 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[n=x_{1}^{2}+x_{2}^{2}+\dots+x_{k}^{2},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.491 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:n=x_{1}^{2}+x_{2}^{2}+\dots+x_{k}^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.492 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: n=x_{1}^{2}+x_{2}^{2}+\dots+x_{k}^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.492 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.492 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.493 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.493 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.493 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.494 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.494 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.494 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.495 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      21.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 13.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[181] 181</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 181.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.502 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.504 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.540 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.541 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.541 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.541 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.541 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: <br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      35.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 46.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">77 ms</div>
</em><em class="status">passed</em>[182] 182</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 182.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.549 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.604 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.604 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[{(n+\lambda)^{1-\lambda}(1-x^{2})^{\frac{1}{2}\lambda}|C^{(\lambda)}_{n}\left(%<br/>x\right)|&lt;\frac{2^{1-\lambda}}{\Gamma\left(\lambda\right)}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.604 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[{(n+\lambda)^{1-\lambda}(1-x^{2})^{\frac{1}{2}\lambda}|C^{(\lambda)}_{n}\left(%<br/>x\right)|&lt;\frac{2^{1-\lambda}}{\Gamma\left(\lambda\right)}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.604 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[{(n+\lambda)^{1-\lambda}(1-x^{2})^{\frac{1}{2}\lambda}|C^{(\lambda)}_{n}\left(%<br/>x\right)|&lt;\frac{2^{1-\lambda}}{\Gamma\left(\lambda\right)}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.604 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[{(n+\lambda)^{1-\lambda}(1-x^{2})^{\frac{1}{2}\lambda}|C^{(\lambda)}_{n}\left(x\right)|&lt;\frac{2^{1-\lambda}}{\Gamma\left(\lambda\right)}},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.605 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:{(n+\lambda)^{1-\lambda}(1-x^{2})^{\frac{1}{2}\lambda}|C^{(\lambda)}_{n}\left(x\right)|&lt;\frac{2^{1-\lambda}}{\Gamma\left(\lambda\right)}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.605 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: {(n+\lambda)^{1-\lambda}(1-x^{2})^{\frac{1}{2}\lambda}|C^{(\lambda)}_{n}\left(x\right)|&lt;\frac{2^{1-\lambda}}{\Gamma\left(\lambda\right)}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.605 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.605 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.605 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.606 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.606 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.607 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.607 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.607 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.608 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.608 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.609 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.609 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.610 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.610 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.610 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.611 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.622 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      43.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.623 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 26.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[183] 183</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.624 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 183.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.661 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.661 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\int_{0}^{1}P_{n}\left(1-2x^{2}\right)\sin\left(xy\right)\mathrm{d}x=\tfrac{1}%<br/>{2}\pi\left(J_{n+\frac{1}{2}}\left(\tfrac{1}{2}y\right)\right)^{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.661 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\int_{0}^{1}P_{n}\left(1-2x^{2}\right)\sin\left(xy\right)\mathrm{d}x=\tfrac{1}%<br/>{2}\pi\left(J_{n+\frac{1}{2}}\left(\tfrac{1}{2}y\right)\right)^{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.661 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\int_{0}^{1}P_{n}\left(1-2x^{2}\right)\sin\left(xy\right)\mathrm{d}x=\tfrac{1}%<br/>{2}\pi\left(J_{n+\frac{1}{2}}\left(\tfrac{1}{2}y\right)\right)^{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.662 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\int_{0}^{1}P_{n}\left(1-2x^{2}\right)\sin\left(xy\right)\mathrm{d}x=\tfrac{1}{2}\pi\left(J_{n+\frac{1}{2}}\left(\tfrac{1}{2}y\right)\right)^{2}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.662 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\int_{0}^{1}P_{n}\left(1-2x^{2}\right)\sin\left(xy\right)\mathrm{d}x=\tfrac{1}{2}\pi\left(J_{n+\frac{1}{2}}\left(\tfrac{1}{2}y\right)\right)^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.662 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \int_{0}^{1}P_{n}\left(1-2x^{2}\right)\sin\left(xy\right)\mathrm{d}x=\tfrac{1}{2}\pi\left(J_{n+\frac{1}{2}}\left(\tfrac{1}{2}y\right)\right)^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.662 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.662 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.662 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.672 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      39.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 43.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">40 ms</div>
</em><em class="status">passed</em>[184] 184</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 184.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.675 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.675 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\sum_{\ell=0}^{n}T_{\ell}\left(x\right)x^{n-\ell}=U_{n}\left(x\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.706 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\sum_{\ell=0}^{n}T_{\ell}\left(x\right)x^{n-\ell}=U_{n}\left(x\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.706 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\sum_{\ell=0}^{n}T_{\ell}\left(x\right)x^{n-\ell}=U_{n}\left(x\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.706 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\sum_{\ell=0}^{n}T_{\ell}\left(x\right)x^{n-\ell}=U_{n}\left(x\right).\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\sum_{\ell=0}^{n}T_{\ell}\left(x\right)x^{n-\ell}=U_{n}\left(x\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \sum_{\ell=0}^{n}T_{\ell}\left(x\right)x^{n-\ell}=U_{n}\left(x\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.708 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.708 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.708 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.709 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.709 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.709 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.709 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.710 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.710 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.710 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.711 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.711 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.711 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.711 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      23.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 20.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[185] 185</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.714 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 185.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.714 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.715 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.747 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.748 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[p_{n}(x)=W_{n}\left(x;a_{1},a_{2},a_{3},a_{4}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.749 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[p_{n}(x)=W_{n}\left(x;a_{1},a_{2},a_{3},a_{4}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.750 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[p_{n}(x)=W_{n}\left(x;a_{1},a_{2},a_{3},a_{4}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.750 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[p_{n}(x)=W_{n}\left(x;a_{1},a_{2},a_{3},a_{4}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.750 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:p_{n}(x)=W_{n}\left(x;a_{1},a_{2},a_{3},a_{4}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.750 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: p_{n}(x)=W_{n}\left(x;a_{1},a_{2},a_{3},a_{4}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.751 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.751 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.751 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.751 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.752 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.752 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.752 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.753 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.753 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.754 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.755 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.755 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.755 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.755 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.756 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.756 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      20.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 19.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">52 ms</div>
</em><em class="status">passed</em>[186] 186</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 186.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[U\left(a,z\right)=\frac{e^{-\frac{1}{4}z^{2}}}{\Gamma\left(\frac{3}{4}+\frac{1%<br/>}{2}a\right)}\*\int_{0}^{\infty}t^{\frac{1}{2}a-\frac{1}{4}}e^{-t}\left(z^{2}+%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">2t\right)^{-\frac{1}{2}a-\frac{1}{4}}\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[U\left(a,z\right)=\frac{e^{-\frac{1}{4}z^{2}}}{\Gamma\left(\frac{3}{4}+\frac{1%<br/>}{2}a\right)}\*\int_{0}^{\infty}t^{\frac{1}{2}a-\frac{1}{4}}e^{-t}\left(z^{2}+%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">2t\right)^{-\frac{1}{2}a-\frac{1}{4}}\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[U\left(a,z\right)=\frac{e^{-\frac{1}{4}z^{2}}}{\Gamma\left(\frac{3}{4}+\frac{1%<br/>}{2}a\right)}\*\int_{0}^{\infty}t^{\frac{1}{2}a-\frac{1}{4}}e^{-t}\left(z^{2}+%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">2t\right)^{-\frac{1}{2}a-\frac{1}{4}}\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[U\left(a,z\right)=\frac{e^{-\frac{1}{4}z^{2}}}{\Gamma\left(\frac{3}{4}+\frac{1}{2}a\right)}\*\int_{0}^{\infty}t^{\frac{1}{2}a-\frac{1}{4}}e^{-t}\left(z^{2}+2t\right)^{-\frac{1}{2}a-\frac{1}{4}}\mathrm{d}t,\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:U\left(a,z\right)=\frac{e^{-\frac{1}{4}z^{2}}}{\Gamma\left(\frac{3}{4}+\frac{1}{2}a\right)}\*\int_{0}^{\infty}t^{\frac{1}{2}a-\frac{1}{4}}e^{-t}\left(z^{2}+2t\right)^{-\frac{1}{2}a-\frac{1}{4}}\mathrm{d}t<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: U\left(a,z\right)=\frac{e^{-\frac{1}{4}z^{2}}}{\Gamma\left(\frac{3}{4}+\frac{1}{2}a\right)}\*\int_{0}^{\infty}t^{\frac{1}{2}a-\frac{1}{4}}e^{-t}\left(z^{2}+2t\right)^{-\frac{1}{2}a-\frac{1}{4}}\mathrm{d}t<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.797 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.797 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.797 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.797 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.797 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.797 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.810 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      72.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.810 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 45.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">106 ms</div>
</em><em class="status">passed</em>[187] 187</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.811 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 187.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.812 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.812 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.812 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.813 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.813 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.858 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.859 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[w_{1}(a,x)=e^{-\frac{1}{4}ix^{2}}M\left(\tfrac{1}{4}-\tfrac{1}{2}ia,\tfrac{1}{%<br/>2},\tfrac{1}{2}ix^{2}\right)=e^{\frac{1}{4}ix^{2}}M\left(\tfrac{1}{4}+\tfrac{1%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">}{2}ia,\tfrac{1}{2},-\tfrac{1}{2}ix^{2}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.860 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[w_{1}(a,x)=e^{-\frac{1}{4}ix^{2}}M\left(\tfrac{1}{4}-\tfrac{1}{2}ia,\tfrac{1}{%<br/>2},\tfrac{1}{2}ix^{2}\right)=e^{\frac{1}{4}ix^{2}}M\left(\tfrac{1}{4}+\tfrac{1%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">}{2}ia,\tfrac{1}{2},-\tfrac{1}{2}ix^{2}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.861 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[w_{1}(a,x)=e^{-\frac{1}{4}ix^{2}}M\left(\tfrac{1}{4}-\tfrac{1}{2}ia,\tfrac{1}{%<br/>2},\tfrac{1}{2}ix^{2}\right)=e^{\frac{1}{4}ix^{2}}M\left(\tfrac{1}{4}+\tfrac{1%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">}{2}ia,\tfrac{1}{2},-\tfrac{1}{2}ix^{2}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[w_{1}(a,x)=e^{-\frac{1}{4}ix^{2}}M\left(\tfrac{1}{4}-\tfrac{1}{2}ia,\tfrac{1}{2},\tfrac{1}{2}ix^{2}\right)=e^{\frac{1}{4}ix^{2}}M\left(\tfrac{1}{4}+\tfrac{1}{2}ia,\tfrac{1}{2},-\tfrac{1}{2}ix^{2}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:w_{1}(a,x)=e^{-\frac{1}{4}ix^{2}}M\left(\tfrac{1}{4}-\tfrac{1}{2}ia,\tfrac{1}{2},\tfrac{1}{2}ix^{2}\right)=e^{\frac{1}{4}ix^{2}}M\left(\tfrac{1}{4}+\tfrac{1}{2}ia,\tfrac{1}{2},-\tfrac{1}{2}ix^{2}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: w_{1}(a,x)=e^{-\frac{1}{4}ix^{2}}M\left(\tfrac{1}{4}-\tfrac{1}{2}ia,\tfrac{1}{2},\tfrac{1}{2}ix^{2}\right)=e^{\frac{1}{4}ix^{2}}M\left(\tfrac{1}{4}+\tfrac{1}{2}ia,\tfrac{1}{2},-\tfrac{1}{2}ix^{2}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.867 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.867 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.868 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.869 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.871 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.872 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.915 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      71.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.916 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 71.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">53 ms</div>
</em><em class="status">passed</em>[188] 188</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.918 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 188.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.918 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.919 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.920 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.923 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.925 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.965 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.965 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.966 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.966 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.966 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.966 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.966 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: <br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.966 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.966 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.967 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.967 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.967 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.968 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.968 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.968 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.969 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.969 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.969 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.969 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.970 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.970 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.970 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      31.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 37.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">61 ms</div>
</em><em class="status">passed</em>[189] 189</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 189.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.973 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.973 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.973 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:34.974 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.019 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.019 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: <br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: <br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.021 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.021 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.023 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.025 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.027 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.028 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.028 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.029 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.030 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.030 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.030 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      9.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 9.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">56 ms</div>
</em><em class="status">passed</em>[190] 190</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 190.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.038 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.039 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.083 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[zv_{1}^{\prime}=2u_{0}-2u_{1}v_{1}^{2}-\theta_{\infty}v_{1}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[zv_{1}^{\prime}=2u_{0}-2u_{1}v_{1}^{2}-\theta_{\infty}v_{1}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[zv_{1}^{\prime}=2u_{0}-2u_{1}v_{1}^{2}-\theta_{\infty}v_{1}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[zv_{1}^{\prime}=2u_{0}-2u_{1}v_{1}^{2}-\theta_{\infty}v_{1}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:zv_{1}^{\prime}=2u_{0}-2u_{1}v_{1}^{2}-\theta_{\infty}v_{1}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: zv_{1}^{\prime}=2u_{0}-2u_{1}v_{1}^{2}-\theta_{\infty}v_{1}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.085 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.085 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.085 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.086 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.086 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.086 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.086 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.087 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.087 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.087 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.087 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.088 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.088 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.088 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.088 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.090 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      32.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.090 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 23.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[191] 191</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.091 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 191.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.092 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.092 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.092 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.093 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.093 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.124 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.125 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   W(\zeta;\alpha_{0},\beta_{0},\gamma_{0},\delta_{0})=\frac{v-1}{v+1},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.125 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  W(\zeta;\alpha_{0},\beta_{0},\gamma_{0},\delta_{0})=\frac{v-1}{v+1},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.125 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       W(\zeta;\alpha_{0},\beta_{0},\gamma_{0},\delta_{0})=\frac{v-1}{v+1},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.126 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: W(\zeta;\alpha_{0},\beta_{0},\gamma_{0},\delta_{0})=\frac{v-1}{v+1},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.126 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:W(\zeta;\alpha_{0},\beta_{0},\gamma_{0},\delta_{0})=\frac{v-1}{v+1}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.126 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: W(\zeta;\alpha_{0},\beta_{0},\gamma_{0},\delta_{0})=\frac{v-1}{v+1}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.126 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.126 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.126 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.127 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.127 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.127 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.128 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.128 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.128 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.129 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.129 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.129 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.130 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.130 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.130 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.130 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.132 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      17.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.132 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 10.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">66 ms</div>
</em><em class="status">passed</em>[192] 192</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.133 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 192.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.133 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.134 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.134 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.135 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.135 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.169 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.170 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[{{}_{3}\phi_{2}}\left({a,b,q^{-n}\atop c,abq^{1-n}/c};q,q\right)=\frac{\left(c%<br/>/a,c/b;q\right)_{n}}{\left(c,c/(ab);q\right)_{n}}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.171 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[{{}_{3}\phi_{2}}\left({a,b,q^{-n}\atop c,abq^{1-n}/c};q,q\right)=\frac{\left(c%<br/>/a,c/b;q\right)_{n}}{\left(c,c/(ab);q\right)_{n}}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.171 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[{{}_{3}\phi_{2}}\left({a,b,q^{-n}\atop c,abq^{1-n}/c};q,q\right)=\frac{\left(c%<br/>/a,c/b;q\right)_{n}}{\left(c,c/(ab);q\right)_{n}}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.171 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[{{}_{3}\phi_{2}}\left({a,b,q^{-n}\atop c,abq^{1-n}/c};q,q\right)=\frac{\left(c/a,c/b;q\right)_{n}}{\left(c,c/(ab);q\right)_{n}}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.171 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:{{}_{3}\phi_{2}}\left({a,b,q^{-n}\atop c,abq^{1-n}/c};q,q\right)=\frac{\left(c/a,c/b;q\right)_{n}}{\left(c,c/(ab);q\right)_{n}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.172 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: {{}_{3}\phi_{2}}\left({a,b,q^{-n}\atop c,abq^{1-n}/c};q,q\right)=\frac{\left(c/a,c/b;q\right)_{n}}{\left(c,c/(ab);q\right)_{n}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.172 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.172 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.172 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.173 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.175 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.175 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.175 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.176 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.176 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.177 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.177 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.177 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.178 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.178 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.178 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.178 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.197 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      57.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.198 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 36.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">45 ms</div>
</em><em class="status">passed</em>[193] 193</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 193.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.204 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.205 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.205 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.230 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.230 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\sum_{n=0}^{\infty}q^{n^{2}}a^{n}\beta_{n}=\frac{1}{\left(aq;q\right)_{\infty}%<br/>}\sum_{n=0}^{\infty}q^{n^{2}}a^{n}\alpha_{n}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.230 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\sum_{n=0}^{\infty}q^{n^{2}}a^{n}\beta_{n}=\frac{1}{\left(aq;q\right)_{\infty}%<br/>}\sum_{n=0}^{\infty}q^{n^{2}}a^{n}\alpha_{n}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.231 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\sum_{n=0}^{\infty}q^{n^{2}}a^{n}\beta_{n}=\frac{1}{\left(aq;q\right)_{\infty}%<br/>}\sum_{n=0}^{\infty}q^{n^{2}}a^{n}\alpha_{n}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.231 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\sum_{n=0}^{\infty}q^{n^{2}}a^{n}\beta_{n}=\frac{1}{\left(aq;q\right)_{\infty}}\sum_{n=0}^{\infty}q^{n^{2}}a^{n}\alpha_{n}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.231 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\sum_{n=0}^{\infty}q^{n^{2}}a^{n}\beta_{n}=\frac{1}{\left(aq;q\right)_{\infty}}\sum_{n=0}^{\infty}q^{n^{2}}a^{n}\alpha_{n}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.231 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \sum_{n=0}^{\infty}q^{n^{2}}a^{n}\beta_{n}=\frac{1}{\left(aq;q\right)_{\infty}}\sum_{n=0}^{\infty}q^{n^{2}}a^{n}\alpha_{n}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.231 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.231 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.232 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.233 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.234 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.234 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.234 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.234 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.235 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.236 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.236 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.236 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.236 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.236 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.237 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.237 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.245 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      46.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.245 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 32.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">100 ms</div>
</em><em class="status">passed</em>[194] 194</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 194.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.256 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.256 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.290 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\frac{\left(q;q\right)_{a_{1}+a_{2}+\cdots+a_{n}}}{\left(q;q\right)_{a_{1}}%<br/>\left(q;q\right)_{a_{2}}\cdots\left(q;q\right)_{a_{n}}}=\mbox{ coeff. of }x_{1%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">}^{0}x_{2}^{0}\cdots x_{n}^{0}\mbox{ in }\prod_{1\leq j&lt;k\leq n}\left(\frac{x_%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">{j}}{x_{k}};q\right)_{a_{j}}\left(\frac{qx_{k}}{x_{j}};q\right)_{a_{k}}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.291 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\frac{\left(q;q\right)_{a_{1}+a_{2}+\cdots+a_{n}}}{\left(q;q\right)_{a_{1}}%<br/>\left(q;q\right)_{a_{2}}\cdots\left(q;q\right)_{a_{n}}}=\mbox{ coeff. of }x_{1%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">}^{0}x_{2}^{0}\cdots x_{n}^{0}\mbox{ in }\prod_{1\leq j&lt;k\leq n}\left(\frac{x_%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">{j}}{x_{k}};q\right)_{a_{j}}\left(\frac{qx_{k}}{x_{j}};q\right)_{a_{k}}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.291 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\frac{\left(q;q\right)_{a_{1}+a_{2}+\cdots+a_{n}}}{\left(q;q\right)_{a_{1}}%<br/>\left(q;q\right)_{a_{2}}\cdots\left(q;q\right)_{a_{n}}}=\mbox{ coeff. of }x_{1%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">}^{0}x_{2}^{0}\cdots x_{n}^{0}\mbox{ in }\prod_{1\leq j&lt;k\leq n}\left(\frac{x_%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">{j}}{x_{k}};q\right)_{a_{j}}\left(\frac{qx_{k}}{x_{j}};q\right)_{a_{k}}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.291 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\frac{\left(q;q\right)_{a_{1}+a_{2}+\cdots+a_{n}}}{\left(q;q\right)_{a_{1}}\left(q;q\right)_{a_{2}}\cdots\left(q;q\right)_{a_{n}}}=\mbox{ coeff. of }x_{1}^{0}x_{2}^{0}\cdots x_{n}^{0}\mbox{ in }\prod_{1\leq j&lt;k\leq n}\left(\frac{x_{j}}{x_{k}};q\right)_{a_{j}}\left(\frac{qx_{k}}{x_{j}};q\right)_{a_{k}}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.291 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\frac{\left(q;q\right)_{a_{1}+a_{2}+\cdots+a_{n}}}{\left(q;q\right)_{a_{1}}\left(q;q\right)_{a_{2}}\cdots\left(q;q\right)_{a_{n}}}=\mbox{ coeff. of }x_{1}^{0}x_{2}^{0}\cdots x_{n}^{0}\mbox{ in }\prod_{1\leq j&lt;k\leq n}\left(\frac{x_{j}}{x_{k}};q\right)_{a_{j}}\left(\frac{qx_{k}}{x_{j}};q\right)_{a_{k}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.292 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \frac{\left(q;q\right)_{a_{1}+a_{2}+\cdots+a_{n}}}{\left(q;q\right)_{a_{1}}\left(q;q\right)_{a_{2}}\cdots\left(q;q\right)_{a_{n}}}=\mbox{ coeff. of }x_{1}^{0}x_{2}^{0}\cdots x_{n}^{0}\mbox{ in }\prod_{1\leq j&lt;k\leq n}\left(\frac{x_{j}}{x_{k}};q\right)_{a_{j}}\left(\frac{qx_{k}}{x_{j}};q\right)_{a_{k}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.292 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.292 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.293 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.293 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.294 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.295 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.295 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.296 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.296 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.297 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.298 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.298 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.298 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.299 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.299 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.299 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.345 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      102.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.345 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 64.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">64 ms</div>
</em><em class="status">passed</em>[195] 195</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.346 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 195.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.346 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.347 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.347 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.348 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.348 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.384 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.385 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\theta_{3}\left(\pi z\middle|\tau\right)=\theta_{3}\left(0\middle|\tau\right)%<br/>\exp\left(-\sum_{j=1}^{\infty}\frac{1}{2j}\beta_{2j}(\tau)z^{2j}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.386 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\theta_{3}\left(\pi z\middle|\tau\right)=\theta_{3}\left(0\middle|\tau\right)%<br/>\exp\left(-\sum_{j=1}^{\infty}\frac{1}{2j}\beta_{2j}(\tau)z^{2j}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.386 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\theta_{3}\left(\pi z\middle|\tau\right)=\theta_{3}\left(0\middle|\tau\right)%<br/>\exp\left(-\sum_{j=1}^{\infty}\frac{1}{2j}\beta_{2j}(\tau)z^{2j}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.387 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\theta_{3}\left(\pi z\middle|\tau\right)=\theta_{3}\left(0\middle|\tau\right)\exp\left(-\sum_{j=1}^{\infty}\frac{1}{2j}\beta_{2j}(\tau)z^{2j}\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.387 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\theta_{3}\left(\pi z\middle|\tau\right)=\theta_{3}\left(0\middle|\tau\right)\exp\left(-\sum_{j=1}^{\infty}\frac{1}{2j}\beta_{2j}(\tau)z^{2j}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.387 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \theta_{3}\left(\pi z\middle|\tau\right)=\theta_{3}\left(0\middle|\tau\right)\exp\left(-\sum_{j=1}^{\infty}\frac{1}{2j}\beta_{2j}(\tau)z^{2j}\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.387 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.387 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.388 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.389 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.390 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.392 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.392 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.397 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.409 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      50.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.410 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 41.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">63 ms</div>
</em><em class="status">passed</em>[196] 196</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.411 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 196.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.411 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.411 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.412 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.412 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.413 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.449 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\theta_{1}\left(2z,q\right)=2\frac{\theta_{1}\left(z,q\right)\theta_{2}\left(z%<br/>,q\right)\theta_{3}\left(z,q\right)\theta_{4}\left(z,q\right)}{\theta_{2}\left%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">(0,q\right)\theta_{3}\left(0,q\right)\theta_{4}\left(0,q\right)}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\theta_{1}\left(2z,q\right)=2\frac{\theta_{1}\left(z,q\right)\theta_{2}\left(z%<br/>,q\right)\theta_{3}\left(z,q\right)\theta_{4}\left(z,q\right)}{\theta_{2}\left%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">(0,q\right)\theta_{3}\left(0,q\right)\theta_{4}\left(0,q\right)}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\theta_{1}\left(2z,q\right)=2\frac{\theta_{1}\left(z,q\right)\theta_{2}\left(z%<br/>,q\right)\theta_{3}\left(z,q\right)\theta_{4}\left(z,q\right)}{\theta_{2}\left%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">(0,q\right)\theta_{3}\left(0,q\right)\theta_{4}\left(0,q\right)}.\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\theta_{1}\left(2z,q\right)=2\frac{\theta_{1}\left(z,q\right)\theta_{2}\left(z,q\right)\theta_{3}\left(z,q\right)\theta_{4}\left(z,q\right)}{\theta_{2}\left(0,q\right)\theta_{3}\left(0,q\right)\theta_{4}\left(0,q\right)}.\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\theta_{1}\left(2z,q\right)=2\frac{\theta_{1}\left(z,q\right)\theta_{2}\left(z,q\right)\theta_{3}\left(z,q\right)\theta_{4}\left(z,q\right)}{\theta_{2}\left(0,q\right)\theta_{3}\left(0,q\right)\theta_{4}\left(0,q\right)}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.451 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \theta_{1}\left(2z,q\right)=2\frac{\theta_{1}\left(z,q\right)\theta_{2}\left(z,q\right)\theta_{3}\left(z,q\right)\theta_{4}\left(z,q\right)}{\theta_{2}\left(0,q\right)\theta_{3}\left(0,q\right)\theta_{4}\left(0,q\right)}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.452 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.452 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.452 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.453 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.454 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.455 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.455 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.456 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.457 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.458 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.459 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.459 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.459 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.459 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.460 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.460 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.473 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      72.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.474 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 62.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[197] 197</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.474 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 197.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.474 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.475 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.475 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.475 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.476 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.505 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.505 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[A\equiv A(\tau)=\ifrac{1}{\theta_{4}\left(0\middle|2\tau\right)},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.505 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[A\equiv A(\tau)=\ifrac{1}{\theta_{4}\left(0\middle|2\tau\right)},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.506 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[A\equiv A(\tau)=\ifrac{1}{\theta_{4}\left(0\middle|2\tau\right)},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.506 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[A\equiv A(\tau)=\ifrac{1}{\theta_{4}\left(0\middle|2\tau\right)},\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.506 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:A\equiv A(\tau)=\ifrac{1}{\theta_{4}\left(0\middle|2\tau\right)}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.506 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: A\equiv A(\tau)=\ifrac{1}{\theta_{4}\left(0\middle|2\tau\right)}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.506 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.507 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.507 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.512 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      17.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.513 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 13.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">79 ms</div>
</em><em class="status">passed</em>[198] 198</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.514 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 198.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.514 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.514 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.514 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.515 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.515 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.557 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.558 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\begin{pmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/>m_{1}&amp;m_{2}&amp;m_{3}\end{pmatrix}=(-1)^{j_{1}+j_{2}+j_{3}}\begin{pmatrix}j_{1}&amp;j_%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">{2}&amp;j_{3}\\<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">-m_{1}&amp;-m_{2}&amp;-m_{3}\end{pmatrix},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.558 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\begin{pmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/>m_{1}&amp;m_{2}&amp;m_{3}\end{pmatrix}=(-1)^{j_{1}+j_{2}+j_{3}}\begin{pmatrix}j_{1}&amp;j_%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">{2}&amp;j_{3}\\<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">-m_{1}&amp;-m_{2}&amp;-m_{3}\end{pmatrix},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.559 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\begin{pmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/>m_{1}&amp;m_{2}&amp;m_{3}\end{pmatrix}=(-1)^{j_{1}+j_{2}+j_{3}}\begin{pmatrix}j_{1}&amp;j_%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">{2}&amp;j_{3}\\<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">-m_{1}&amp;-m_{2}&amp;-m_{3}\end{pmatrix},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.559 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\begin{pmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/>m_{1}&amp;m_{2}&amp;m_{3}\end{pmatrix}=(-1)^{j_{1}+j_{2}+j_{3}}\begin{pmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">-m_{1}&amp;-m_{2}&amp;-m_{3}\end{pmatrix},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.560 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\begin{pmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/>m_{1}&amp;m_{2}&amp;m_{3}\end{pmatrix}=(-1)^{j_{1}+j_{2}+j_{3}}\begin{pmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">-m_{1}&amp;-m_{2}&amp;-m_{3}\end{pmatrix}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.560 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \begin{pmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/>m_{1}&amp;m_{2}&amp;m_{3}\end{pmatrix}=(-1)^{j_{1}+j_{2}+j_{3}}\begin{pmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">-m_{1}&amp;-m_{2}&amp;-m_{3}\end{pmatrix}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.560 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.561 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.561 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.563 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.565 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.567 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.567 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.568 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.568 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.570 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.571 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.572 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.573 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.573 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.573 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.574 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.591 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      61.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 50.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">71 ms</div>
</em><em class="status">passed</em>[199] 199</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 199.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[\begin{Bmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/>\frac{1}{2}&amp;j_{3}-\frac{1}{2}&amp;j_{2}-\frac{1}{2}\end{Bmatrix}=(-1)^{J}\left(%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\frac{(j_{2}+j_{3}-j_{1})(j_{1}+j_{2}+j_{3}+1)}{2j_{2}(2j_{2}+1)2j_{3}(2j_{3}+%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">1)}\right)^{\frac{1}{2}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[\begin{Bmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/>\frac{1}{2}&amp;j_{3}-\frac{1}{2}&amp;j_{2}-\frac{1}{2}\end{Bmatrix}=(-1)^{J}\left(%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\frac{(j_{2}+j_{3}-j_{1})(j_{1}+j_{2}+j_{3}+1)}{2j_{2}(2j_{2}+1)2j_{3}(2j_{3}+%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">1)}\right)^{\frac{1}{2}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[\begin{Bmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/>\frac{1}{2}&amp;j_{3}-\frac{1}{2}&amp;j_{2}-\frac{1}{2}\end{Bmatrix}=(-1)^{J}\left(%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\frac{(j_{2}+j_{3}-j_{1})(j_{1}+j_{2}+j_{3}+1)}{2j_{2}(2j_{2}+1)2j_{3}(2j_{3}+%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">1)}\right)^{\frac{1}{2}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[\begin{Bmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/>\frac{1}{2}&amp;j_{3}-\frac{1}{2}&amp;j_{2}-\frac{1}{2}\end{Bmatrix}=(-1)^{J}\left(\frac{(j_{2}+j_{3}-j_{1})(j_{1}+j_{2}+j_{3}+1)}{2j_{2}(2j_{2}+1)2j_{3}(2j_{3}+1)}\right)^{\frac{1}{2}},\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\begin{Bmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/>\frac{1}{2}&amp;j_{3}-\frac{1}{2}&amp;j_{2}-\frac{1}{2}\end{Bmatrix}=(-1)^{J}\left(\frac{(j_{2}+j_{3}-j_{1})(j_{1}+j_{2}+j_{3}+1)}{2j_{2}(2j_{2}+1)2j_{3}(2j_{3}+1)}\right)^{\frac{1}{2}}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \begin{Bmatrix}j_{1}&amp;j_{2}&amp;j_{3}\\<br/>\frac{1}{2}&amp;j_{3}-\frac{1}{2}&amp;j_{2}-\frac{1}{2}\end{Bmatrix}=(-1)^{J}\left(\frac{(j_{2}+j_{3}-j_{1})(j_{1}+j_{2}+j_{3}+1)}{2j_{2}(2j_{2}+1)2j_{3}(2j_{3}+1)}\right)^{\frac{1}{2}}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.635 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.635 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.635 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.636 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.637 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.637 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.637 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.637 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.637 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.637 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      74.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 64.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">61 ms</div>
</em><em class="status">passed</em>[200] 200</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 200.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.697 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.698 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \[F\left(x,s\right)=\frac{\Gamma\left(1-s\right)}{(2\pi)^{1-s}}\*\left(e^{\pi i(%<br/>1-s)/2}\zeta\left(1-s,x\right)+e^{\pi i(s-1)/2}\zeta\left(1-s,1-x\right)\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.698 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \[F\left(x,s\right)=\frac{\Gamma\left(1-s\right)}{(2\pi)^{1-s}}\*\left(e^{\pi i(%<br/>1-s)/2}\zeta\left(1-s,x\right)+e^{\pi i(s-1)/2}\zeta\left(1-s,1-x\right)\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.698 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \[F\left(x,s\right)=\frac{\Gamma\left(1-s\right)}{(2\pi)^{1-s}}\*\left(e^{\pi i(%<br/>1-s)/2}\zeta\left(1-s,x\right)+e^{\pi i(s-1)/2}\zeta\left(1-s,1-x\right)\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.698 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \[F\left(x,s\right)=\frac{\Gamma\left(1-s\right)}{(2\pi)^{1-s}}\*\left(e^{\pi i(1-s)/2}\zeta\left(1-s,x\right)+e^{\pi i(s-1)/2}\zeta\left(1-s,1-x\right)\right),\]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.698 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:F\left(x,s\right)=\frac{\Gamma\left(1-s\right)}{(2\pi)^{1-s}}\*\left(e^{\pi i(1-s)/2}\zeta\left(1-s,x\right)+e^{\pi i(s-1)/2}\zeta\left(1-s,1-x\right)\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.698 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: F\left(x,s\right)=\frac{\Gamma\left(1-s\right)}{(2\pi)^{1-s}}\*\left(e^{\pi i(1-s)/2}\zeta\left(1-s,x\right)+e^{\pi i(s-1)/2}\zeta\left(1-s,1-x\right)\right)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.698 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.699 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.699 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.699 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.700 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.700 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.700 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.701 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.701 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.702 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.703 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.704 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.704 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.706 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.725 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      71.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.726 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 51.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">35 ms</div>
</em><em class="status">passed</em>[201] 201</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.726 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 201.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.726 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.727 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.727 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.727 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.728 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.756 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.757 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   x+y&amp;gt;2n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.757 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  x+y&amp;gt;2n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       x+y&gt;2n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: x+y&gt;2n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:x+y&gt;2n<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: x+y&gt;2n<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      5.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 4.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">36 ms</div>
</em><em class="status">passed</em>[202] 202</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.762 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 202.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.762 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.762 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.762 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.763 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.764 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   |[k]^{n}(1\text{-}1)|=\binom{k}{n}n!=(k)_{n},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  |[k]^{n}(1\text{-}1)|=\binom{k}{n}n!=(k)_{n},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       |[k]^{n}(1\text{-}1)|=\binom{k}{n}n!=(k)_{n},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: |[k]^{n}(1\text{-}1)|=\binom{k}{n}n!=(k)_{n},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:|[k]^{n}(1\text{-}1)|=\binom{k}{n}n!=(k)_{n}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: |[k]^{n}(1\text{-}1)|=\binom{k}{n}n!=(k)_{n}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.798 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      22.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.798 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 32.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">35 ms</div>
</em><em class="status">passed</em>[203] 203</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 203.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.800 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.800 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.827 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.827 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   (1+2+\ldots+k+\ldots+(n-1))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.827 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  (1+2+\ldots+k+\ldots+(n-1))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       (1+2+\ldots+k+\ldots+(n-1))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: (1+2+\ldots+k+\ldots+(n-1))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:(1+2+\ldots+k+\ldots+(n-1))<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: (1+2+\ldots+k+\ldots+(n-1))<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.828 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.830 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.830 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.830 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.833 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.833 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.833 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      19.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.833 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">46 ms</div>
</em><em class="status">passed</em>[204] 204</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.834 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 204.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.834 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.834 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.872 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.872 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   1+\frac{1}{p^{2}}+\frac{1}{p^{4}}+\frac{1}{p^{6}}+\frac{1}{p^{8}}+\cdots=\frac%&amp;#10;{1}{1-\frac{1}{p^{2}}},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  1+\frac{1}{p^{2}}+\frac{1}{p^{4}}+\frac{1}{p^{6}}+\frac{1}{p^{8}}+\cdots=\frac%&amp;#10;{1}{1-\frac{1}{p^{2}}},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       1+\frac{1}{p^{2}}+\frac{1}{p^{4}}+\frac{1}{p^{6}}+\frac{1}{p^{8}}+\cdots=\frac%<br/>{1}{1-\frac{1}{p^{2}}},<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: 1+\frac{1}{p^{2}}+\frac{1}{p^{4}}+\frac{1}{p^{6}}+\frac{1}{p^{8}}+\cdots=\frac{1}{1-\frac{1}{p^{2}}},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:1+\frac{1}{p^{2}}+\frac{1}{p^{4}}+\frac{1}{p^{6}}+\frac{1}{p^{8}}+\cdots=\frac{1}{1-\frac{1}{p^{2}}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: 1+\frac{1}{p^{2}}+\frac{1}{p^{4}}+\frac{1}{p^{6}}+\frac{1}{p^{8}}+\cdots=\frac{1}{1-\frac{1}{p^{2}}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.874 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.874 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.874 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.874 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.875 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.875 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.875 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.875 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.875 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.876 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.876 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.876 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.877 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.877 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.877 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.877 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.879 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      25.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.880 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 9.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">43 ms</div>
</em><em class="status">passed</em>[205] 205</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.880 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 205.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.880 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.881 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.881 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.881 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.882 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.911 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   x,\;1/x,\;1-x,\;1/(1-x),\;(x-1)/x,\;x/(x-1)\qquad\hskip{0.0pt}(*)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  x,\;1/x,\;1-x,\;1/(1-x),\;(x-1)/x,\;x/(x-1)\qquad\hskip{0.0pt}(*)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       x,\;1/x,\;1-x,\;1/(1-x),\;(x-1)/x,\;x/(x-1)\qquad\hskip{0.0pt}(*)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: x,\;1/x,\;1-x,\;1/(1-x),\;(x-1)/x,\;x/(x-1)\qquad\hskip{0.0pt}(*)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:x,\;1/x,\;1-x,\;1/(1-x),\;(x-1)/x,\;x/(x-1)\qquad\hskip{0.0pt}(*)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: x,\;1/x,\;1-x,\;1/(1-x),\;(x-1)/x,\;x/(x-1)\qquad\hskip{0.0pt}(*)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.914 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.914 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.914 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.914 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.915 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.915 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.915 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.916 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.916 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.922 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      61.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.923 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 29.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[206] 206</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.925 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 206.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.926 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.926 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.926 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.928 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.928 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.954 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.955 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   p(\pi_{n})=\sum_{\alpha}\;p_{n}(e_{\alpha})+q(\pi_{n})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.955 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  p(\pi_{n})=\sum_{\alpha}\;p_{n}(e_{\alpha})+q(\pi_{n})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.955 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       p(\pi_{n})=\sum_{\alpha}\;p_{n}(e_{\alpha})+q(\pi_{n})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.956 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: p(\pi_{n})=\sum_{\alpha}\;p_{n}(e_{\alpha})+q(\pi_{n})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.956 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:p(\pi_{n})=\sum_{\alpha}\;p_{n}(e_{\alpha})+q(\pi_{n})<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.956 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: p(\pi_{n})=\sum_{\alpha}\;p_{n}(e_{\alpha})+q(\pi_{n})<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.956 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.956 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.956 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.957 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.958 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.958 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.958 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.959 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.959 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.960 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.960 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.960 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.961 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.961 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.961 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.961 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.963 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      21.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.964 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 19.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">34 ms</div>
</em><em class="status">passed</em>[207] 207</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.964 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 207.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.964 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.965 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.965 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.965 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.966 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.993 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   f=f(t,x,v)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  f=f(t,x,v)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       f=f(t,x,v)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: f=f(t,x,v)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:f=f(t,x,v)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: f=f(t,x,v)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.996 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.996 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.996 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.996 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      9.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">35 ms</div>
</em><em class="status">passed</em>[208] 208</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 208.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:35.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.000 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.000 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.028 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.029 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \xi_{i}^{\mu}=\pm 1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.029 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \xi_{i}^{\mu}=\pm 1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.029 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \xi_{i}^{\mu}=\pm 1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.029 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \xi_{i}^{\mu}=\pm 1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.030 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\xi_{i}^{\mu}=\pm 1<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.030 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \xi_{i}^{\mu}=\pm 1<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.030 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.030 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.030 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      7.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">48 ms</div>
</em><em class="status">passed</em>[209] 209</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 209.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.067 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.067 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \overline{(\Delta H)^{2}}=\frac{1}{N}\sum_{i=1}^{N}[\langle\psi_{i}|H_{i}^{2}|%&amp;#10;\psi_{i}\rangle-\langle\psi_{i}|H_{i}|\psi_{i}\rangle^{2}]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.068 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \overline{(\Delta H)^{2}}=\frac{1}{N}\sum_{i=1}^{N}[\langle\psi_{i}|H_{i}^{2}|%&amp;#10;\psi_{i}\rangle-\langle\psi_{i}|H_{i}|\psi_{i}\rangle^{2}]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.068 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \overline{(\Delta H)^{2}}=\frac{1}{N}\sum_{i=1}^{N}[\langle\psi_{i}|H_{i}^{2}|%<br/>\psi_{i}\rangle-\langle\psi_{i}|H_{i}|\psi_{i}\rangle^{2}]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.068 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \overline{(\Delta H)^{2}}=\frac{1}{N}\sum_{i=1}^{N}[\langle\psi_{i}|H_{i}^{2}|\psi_{i}\rangle-\langle\psi_{i}|H_{i}|\psi_{i}\rangle^{2}]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.068 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\overline{(\Delta H)^{2}}=\frac{1}{N}\sum_{i=1}^{N}[\langle\psi_{i}|H_{i}^{2}|\psi_{i}\rangle-\langle\psi_{i}|H_{i}|\psi_{i}\rangle^{2}]<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.068 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \overline{(\Delta H)^{2}}=\frac{1}{N}\sum_{i=1}^{N}[\langle\psi_{i}|H_{i}^{2}|\psi_{i}\rangle-\langle\psi_{i}|H_{i}|\psi_{i}\rangle^{2}]<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.069 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.069 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.069 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.070 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.071 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.072 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.072 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.072 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.073 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.074 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.074 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.074 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.074 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.075 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.075 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.075 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.082 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      45.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.082 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 40.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">37 ms</div>
</em><em class="status">passed</em>[210] 210</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.083 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 210.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.083 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.083 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.083 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.115 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.115 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   a_{ij}=1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.115 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  a_{ij}=1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.115 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       a_{ij}=1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: a_{ij}=1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:a_{ij}=1<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: a_{ij}=1<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.117 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.117 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.117 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.117 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.118 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.118 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.118 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.118 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.118 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.118 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.119 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.119 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.119 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.119 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      7.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.119 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">47 ms</div>
</em><em class="status">passed</em>[211] 211</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.120 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 211.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.120 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.120 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.121 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.121 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.121 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   app:(A\!:\!\star)list(A)\rightarrow list(A)\rightarrow list(A)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  app:(A\!:\!\star)list(A)\rightarrow list(A)\rightarrow list(A)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       app:(A\!:\!\star)list(A)\rightarrow list(A)\rightarrow list(A)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: app:(A\!:\!\star)list(A)\rightarrow list(A)\rightarrow list(A)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:app:(A\!:\!\star)list(A)\rightarrow list(A)\rightarrow list(A)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: app:(A\!:\!\star)list(A)\rightarrow list(A)\rightarrow list(A)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.156 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.157 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.163 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.167 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      32.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.167 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 23.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">38 ms</div>
</em><em class="status">passed</em>[212] 212</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.168 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 212.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.168 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.168 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.169 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.169 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.170 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.199 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.199 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \psi(a+b)=\psi(a)\widetilde{+}\psi(b)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.199 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \psi(a+b)=\psi(a)\widetilde{+}\psi(b)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.199 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \psi(a+b)=\psi(a)\widetilde{+}\psi(b)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.199 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \psi(a+b)=\psi(a)\widetilde{+}\psi(b)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.200 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\psi(a+b)=\psi(a)\widetilde{+}\psi(b)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.200 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \psi(a+b)=\psi(a)\widetilde{+}\psi(b)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.200 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.200 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.200 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.200 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.201 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.201 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.201 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.201 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.202 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.203 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.204 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.204 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.205 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      15.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.205 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 19.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">37 ms</div>
</em><em class="status">passed</em>[213] 213</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.207 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 213.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.207 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.235 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.236 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   Q(N,M,aj,bj,q)=Q(M,N,bj,aj,q),<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.236 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  Q(N,M,aj,bj,q)=Q(M,N,bj,aj,q),<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.236 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       Q(N,M,aj,bj,q)=Q(M,N,bj,aj,q),<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.236 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: Q(N,M,aj,bj,q)=Q(M,N,bj,aj,q),<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.236 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:Q(N,M,aj,bj,q)=Q(M,N,bj,aj,q)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.237 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: Q(N,M,aj,bj,q)=Q(M,N,bj,aj,q)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.237 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.237 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.237 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.238 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.238 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.239 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.239 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.240 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.240 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.241 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.241 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.241 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.241 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.241 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.241 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.242 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.243 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      17.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.244 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 33.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">37 ms</div>
</em><em class="status">passed</em>[214] 214</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.244 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 214.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.244 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.245 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.245 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.245 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.245 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.276 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   P=NP<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  P=NP<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       P=NP<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: P=NP<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:P=NP<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: P=NP<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.279 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.279 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.279 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.279 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.279 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.280 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.280 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.280 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.280 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.280 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.280 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.281 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.281 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.281 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">42 ms</div>
</em><em class="status">passed</em>[215] 215</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.282 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 215.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.282 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.282 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.282 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.315 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.315 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   S(x)=3x+1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.316 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  S(x)=3x+1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.316 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       S(x)=3x+1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.316 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: S(x)=3x+1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.316 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:S(x)=3x+1<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.316 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: S(x)=3x+1<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.316 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.316 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.317 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.317 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.318 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.318 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.319 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.320 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.320 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.320 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.323 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      7.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.323 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 8.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">50 ms</div>
</em><em class="status">passed</em>[216] 216</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 216.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   F_{n+1}=\sum_{n=k+m}\binom{k}{m}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  F_{n+1}=\sum_{n=k+m}\binom{k}{m}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       F_{n+1}=\sum_{n=k+m}\binom{k}{m}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: F_{n+1}=\sum_{n=k+m}\binom{k}{m}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:F_{n+1}=\sum_{n=k+m}\binom{k}{m}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: F_{n+1}=\sum_{n=k+m}\binom{k}{m}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.372 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.372 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.372 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.373 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.373 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.373 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.374 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.374 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.374 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.374 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.375 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.375 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.375 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      15.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.376 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 15.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[217] 217</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 217.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.377 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.378 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.378 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \mathcal{M}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \mathcal{M}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \mathcal{M}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.418 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \mathcal{M}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\mathcal{M}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \mathcal{M}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.421 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.421 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.422 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.422 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.422 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.423 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.423 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.424 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.424 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.425 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.425 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.425 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.425 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      0.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.426 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">45 ms</div>
</em><em class="status">passed</em>[218] 218</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 218.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.432 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.432 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   {\it L}=i\bar{\Psi}{\gamma}^{\mu}{\partial}_{\mu}{\Psi}-\bar{\Psi}{\Psi}-q\bar%&amp;#10;{\Psi}{\gamma}^{0}{\Psi}\Phi+{1\over 2}({\partial}_{\mu}\Phi)({\partial}^{\mu}%&amp;#10;\Phi).<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  {\it L}=i\bar{\Psi}{\gamma}^{\mu}{\partial}_{\mu}{\Psi}-\bar{\Psi}{\Psi}-q\bar%&amp;#10;{\Psi}{\gamma}^{0}{\Psi}\Phi+{1\over 2}({\partial}_{\mu}\Phi)({\partial}^{\mu}%&amp;#10;\Phi).<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       {\it L}=i\bar{\Psi}{\gamma}^{\mu}{\partial}_{\mu}{\Psi}-\bar{\Psi}{\Psi}-q\bar%<br/>{\Psi}{\gamma}^{0}{\Psi}\Phi+{1\over 2}({\partial}_{\mu}\Phi)({\partial}^{\mu}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\Phi).<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: {\it L}=i\bar{\Psi}{\gamma}^{\mu}{\partial}_{\mu}{\Psi}-\bar{\Psi}{\Psi}-q\bar{\Psi}{\gamma}^{0}{\Psi}\Phi+{1\over 2}({\partial}_{\mu}\Phi)({\partial}^{\mu}\Phi).<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:{\it L}=i\bar{\Psi}{\gamma}^{\mu}{\partial}_{\mu}{\Psi}-\bar{\Psi}{\Psi}-q\bar{\Psi}{\gamma}^{0}{\Psi}\Phi+{1\over 2}({\partial}_{\mu}\Phi)({\partial}^{\mu}\Phi)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: {\it L}=i\bar{\Psi}{\gamma}^{\mu}{\partial}_{\mu}{\Psi}-\bar{\Psi}{\Psi}-q\bar{\Psi}{\gamma}^{0}{\Psi}\Phi+{1\over 2}({\partial}_{\mu}\Phi)({\partial}^{\mu}\Phi)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.469 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.469 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.469 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.469 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.469 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.469 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.469 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.474 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      34.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.474 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 46.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">37 ms</div>
</em><em class="status">passed</em>[219] 219</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.475 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 219.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.475 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.476 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.476 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.477 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.477 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.507 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   Q_{J}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  Q_{J}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       Q_{J}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: Q_{J}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:Q_{J}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: Q_{J}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.512 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">81 ms</div>
</em><em class="status">passed</em>[220] 220</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.512 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 220.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.512 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.512 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.513 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.513 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.514 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   L(\boldsymbol{x},\boldsymbol{y},\boldsymbol{p})=\sum_{i\in\mathcal{N}}\sum_{v&amp;lt;%&amp;#10;w:(v,i,w)\in\Gamma_{G^{\prime}}}\bigg{[}c_{i}y^{i}_{vw}+p(v,i,w)\Big{(}\sum_{t%&amp;#10;\in T}x^{t}(v,i,w)-y^{i}_{vw}\Big{)}+p(w,i,v)\Big{(}\sum_{t\in T}x^{t}(w,i,v)-%&amp;#10;y^{i}_{wv}\Big{)}\bigg{]}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  L(\boldsymbol{x},\boldsymbol{y},\boldsymbol{p})=\sum_{i\in\mathcal{N}}\sum_{v&amp;lt;%&amp;#10;w:(v,i,w)\in\Gamma_{G^{\prime}}}\bigg{[}c_{i}y^{i}_{vw}+p(v,i,w)\Big{(}\sum_{t%&amp;#10;\in T}x^{t}(v,i,w)-y^{i}_{vw}\Big{)}+p(w,i,v)\Big{(}\sum_{t\in T}x^{t}(w,i,v)-%&amp;#10;y^{i}_{wv}\Big{)}\bigg{]}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       L(\boldsymbol{x},\boldsymbol{y},\boldsymbol{p})=\sum_{i\in\mathcal{N}}\sum_{v&lt;%<br/>w:(v,i,w)\in\Gamma_{G^{\prime}}}\bigg{[}c_{i}y^{i}_{vw}+p(v,i,w)\Big{(}\sum_{t%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\in T}x^{t}(v,i,w)-y^{i}_{vw}\Big{)}+p(w,i,v)\Big{(}\sum_{t\in T}x^{t}(w,i,v)-%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">y^{i}_{wv}\Big{)}\bigg{]}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: L(\boldsymbol{x},\boldsymbol{y},\boldsymbol{p})=\sum_{i\in\mathcal{N}}\sum_{v&lt;w:(v,i,w)\in\Gamma_{G^{\prime}}}\bigg{[}c_{i}y^{i}_{vw}+p(v,i,w)\Big{(}\sum_{t\in T}x^{t}(v,i,w)-y^{i}_{vw}\Big{)}+p(w,i,v)\Big{(}\sum_{t\in T}x^{t}(w,i,v)-y^{i}_{wv}\Big{)}\bigg{]}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:L(\boldsymbol{x},\boldsymbol{y},\boldsymbol{p})=\sum_{i\in\mathcal{N}}\sum_{v&lt;w:(v,i,w)\in\Gamma_{G^{\prime}}}\bigg{[}c_{i}y^{i}_{vw}+p(v,i,w)\Big{(}\sum_{t\in T}x^{t}(v,i,w)-y^{i}_{vw}\Big{)}+p(w,i,v)\Big{(}\sum_{t\in T}x^{t}(w,i,v)-y^{i}_{wv}\Big{)}\bigg{]}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: L(\boldsymbol{x},\boldsymbol{y},\boldsymbol{p})=\sum_{i\in\mathcal{N}}\sum_{v&lt;w:(v,i,w)\in\Gamma_{G^{\prime}}}\bigg{[}c_{i}y^{i}_{vw}+p(v,i,w)\Big{(}\sum_{t\in T}x^{t}(v,i,w)-y^{i}_{vw}\Big{)}+p(w,i,v)\Big{(}\sum_{t\in T}x^{t}(w,i,v)-y^{i}_{wv}\Big{)}\bigg{]}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.551 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.552 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.554 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.555 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.555 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.555 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.556 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.556 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.556 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      101.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 63.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[221] 221</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 221.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   L(\widehat{\theta}_{\nu},\theta_{\nu})=\parallel\widehat{\theta}_{\nu}-\mbox{%&amp;#10;sign}\langle\widehat{\theta}_{\nu},\theta_{\nu}\rangle\theta_{\nu}\parallel^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  L(\widehat{\theta}_{\nu},\theta_{\nu})=\parallel\widehat{\theta}_{\nu}-\mbox{%&amp;#10;sign}\langle\widehat{\theta}_{\nu},\theta_{\nu}\rangle\theta_{\nu}\parallel^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       L(\widehat{\theta}_{\nu},\theta_{\nu})=\parallel\widehat{\theta}_{\nu}-\mbox{%<br/>sign}\langle\widehat{\theta}_{\nu},\theta_{\nu}\rangle\theta_{\nu}\parallel^{2}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: L(\widehat{\theta}_{\nu},\theta_{\nu})=\parallel\widehat{\theta}_{\nu}-\mbox{sign}\langle\widehat{\theta}_{\nu},\theta_{\nu}\rangle\theta_{\nu}\parallel^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:L(\widehat{\theta}_{\nu},\theta_{\nu})=\parallel\widehat{\theta}_{\nu}-\mbox{sign}\langle\widehat{\theta}_{\nu},\theta_{\nu}\rangle\theta_{\nu}\parallel^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: L(\widehat{\theta}_{\nu},\theta_{\nu})=\parallel\widehat{\theta}_{\nu}-\mbox{sign}\langle\widehat{\theta}_{\nu},\theta_{\nu}\rangle\theta_{\nu}\parallel^{2}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      29.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 27.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">37 ms</div>
</em><em class="status">passed</em>[222] 222</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 222.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.633 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \Delta x_{1}\Delta x_{2}\geq{\mathchar 22\mkern-9.0mu\lambda}^{2}/(2\pi)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \Delta x_{1}\Delta x_{2}\geq{\mathchar 22\mkern-9.0mu\lambda}^{2}/(2\pi)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \Delta x_{1}\Delta x_{2}\geq{\mathchar 22\mkern-9.0mu\lambda}^{2}/(2\pi)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \Delta x_{1}\Delta x_{2}\geq{\mathchar 22\mkern-9.0mu\lambda}^{2}/(2\pi)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Delta x_{1}\Delta x_{2}\geq{\mathchar 22\mkern-9.0mu\lambda}^{2}/(2\pi)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Delta x_{1}\Delta x_{2}\geq{\mathchar 22\mkern-9.0mu\lambda}^{2}/(2\pi)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      18.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 12.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">38 ms</div>
</em><em class="status">passed</em>[223] 223</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 223.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.701 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.701 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.701 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.701 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.702 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: c<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.702 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:c<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.702 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: c<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.702 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.702 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.703 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.703 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.704 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.706 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.706 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.708 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.708 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.708 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      1.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.708 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[224] 224</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.709 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 224.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.709 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.710 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.711 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.712 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.712 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \mathbf{B}^{*}\mathbf{\sigma_{3}}\mathbf{B}=\mathbf{\sigma_{3}}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \mathbf{B}^{*}\mathbf{\sigma_{3}}\mathbf{B}=\mathbf{\sigma_{3}}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \mathbf{B}^{*}\mathbf{\sigma_{3}}\mathbf{B}=\mathbf{\sigma_{3}}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \mathbf{B}^{*}\mathbf{\sigma_{3}}\mathbf{B}=\mathbf{\sigma_{3}}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\mathbf{B}^{*}\mathbf{\sigma_{3}}\mathbf{B}=\mathbf{\sigma_{3}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \mathbf{B}^{*}\mathbf{\sigma_{3}}\mathbf{B}=\mathbf{\sigma_{3}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.745 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.745 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.745 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.746 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.746 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.746 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.746 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.746 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.746 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.747 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.747 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.747 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.747 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.748 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      12.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.748 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 12.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">60 ms</div>
</em><em class="status">passed</em>[225] 225</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.748 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 225.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.749 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.749 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.749 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.750 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.750 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.788 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.788 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   S_{EH}=\frac{1}{G_{3}}\int d^{3}x\,\sqrt{-g^{(3)}}\,(R^{(3)}+{\cal L}_{\rm&amp;#10;matter%&amp;#10;}).<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.789 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  S_{EH}=\frac{1}{G_{3}}\int d^{3}x\,\sqrt{-g^{(3)}}\,(R^{(3)}+{\cal L}_{\rm&amp;#10;matter%&amp;#10;}).<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.789 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       S_{EH}=\frac{1}{G_{3}}\int d^{3}x\,\sqrt{-g^{(3)}}\,(R^{(3)}+{\cal L}_{\rm<br/>matter%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">}).<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.789 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: S_{EH}=\frac{1}{G_{3}}\int d^{3}x\,\sqrt{-g^{(3)}}\,(R^{(3)}+{\cal L}_{\rm<br/>matter}).<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.789 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:S_{EH}=\frac{1}{G_{3}}\int d^{3}x\,\sqrt{-g^{(3)}}\,(R^{(3)}+{\cal L}_{\rm<br/>matter})<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.790 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: S_{EH}=\frac{1}{G_{3}}\int d^{3}x\,\sqrt{-g^{(3)}}\,(R^{(3)}+{\cal L}_{\rm<br/>matter})<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.790 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.790 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.791 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.800 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.800 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.800 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.801 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.801 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.801 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.802 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.802 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.802 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.802 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.806 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      31.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.806 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 26.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">67 ms</div>
</em><em class="status">passed</em>[226] 226</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.809 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 226.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.810 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.810 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.811 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.813 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.814 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.861 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   S=-T\int d^{p+1}\sigma\,\sqrt{-\zeta}\Bigl[e^{-\beta U}\frac{1}{2}\zeta^{ab}%&amp;#10;\left(G_{ba}-{\mathcal{F}}_{ba}\right)-(p-1)\Bigr]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  S=-T\int d^{p+1}\sigma\,\sqrt{-\zeta}\Bigl[e^{-\beta U}\frac{1}{2}\zeta^{ab}%&amp;#10;\left(G_{ba}-{\mathcal{F}}_{ba}\right)-(p-1)\Bigr]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       S=-T\int d^{p+1}\sigma\,\sqrt{-\zeta}\Bigl[e^{-\beta U}\frac{1}{2}\zeta^{ab}%<br/>\left(G_{ba}-{\mathcal{F}}_{ba}\right)-(p-1)\Bigr]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: S=-T\int d^{p+1}\sigma\,\sqrt{-\zeta}\Bigl[e^{-\beta U}\frac{1}{2}\zeta^{ab}\left(G_{ba}-{\mathcal{F}}_{ba}\right)-(p-1)\Bigr]<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:S=-T\int d^{p+1}\sigma\,\sqrt{-\zeta}\Bigl[e^{-\beta U}\frac{1}{2}\zeta^{ab}\left(G_{ba}-{\mathcal{F}}_{ba}\right)-(p-1)\Bigr]<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.862 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: S=-T\int d^{p+1}\sigma\,\sqrt{-\zeta}\Bigl[e^{-\beta U}\frac{1}{2}\zeta^{ab}\left(G_{ba}-{\mathcal{F}}_{ba}\right)-(p-1)\Bigr]<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.867 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.867 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.875 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      42.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.875 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 40.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">58 ms</div>
</em><em class="status">passed</em>[227] 227</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.876 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 227.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.876 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.877 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.877 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.877 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.878 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.929 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.929 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   Con(ZF+\neg AC)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.929 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  Con(ZF+\neg AC)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       Con(ZF+\neg AC)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: Con(ZF+\neg AC)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:Con(ZF+\neg AC)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: Con(ZF+\neg AC)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.930 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.931 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.932 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.933 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      8.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.934 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 24.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[228] 228</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 228.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.935 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.936 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.970 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \aleph_{0}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \aleph_{0}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.971 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \aleph_{0}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \aleph_{0}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\aleph_{0}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \aleph_{0}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.972 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.973 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.973 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.974 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.974 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.975 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.975 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.978 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.978 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.978 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[229] 229</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.980 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 229.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.980 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.981 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.981 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.982 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:36.982 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.015 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.016 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   dcl(A)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.016 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  dcl(A)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.016 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       dcl(A)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: dcl(A)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:dcl(A)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: dcl(A)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.017 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.018 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.019 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.019 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.019 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.019 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.020 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.021 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      1.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.021 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 11.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">54 ms</div>
</em><em class="status">passed</em>[230] 230</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.022 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 230.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.022 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.022 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.022 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.023 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.023 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.063 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.064 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   (x+y)/2<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.064 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  (x+y)/2<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.064 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       (x+y)/2<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.064 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: (x+y)/2<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.064 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:(x+y)/2<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.064 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: (x+y)/2<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.065 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.065 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.065 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.065 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.066 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.068 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.069 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.070 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.070 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.071 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.071 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.071 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.071 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.072 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.073 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.073 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.074 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      7.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.075 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 2.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[231] 231</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.076 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 231.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.076 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.077 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.077 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.078 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.078 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.112 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \lfloor\ldots\rfloor<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \lfloor\ldots\rfloor<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \lfloor\ldots\rfloor<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \lfloor\ldots\rfloor<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\lfloor\ldots\rfloor<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.113 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \lfloor\ldots\rfloor<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.114 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.115 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.115 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.115 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.115 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.116 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.117 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.117 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.117 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[232] 232</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.118 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 232.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.118 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.118 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.119 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.119 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.119 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   1\leq k\leq n-1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  1\leq k\leq n-1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       1\leq k\leq n-1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: 1\leq k\leq n-1<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:1\leq k\leq n-1<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: 1\leq k\leq n-1<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.155 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.156 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.157 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.159 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.159 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.159 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      8.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">75 ms</div>
</em><em class="status">passed</em>[233] 233</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 233.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.166 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.166 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.206 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.207 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \alpha_{1}=\frac{X(\tau_{1})y}{\parallel X(\tau_{1})\parallel},\dots,\alpha_{j%&amp;#10;+1}=\frac{X(\tau_{j+1})y}{\parallel X(\tau_{j+1})\parallel},\alpha_{j+2}=\frac%&amp;#10;{X(\tau_{j+2})y}{\parallel X(\tau_{j+2})\parallel},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \alpha_{1}=\frac{X(\tau_{1})y}{\parallel X(\tau_{1})\parallel},\dots,\alpha_{j%&amp;#10;+1}=\frac{X(\tau_{j+1})y}{\parallel X(\tau_{j+1})\parallel},\alpha_{j+2}=\frac%&amp;#10;{X(\tau_{j+2})y}{\parallel X(\tau_{j+2})\parallel},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \alpha_{1}=\frac{X(\tau_{1})y}{\parallel X(\tau_{1})\parallel},\dots,\alpha_{j%<br/>+1}=\frac{X(\tau_{j+1})y}{\parallel X(\tau_{j+1})\parallel},\alpha_{j+2}=\frac%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">{X(\tau_{j+2})y}{\parallel X(\tau_{j+2})\parallel},<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.208 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \alpha_{1}=\frac{X(\tau_{1})y}{\parallel X(\tau_{1})\parallel},\dots,\alpha_{j+1}=\frac{X(\tau_{j+1})y}{\parallel X(\tau_{j+1})\parallel},\alpha_{j+2}=\frac{X(\tau_{j+2})y}{\parallel X(\tau_{j+2})\parallel},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\alpha_{1}=\frac{X(\tau_{1})y}{\parallel X(\tau_{1})\parallel},\dots,\alpha_{j+1}=\frac{X(\tau_{j+1})y}{\parallel X(\tau_{j+1})\parallel},\alpha_{j+2}=\frac{X(\tau_{j+2})y}{\parallel X(\tau_{j+2})\parallel}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \alpha_{1}=\frac{X(\tau_{1})y}{\parallel X(\tau_{1})\parallel},\dots,\alpha_{j+1}=\frac{X(\tau_{j+1})y}{\parallel X(\tau_{j+1})\parallel},\alpha_{j+2}=\frac{X(\tau_{j+2})y}{\parallel X(\tau_{j+2})\parallel}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.209 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.210 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.213 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.213 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.214 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.238 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      65.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.238 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 41.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">37 ms</div>
</em><em class="status">passed</em>[234] 234</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.239 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 234.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.239 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.239 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.240 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.240 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.240 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.271 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.271 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   U(1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.271 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  U(1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.272 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       U(1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.272 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: U(1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.272 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:U(1)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.272 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: U(1)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.272 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.273 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.273 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.274 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.275 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.276 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.276 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.276 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.276 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">53 ms</div>
</em><em class="status">passed</em>[235] 235</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 235.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.277 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.278 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   {\cal L}=\{\pi_{1},\pi_{2}\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  {\cal L}=\{\pi_{1},\pi_{2}\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.324 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       {\cal L}=\{\pi_{1},\pi_{2}\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: {\cal L}=\{\pi_{1},\pi_{2}\}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:{\cal L}=\{\pi_{1},\pi_{2}\}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: {\cal L}=\{\pi_{1},\pi_{2}\}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.330 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.330 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      10.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.330 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 9.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">38 ms</div>
</em><em class="status">passed</em>[236] 236</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.331 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 236.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.331 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.331 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.332 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.332 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.332 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.363 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.363 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   t\in{\bf R}_{+},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  t\in{\bf R}_{+},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       t\in{\bf R}_{+},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: t\in{\bf R}_{+},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:t\in{\bf R}_{+}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: t\in{\bf R}_{+}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.365 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.365 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.365 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.366 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.366 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.366 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.366 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.366 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.367 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.367 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.367 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.367 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.368 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      5.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.369 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 2.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[237] 237</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.370 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 237.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.371 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.372 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.373 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.400 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   h_{i}=\sum_{j}\hat{w}_{ij}s_{j}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.401 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  h_{i}=\sum_{j}\hat{w}_{ij}s_{j}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.402 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       h_{i}=\sum_{j}\hat{w}_{ij}s_{j}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.402 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: h_{i}=\sum_{j}\hat{w}_{ij}s_{j}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.402 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:h_{i}=\sum_{j}\hat{w}_{ij}s_{j}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.402 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: h_{i}=\sum_{j}\hat{w}_{ij}s_{j}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.402 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.403 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.403 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.404 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.404 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.405 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.405 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.406 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.407 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.407 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.408 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.408 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.408 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.408 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.408 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.408 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.409 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      20.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.409 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 16.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">38 ms</div>
</em><em class="status">passed</em>[238] 238</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.410 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 238.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.410 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.410 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.410 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.411 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.411 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   A_{N}(\alpha,\beta)=\frac{1}{N}\mathbb{E}\ln\sum_{\sigma}\exp(-\beta H_{N}(%&amp;#10;\sigma))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.440 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  A_{N}(\alpha,\beta)=\frac{1}{N}\mathbb{E}\ln\sum_{\sigma}\exp(-\beta H_{N}(%&amp;#10;\sigma))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.440 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       A_{N}(\alpha,\beta)=\frac{1}{N}\mathbb{E}\ln\sum_{\sigma}\exp(-\beta H_{N}(%<br/>\sigma))<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.440 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: A_{N}(\alpha,\beta)=\frac{1}{N}\mathbb{E}\ln\sum_{\sigma}\exp(-\beta H_{N}(\sigma))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.441 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:A_{N}(\alpha,\beta)=\frac{1}{N}\mathbb{E}\ln\sum_{\sigma}\exp(-\beta H_{N}(\sigma))<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.441 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: A_{N}(\alpha,\beta)=\frac{1}{N}\mathbb{E}\ln\sum_{\sigma}\exp(-\beta H_{N}(\sigma))<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.441 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.441 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.441 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.442 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.443 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.443 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.443 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.444 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.444 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.444 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.444 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.445 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.445 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.445 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.445 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.445 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      25.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.447 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 26.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">52 ms</div>
</em><em class="status">passed</em>[239] 239</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.448 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 239.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.448 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.448 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.449 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.449 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.450 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.495 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.495 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   GF(2)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  GF(2)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       GF(2)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: GF(2)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:GF(2)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: GF(2)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.496 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      1.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 7.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">46 ms</div>
</em><em class="status">passed</em>[240] 240</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 240.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.533 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.534 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   tree:\star<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.534 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  tree:\star<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.534 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       tree:\star<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.535 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: tree:\star<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.535 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:tree:\star<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.535 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: tree:\star<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.535 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.535 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.535 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.537 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.538 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.539 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.539 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.541 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      8.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 6.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">42 ms</div>
</em><em class="status">passed</em>[241] 241</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 241.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.578 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.579 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \Phi:\mathcal{O}_{M}^{(m\mathbb{)}}\mathbb{\times}\mathcal{L}(\mathcal{S}_{n},%&amp;#10;\mathcal{S}_{m})\rightarrow\mathcal{L}(\mathcal{S}_{n},\mathcal{S}_{m}):(f,A)%&amp;#10;\mapsto fA<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.579 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \Phi:\mathcal{O}_{M}^{(m\mathbb{)}}\mathbb{\times}\mathcal{L}(\mathcal{S}_{n},%&amp;#10;\mathcal{S}_{m})\rightarrow\mathcal{L}(\mathcal{S}_{n},\mathcal{S}_{m}):(f,A)%&amp;#10;\mapsto fA<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.579 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \Phi:\mathcal{O}_{M}^{(m\mathbb{)}}\mathbb{\times}\mathcal{L}(\mathcal{S}_{n},%<br/>\mathcal{S}_{m})\rightarrow\mathcal{L}(\mathcal{S}_{n},\mathcal{S}_{m}):(f,A)%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\mapsto fA<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.579 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \Phi:\mathcal{O}_{M}^{(m\mathbb{)}}\mathbb{\times}\mathcal{L}(\mathcal{S}_{n},\mathcal{S}_{m})\rightarrow\mathcal{L}(\mathcal{S}_{n},\mathcal{S}_{m}):(f,A)\mapsto fA<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.579 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Phi:\mathcal{O}_{M}^{(m\mathbb{)}}\mathbb{\times}\mathcal{L}(\mathcal{S}_{n},\mathcal{S}_{m})\rightarrow\mathcal{L}(\mathcal{S}_{n},\mathcal{S}_{m}):(f,A)\mapsto fA<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.579 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Phi:\mathcal{O}_{M}^{(m\mathbb{)}}\mathbb{\times}\mathcal{L}(\mathcal{S}_{n},\mathcal{S}_{m})\rightarrow\mathcal{L}(\mathcal{S}_{n},\mathcal{S}_{m}):(f,A)\mapsto fA<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.581 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.581 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.581 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.581 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.582 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.582 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.582 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.583 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.583 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.583 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.583 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.583 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.588 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      32.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.588 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 28.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">37 ms</div>
</em><em class="status">passed</em>[242] 242</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.590 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 242.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.591 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.591 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.620 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.621 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   AP=(P+a)A<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.621 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  AP=(P+a)A<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.621 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       AP=(P+a)A<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.621 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: AP=(P+a)A<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.621 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:AP=(P+a)A<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.622 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: AP=(P+a)A<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.622 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.622 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.622 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.623 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.623 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.624 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.624 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      7.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 10.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">42 ms</div>
</em><em class="status">passed</em>[243] 243</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 243.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.662 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   PA<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.663 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  PA<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       PA<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: PA<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:PA<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: PA<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.665 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.666 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.667 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      4.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.670 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">47 ms</div>
</em><em class="status">passed</em>[244] 244</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 244.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.672 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.712 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.712 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \left\{3k+4\ \right\}\subset\mathfrak{C},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \left\{3k+4\ \right\}\subset\mathfrak{C},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \left\{3k+4\ \right\}\subset\mathfrak{C},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \left\{3k+4\ \right\}\subset\mathfrak{C},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\left\{3k+4\ \right\}\subset\mathfrak{C}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \left\{3k+4\ \right\}\subset\mathfrak{C}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.714 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.714 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.714 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.715 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.715 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.715 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.715 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.715 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.715 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      5.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">41 ms</div>
</em><em class="status">passed</em>[245] 245</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.719 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 245.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.719 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.720 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.721 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.723 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.724 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.752 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.752 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   F_{n+1}=\sum_{k\leq n}\binom{n-k}{k},\quad n\geq 0.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.752 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  F_{n+1}=\sum_{k\leq n}\binom{n-k}{k},\quad n\geq 0.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.753 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       F_{n+1}=\sum_{k\leq n}\binom{n-k}{k},\quad n\geq 0.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.753 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: F_{n+1}=\sum_{k\leq n}\binom{n-k}{k},\quad n\geq 0.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.753 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:F_{n+1}=\sum_{k\leq n}\binom{n-k}{k},\quad n\geq 0<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.753 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: F_{n+1}=\sum_{k\leq n}\binom{n-k}{k},\quad n\geq 0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.753 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.753 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.754 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.754 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.755 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.755 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.756 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.756 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.757 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.758 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.759 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      19.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.760 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 14.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">37 ms</div>
</em><em class="status">passed</em>[246] 246</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 246.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.761 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.762 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.762 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.791 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.791 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   Con(ZFC+IFS_{W\!Ab\,L(V_{\alpha})})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  Con(ZFC+IFS_{W\!Ab\,L(V_{\alpha})})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       Con(ZFC+IFS_{W\!Ab\,L(V_{\alpha})})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.792 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: Con(ZFC+IFS_{W\!Ab\,L(V_{\alpha})})<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:Con(ZFC+IFS_{W\!Ab\,L(V_{\alpha})})<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: Con(ZFC+IFS_{W\!Ab\,L(V_{\alpha})})<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.793 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.794 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.795 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.796 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.797 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.798 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      18.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.798 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 39.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">75 ms</div>
</em><em class="status">passed</em>[247] 247</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 247.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.799 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.801 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.802 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \partial^{\gamma\dot{\gamma}}\partial_{\gamma\dot{\gamma}}\,\phi^{(k,n)}_{%&amp;#10;\alpha_{1}...\alpha_{k}\,\dot{\beta}_{1}...\dot{\beta}_{n}}=2e^{2}m^{2}\,x^{%&amp;#10;\alpha_{k+1}\dot{\beta}_{n+1}}\,x^{\alpha_{k+2}\dot{\beta}_{n+2}}\,\phi^{(k+2,%&amp;#10;n+2)}_{\alpha_{1}...\alpha_{k}\alpha_{k+1}\alpha_{k+2}\,\dot{\beta}_{1}...\dot%&amp;#10;{\beta}_{n}\dot{\beta}_{n+1}\dot{\beta}_{n+2}}\,,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \partial^{\gamma\dot{\gamma}}\partial_{\gamma\dot{\gamma}}\,\phi^{(k,n)}_{%&amp;#10;\alpha_{1}...\alpha_{k}\,\dot{\beta}_{1}...\dot{\beta}_{n}}=2e^{2}m^{2}\,x^{%&amp;#10;\alpha_{k+1}\dot{\beta}_{n+1}}\,x^{\alpha_{k+2}\dot{\beta}_{n+2}}\,\phi^{(k+2,%&amp;#10;n+2)}_{\alpha_{1}...\alpha_{k}\alpha_{k+1}\alpha_{k+2}\,\dot{\beta}_{1}...\dot%&amp;#10;{\beta}_{n}\dot{\beta}_{n+1}\dot{\beta}_{n+2}}\,,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.831 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \partial^{\gamma\dot{\gamma}}\partial_{\gamma\dot{\gamma}}\,\phi^{(k,n)}_{%<br/>\alpha_{1}...\alpha_{k}\,\dot{\beta}_{1}...\dot{\beta}_{n}}=2e^{2}m^{2}\,x^{%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\alpha_{k+1}\dot{\beta}_{n+1}}\,x^{\alpha_{k+2}\dot{\beta}_{n+2}}\,\phi^{(k+2,%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">n+2)}_{\alpha_{1}...\alpha_{k}\alpha_{k+1}\alpha_{k+2}\,\dot{\beta}_{1}...\dot%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">{\beta}_{n}\dot{\beta}_{n+1}\dot{\beta}_{n+2}}\,,<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \partial^{\gamma\dot{\gamma}}\partial_{\gamma\dot{\gamma}}\,\phi^{(k,n)}_{\alpha_{1}...\alpha_{k}\,\dot{\beta}_{1}...\dot{\beta}_{n}}=2e^{2}m^{2}\,x^{\alpha_{k+1}\dot{\beta}_{n+1}}\,x^{\alpha_{k+2}\dot{\beta}_{n+2}}\,\phi^{(k+2,n+2)}_{\alpha_{1}...\alpha_{k}\alpha_{k+1}\alpha_{k+2}\,\dot{\beta}_{1}...\dot{\beta}_{n}\dot{\beta}_{n+1}\dot{\beta}_{n+2}}\,,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\partial^{\gamma\dot{\gamma}}\partial_{\gamma\dot{\gamma}}\,\phi^{(k,n)}_{\alpha_{1}...\alpha_{k}\,\dot{\beta}_{1}...\dot{\beta}_{n}}=2e^{2}m^{2}\,x^{\alpha_{k+1}\dot{\beta}_{n+1}}\,x^{\alpha_{k+2}\dot{\beta}_{n+2}}\,\phi^{(k+2,n+2)}_{\alpha_{1}...\alpha_{k}\alpha_{k+1}\alpha_{k+2}\,\dot{\beta}_{1}...\dot{\beta}_{n}\dot{\beta}_{n+1}\dot{\beta}_{n+2}}\<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \partial^{\gamma\dot{\gamma}}\partial_{\gamma\dot{\gamma}}\,\phi^{(k,n)}_{\alpha_{1}...\alpha_{k}\,\dot{\beta}_{1}...\dot{\beta}_{n}}=2e^{2}m^{2}\,x^{\alpha_{k+1}\dot{\beta}_{n+1}}\,x^{\alpha_{k+2}\dot{\beta}_{n+2}}\,\phi^{(k+2,n+2)}_{\alpha_{1}...\alpha_{k}\alpha_{k+1}\alpha_{k+2}\,\dot{\beta}_{1}...\dot{\beta}_{n}\dot{\beta}_{n+1}\dot{\beta}_{n+2}}\<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.833 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.834 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.835 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.836 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.838 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.838 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.838 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.838 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.839 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.839 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.839 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.874 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      123.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.874 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 121.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">68 ms</div>
</em><em class="status">passed</em>[248] 248</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.875 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 248.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.875 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.875 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.876 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.876 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.876 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.904 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.905 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   S_{\rm probe}=-(T_{4}L)\int d^{4}x\,\sqrt{-g}\left[{1\over 2}\left(1+\frac{g_{%&amp;#10;s}\pi\sin\theta}{2(M_{s}L)(M_{s}y)^{2}}\right)|\partial y|^{2}-2\left(1-\frac{%&amp;#10;g_{s}\pi\tan^{3}\theta}{8(M_{s}L)(M_{s}y)^{2}}\right)\right]\,,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.905 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  S_{\rm probe}=-(T_{4}L)\int d^{4}x\,\sqrt{-g}\left[{1\over 2}\left(1+\frac{g_{%&amp;#10;s}\pi\sin\theta}{2(M_{s}L)(M_{s}y)^{2}}\right)|\partial y|^{2}-2\left(1-\frac{%&amp;#10;g_{s}\pi\tan^{3}\theta}{8(M_{s}L)(M_{s}y)^{2}}\right)\right]\,,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.905 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       S_{\rm probe}=-(T_{4}L)\int d^{4}x\,\sqrt{-g}\left[{1\over 2}\left(1+\frac{g_{%<br/>s}\pi\sin\theta}{2(M_{s}L)(M_{s}y)^{2}}\right)|\partial y|^{2}-2\left(1-\frac{%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">g_{s}\pi\tan^{3}\theta}{8(M_{s}L)(M_{s}y)^{2}}\right)\right]\,,<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.906 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: S_{\rm probe}=-(T_{4}L)\int d^{4}x\,\sqrt{-g}\left[{1\over 2}\left(1+\frac{g_{s}\pi\sin\theta}{2(M_{s}L)(M_{s}y)^{2}}\right)|\partial y|^{2}-2\left(1-\frac{g_{s}\pi\tan^{3}\theta}{8(M_{s}L)(M_{s}y)^{2}}\right)\right]\,,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.906 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:S_{\rm probe}=-(T_{4}L)\int d^{4}x\,\sqrt{-g}\left[{1\over 2}\left(1+\frac{g_{s}\pi\sin\theta}{2(M_{s}L)(M_{s}y)^{2}}\right)|\partial y|^{2}-2\left(1-\frac{g_{s}\pi\tan^{3}\theta}{8(M_{s}L)(M_{s}y)^{2}}\right)\right]\<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.906 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: S_{\rm probe}=-(T_{4}L)\int d^{4}x\,\sqrt{-g}\left[{1\over 2}\left(1+\frac{g_{s}\pi\sin\theta}{2(M_{s}L)(M_{s}y)^{2}}\right)|\partial y|^{2}-2\left(1-\frac{g_{s}\pi\tan^{3}\theta}{8(M_{s}L)(M_{s}y)^{2}}\right)\right]\<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.906 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.907 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.907 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.908 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.909 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.909 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.909 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.909 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.910 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.911 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.942 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      82.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.942 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 81.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">36 ms</div>
</em><em class="status">passed</em>[249] 249</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.943 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 249.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.944 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.945 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.974 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.975 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   p(\lambda)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.975 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  p(\lambda)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.975 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       p(\lambda)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.975 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: p(\lambda)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:p(\lambda)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: p(\lambda)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.976 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.977 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.978 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.978 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.978 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.978 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.978 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.978 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.978 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.979 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.979 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.979 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">59 ms</div>
</em><em class="status">passed</em>[250] 250</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.980 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 250.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.980 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.980 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.980 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.981 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:37.981 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \theta=\frac{1}{\sigma}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.031 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \theta=\frac{1}{\sigma}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \theta=\frac{1}{\sigma}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \theta=\frac{1}{\sigma}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\theta=\frac{1}{\sigma}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \theta=\frac{1}{\sigma}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.032 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.033 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.034 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.035 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.036 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.037 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.037 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.038 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.038 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      2.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.039 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">58 ms</div>
</em><em class="status">passed</em>[251] 251</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.043 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 251.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.044 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.046 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.047 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.048 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.049 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.091 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.092 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \Delta x\Delta p\geq|&amp;lt;[\widehat{x},\widehat{p}]&amp;gt;|<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.092 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \Delta x\Delta p\geq|&amp;lt;[\widehat{x},\widehat{p}]&amp;gt;|<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.092 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \Delta x\Delta p\geq|&lt;[\widehat{x},\widehat{p}]&gt;|<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.093 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \Delta x\Delta p\geq|&lt;[\widehat{x},\widehat{p}]&gt;|<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.093 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Delta x\Delta p\geq|&lt;[\widehat{x},\widehat{p}]&gt;|<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.093 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Delta x\Delta p\geq|&lt;[\widehat{x},\widehat{p}]&gt;|<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.093 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.093 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.094 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.094 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.095 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.095 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.095 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.096 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.096 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.096 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.097 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.097 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.097 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.097 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.098 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.098 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.099 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      12.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.099 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 17.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">225 ms</div>
</em><em class="status">passed</em>[252] 252</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.101 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 252.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.101 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.101 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.102 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.106 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.109 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.150 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   H_{\rm G}^{\rm phen}[N]=\frac{1}{16\pi G}\int_{\Sigma}\mathrm{d}^{3}x\bar{N}%&amp;#10;\left[-6\sqrt{\bar{p}}\left(\frac{\sin\bar{\mu}\gamma\bar{k}}{\bar{\mu}\gamma}%&amp;#10;\right)^{2}-\frac{1}{2\bar{p}^{3/2}}\left(\frac{\sin\bar{\mu}\gamma\bar{k}}{%&amp;#10;\bar{\mu}\gamma}\right)^{2}(\delta E^{c}_{j}\delta E^{d}_{k}\delta_{c}^{k}%&amp;#10;\delta_{d}^{j})+\sqrt{\bar{p}}(\delta K_{c}^{j}\delta K_{d}^{k}\delta^{c}_{k}%&amp;#10;\delta^{d}_{j})-\frac{2}{\sqrt{\bar{p}}}\left(\frac{\sin m\bar{\mu}\gamma\bar{%&amp;#10;k}}{m\bar{\mu}\gamma}\right)(\delta E^{c}_{j}\delta K_{c}^{j})+\frac{1}{\bar{p%&amp;#10;}^{3/2}}(\delta_{cd}\delta^{jk}\delta^{ef}\partial_{e}E^{c}_{j}\partial_{f}E^{%&amp;#10;d}_{k})\right]~{}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  H_{\rm G}^{\rm phen}[N]=\frac{1}{16\pi G}\int_{\Sigma}\mathrm{d}^{3}x\bar{N}%&amp;#10;\left[-6\sqrt{\bar{p}}\left(\frac{\sin\bar{\mu}\gamma\bar{k}}{\bar{\mu}\gamma}%&amp;#10;\right)^{2}-\frac{1}{2\bar{p}^{3/2}}\left(\frac{\sin\bar{\mu}\gamma\bar{k}}{%&amp;#10;\bar{\mu}\gamma}\right)^{2}(\delta E^{c}_{j}\delta E^{d}_{k}\delta_{c}^{k}%&amp;#10;\delta_{d}^{j})+\sqrt{\bar{p}}(\delta K_{c}^{j}\delta K_{d}^{k}\delta^{c}_{k}%&amp;#10;\delta^{d}_{j})-\frac{2}{\sqrt{\bar{p}}}\left(\frac{\sin m\bar{\mu}\gamma\bar{%&amp;#10;k}}{m\bar{\mu}\gamma}\right)(\delta E^{c}_{j}\delta K_{c}^{j})+\frac{1}{\bar{p%&amp;#10;}^{3/2}}(\delta_{cd}\delta^{jk}\delta^{ef}\partial_{e}E^{c}_{j}\partial_{f}E^{%&amp;#10;d}_{k})\right]~{}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       H_{\rm G}^{\rm phen}[N]=\frac{1}{16\pi G}\int_{\Sigma}\mathrm{d}^{3}x\bar{N}%<br/>\left[-6\sqrt{\bar{p}}\left(\frac{\sin\bar{\mu}\gamma\bar{k}}{\bar{\mu}\gamma}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\right)^{2}-\frac{1}{2\bar{p}^{3/2}}\left(\frac{\sin\bar{\mu}\gamma\bar{k}}{%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\bar{\mu}\gamma}\right)^{2}(\delta E^{c}_{j}\delta E^{d}_{k}\delta_{c}^{k}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\delta_{d}^{j})+\sqrt{\bar{p}}(\delta K_{c}^{j}\delta K_{d}^{k}\delta^{c}_{k}%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">\delta^{d}_{j})-\frac{2}{\sqrt{\bar{p}}}\left(\frac{\sin m\bar{\mu}\gamma\bar{%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">k}}{m\bar{\mu}\gamma}\right)(\delta E^{c}_{j}\delta K_{c}^{j})+\frac{1}{\bar{p%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">}^{3/2}}(\delta_{cd}\delta^{jk}\delta^{ef}\partial_{e}E^{c}_{j}\partial_{f}E^{%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">d}_{k})\right]~{}.<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: H_{\rm G}^{\rm phen}[N]=\frac{1}{16\pi G}\int_{\Sigma}\mathrm{d}^{3}x\bar{N}\left[-6\sqrt{\bar{p}}\left(\frac{\sin\bar{\mu}\gamma\bar{k}}{\bar{\mu}\gamma}\right)^{2}-\frac{1}{2\bar{p}^{3/2}}\left(\frac{\sin\bar{\mu}\gamma\bar{k}}{\bar{\mu}\gamma}\right)^{2}(\delta E^{c}_{j}\delta E^{d}_{k}\delta_{c}^{k}\delta_{d}^{j})+\sqrt{\bar{p}}(\delta K_{c}^{j}\delta K_{d}^{k}\delta^{c}_{k}\delta^{d}_{j})-\frac{2}{\sqrt{\bar{p}}}\left(\frac{\sin m\bar{\mu}\gamma\bar{k}}{m\bar{\mu}\gamma}\right)(\delta E^{c}_{j}\delta K_{c}^{j})+\frac{1}{\bar{p}^{3/2}}(\delta_{cd}\delta^{jk}\delta^{ef}\partial_{e}E^{c}_{j}\partial_{f}E^{d}_{k})\right]~{}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.151 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:H_{\rm G}^{\rm phen}[N]=\frac{1}{16\pi G}\int_{\Sigma}\mathrm{d}^{3}x\bar{N}\left[-6\sqrt{\bar{p}}\left(\frac{\sin\bar{\mu}\gamma\bar{k}}{\bar{\mu}\gamma}\right)^{2}-\frac{1}{2\bar{p}^{3/2}}\left(\frac{\sin\bar{\mu}\gamma\bar{k}}{\bar{\mu}\gamma}\right)^{2}(\delta E^{c}_{j}\delta E^{d}_{k}\delta_{c}^{k}\delta_{d}^{j})+\sqrt{\bar{p}}(\delta K_{c}^{j}\delta K_{d}^{k}\delta^{c}_{k}\delta^{d}_{j})-\frac{2}{\sqrt{\bar{p}}}\left(\frac{\sin m\bar{\mu}\gamma\bar{k}}{m\bar{\mu}\gamma}\right)(\delta E^{c}_{j}\delta K_{c}^{j})+\frac{1}{\bar{p}^{3/2}}(\delta_{cd}\delta^{jk}\delta^{ef}\partial_{e}E^{c}_{j}\partial_{f}E^{d}_{k})\right]~{}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: H_{\rm G}^{\rm phen}[N]=\frac{1}{16\pi G}\int_{\Sigma}\mathrm{d}^{3}x\bar{N}\left[-6\sqrt{\bar{p}}\left(\frac{\sin\bar{\mu}\gamma\bar{k}}{\bar{\mu}\gamma}\right)^{2}-\frac{1}{2\bar{p}^{3/2}}\left(\frac{\sin\bar{\mu}\gamma\bar{k}}{\bar{\mu}\gamma}\right)^{2}(\delta E^{c}_{j}\delta E^{d}_{k}\delta_{c}^{k}\delta_{d}^{j})+\sqrt{\bar{p}}(\delta K_{c}^{j}\delta K_{d}^{k}\delta^{c}_{k}\delta^{d}_{j})-\frac{2}{\sqrt{\bar{p}}}\left(\frac{\sin m\bar{\mu}\gamma\bar{k}}{m\bar{\mu}\gamma}\right)(\delta E^{c}_{j}\delta K_{c}^{j})+\frac{1}{\bar{p}^{3/2}}(\delta_{cd}\delta^{jk}\delta^{ef}\partial_{e}E^{c}_{j}\partial_{f}E^{d}_{k})\right]~{}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.152 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.153 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.154 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.156 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.156 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.156 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.156 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.157 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.157 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.157 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      212.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 222.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">36 ms</div>
</em><em class="status">passed</em>[253] 253</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 253.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \mathcal{P}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.358 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \mathcal{P}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.358 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \mathcal{P}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.358 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \mathcal{P}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.358 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\mathcal{P}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \mathcal{P}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.362 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.362 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      0.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.362 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">52 ms</div>
</em><em class="status">passed</em>[254] 254</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.363 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 254.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.363 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.363 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.363 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.364 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.402 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.403 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   S_{\rm BH}=(n-1)V/4G_{n}R\equiv 2\pi E_{\rm BH}R/n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.404 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  S_{\rm BH}=(n-1)V/4G_{n}R\equiv 2\pi E_{\rm BH}R/n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.404 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       S_{\rm BH}=(n-1)V/4G_{n}R\equiv 2\pi E_{\rm BH}R/n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.404 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: S_{\rm BH}=(n-1)V/4G_{n}R\equiv 2\pi E_{\rm BH}R/n<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.404 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:S_{\rm BH}=(n-1)V/4G_{n}R\equiv 2\pi E_{\rm BH}R/n<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.405 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: S_{\rm BH}=(n-1)V/4G_{n}R\equiv 2\pi E_{\rm BH}R/n<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.405 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.405 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.405 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.406 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.407 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.408 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.408 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.409 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.410 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.411 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.412 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.412 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.412 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.412 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.412 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.412 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.415 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      26.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.415 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 19.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">47 ms</div>
</em><em class="status">passed</em>[255] 255</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.416 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 255.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.416 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.416 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.417 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.419 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.420 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.452 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.453 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \tilde{g}_{\mu\nu}=G_{AB}\frac{\partial X^{A}}{\partial x^{\mu}}\frac{\partial&amp;#10;X%&amp;#10;^{B}}{\partial x^{\nu}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.453 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \tilde{g}_{\mu\nu}=G_{AB}\frac{\partial X^{A}}{\partial x^{\mu}}\frac{\partial&amp;#10;X%&amp;#10;^{B}}{\partial x^{\nu}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.453 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \tilde{g}_{\mu\nu}=G_{AB}\frac{\partial X^{A}}{\partial x^{\mu}}\frac{\partial<br/>X%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">^{B}}{\partial x^{\nu}}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.454 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \tilde{g}_{\mu\nu}=G_{AB}\frac{\partial X^{A}}{\partial x^{\mu}}\frac{\partial<br/>X^{B}}{\partial x^{\nu}}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.454 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\tilde{g}_{\mu\nu}=G_{AB}\frac{\partial X^{A}}{\partial x^{\mu}}\frac{\partial<br/>X^{B}}{\partial x^{\nu}}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.454 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \tilde{g}_{\mu\nu}=G_{AB}\frac{\partial X^{A}}{\partial x^{\mu}}\frac{\partial<br/>X^{B}}{\partial x^{\nu}}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.454 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.455 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.455 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.456 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.456 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.457 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.457 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.458 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.459 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.460 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.460 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.460 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.460 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.460 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.461 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.461 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.463 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      29.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.463 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 25.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[256] 256</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 256.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.464 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.465 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   ZFC+GCH,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.497 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  ZFC+GCH,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       ZFC+GCH,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: ZFC+GCH,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:ZFC+GCH<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: ZFC+GCH<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.498 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.499 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      11.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.502 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 21.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">42 ms</div>
</em><em class="status">passed</em>[257] 257</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.502 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 257.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.502 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.535 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.535 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   C(K)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.536 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  C(K)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.536 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       C(K)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.536 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: C(K)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.536 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:C(K)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.536 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: C(K)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.537 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.537 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.537 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.537 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.538 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.538 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.538 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.539 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.539 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.539 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.540 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.540 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">49 ms</div>
</em><em class="status">passed</em>[258] 258</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 258.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.549 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.588 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.588 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \Sigma<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.589 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \Sigma<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.589 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \Sigma<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.589 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \Sigma<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.589 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Sigma<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.590 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Sigma<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.590 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.590 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.590 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.591 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.593 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      0.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">35 ms</div>
</em><em class="status">passed</em>[259] 259</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 259.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.595 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.596 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.596 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.597 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   f_{1}+f_{2}=2f_{0}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  f_{1}+f_{2}=2f_{0}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       f_{1}+f_{2}=2f_{0}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: f_{1}+f_{2}=2f_{0}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:f_{1}+f_{2}=2f_{0}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: f_{1}+f_{2}=2f_{0}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.628 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.630 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      13.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.630 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 8.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">81 ms</div>
</em><em class="status">passed</em>[260] 260</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 260.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.631 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.632 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   H^{*}_{\lambda}=\left(\prod_{i=1}^{k}n_{i}!\right)\prod_{i&amp;lt;j}\frac{n_{i}+n_{j}%&amp;#10;}{n_{i}-n_{j}}=2^{-\frac{k}{2}}\sqrt{H_{\tilde{\lambda}}},\quad\frac{1}{\sqrt{%&amp;#10;H_{\tilde{\lambda}}}}=\sqrt{s_{\tilde{\lambda}}({\bf t}_{\infty})}=2^{-\frac{k%&amp;#10;}{2}}Q_{\lambda}(\frac{{\bf t}_{\infty}}{2}),<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  H^{*}_{\lambda}=\left(\prod_{i=1}^{k}n_{i}!\right)\prod_{i&amp;lt;j}\frac{n_{i}+n_{j}%&amp;#10;}{n_{i}-n_{j}}=2^{-\frac{k}{2}}\sqrt{H_{\tilde{\lambda}}},\quad\frac{1}{\sqrt{%&amp;#10;H_{\tilde{\lambda}}}}=\sqrt{s_{\tilde{\lambda}}({\bf t}_{\infty})}=2^{-\frac{k%&amp;#10;}{2}}Q_{\lambda}(\frac{{\bf t}_{\infty}}{2}),<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.673 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       H^{*}_{\lambda}=\left(\prod_{i=1}^{k}n_{i}!\right)\prod_{i&lt;j}\frac{n_{i}+n_{j}%<br/>}{n_{i}-n_{j}}=2^{-\frac{k}{2}}\sqrt{H_{\tilde{\lambda}}},\quad\frac{1}{\sqrt{%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">H_{\tilde{\lambda}}}}=\sqrt{s_{\tilde{\lambda}}({\bf t}_{\infty})}=2^{-\frac{k%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">}{2}}Q_{\lambda}(\frac{{\bf t}_{\infty}}{2}),<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: H^{*}_{\lambda}=\left(\prod_{i=1}^{k}n_{i}!\right)\prod_{i&lt;j}\frac{n_{i}+n_{j}}{n_{i}-n_{j}}=2^{-\frac{k}{2}}\sqrt{H_{\tilde{\lambda}}},\quad\frac{1}{\sqrt{H_{\tilde{\lambda}}}}=\sqrt{s_{\tilde{\lambda}}({\bf t}_{\infty})}=2^{-\frac{k}{2}}Q_{\lambda}(\frac{{\bf t}_{\infty}}{2}),<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:H^{*}_{\lambda}=\left(\prod_{i=1}^{k}n_{i}!\right)\prod_{i&lt;j}\frac{n_{i}+n_{j}}{n_{i}-n_{j}}=2^{-\frac{k}{2}}\sqrt{H_{\tilde{\lambda}}},\quad\frac{1}{\sqrt{H_{\tilde{\lambda}}}}=\sqrt{s_{\tilde{\lambda}}({\bf t}_{\infty})}=2^{-\frac{k}{2}}Q_{\lambda}(\frac{{\bf t}_{\infty}}{2})<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: H^{*}_{\lambda}=\left(\prod_{i=1}^{k}n_{i}!\right)\prod_{i&lt;j}\frac{n_{i}+n_{j}}{n_{i}-n_{j}}=2^{-\frac{k}{2}}\sqrt{H_{\tilde{\lambda}}},\quad\frac{1}{\sqrt{H_{\tilde{\lambda}}}}=\sqrt{s_{\tilde{\lambda}}({\bf t}_{\infty})}=2^{-\frac{k}{2}}Q_{\lambda}(\frac{{\bf t}_{\infty}}{2})<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.674 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.675 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.675 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.675 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.676 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.677 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.678 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.679 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.679 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.710 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      94.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.711 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 52.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">36 ms</div>
</em><em class="status">passed</em>[261] 261</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.711 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 261.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.712 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.712 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.712 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.712 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.713 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.739 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.740 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   {\mu}_{k}=E(C_{k})=({\ddot{s}}_{a})_{\overline{k}|j}^{(p,q)}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.740 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  {\mu}_{k}=E(C_{k})=({\ddot{s}}_{a})_{\overline{k}|j}^{(p,q)}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.740 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       {\mu}_{k}=E(C_{k})=({\ddot{s}}_{a})_{\overline{k}|j}^{(p,q)}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.740 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: {\mu}_{k}=E(C_{k})=({\ddot{s}}_{a})_{\overline{k}|j}^{(p,q)}.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.740 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:{\mu}_{k}=E(C_{k})=({\ddot{s}}_{a})_{\overline{k}|j}^{(p,q)}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: {\mu}_{k}=E(C_{k})=({\ddot{s}}_{a})_{\overline{k}|j}^{(p,q)}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.742 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.742 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.743 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.744 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.745 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.746 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      26.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.746 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 23.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[262] 262</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.747 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 262.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.747 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.747 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.748 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.748 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.748 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.774 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.775 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   1+x+x^{2}+\ldots+x^{n-1}+x^{n}=\frac{x^{n+1}-1}{x-1}\ {\rm\left(\right.}{\rm&amp;#10;assuming%&amp;#10;}\ x\neq 1\ {\rm\left.\right)},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.775 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  1+x+x^{2}+\ldots+x^{n-1}+x^{n}=\frac{x^{n+1}-1}{x-1}\ {\rm\left(\right.}{\rm&amp;#10;assuming%&amp;#10;}\ x\neq 1\ {\rm\left.\right)},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       1+x+x^{2}+\ldots+x^{n-1}+x^{n}=\frac{x^{n+1}-1}{x-1}\ {\rm\left(\right.}{\rm<br/>assuming%<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">}\ x\neq 1\ {\rm\left.\right)},<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: 1+x+x^{2}+\ldots+x^{n-1}+x^{n}=\frac{x^{n+1}-1}{x-1}\ {\rm\left(\right.}{\rm<br/>assuming}\ x\neq 1\ {\rm\left.\right)},<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:1+x+x^{2}+\ldots+x^{n-1}+x^{n}=\frac{x^{n+1}-1}{x-1}\ {\rm\left(\right.}{\rm<br/>assuming}\ x\neq 1\ {\rm\left.\right)}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.776 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: 1+x+x^{2}+\ldots+x^{n-1}+x^{n}=\frac{x^{n+1}-1}{x-1}\ {\rm\left(\right.}{\rm<br/>assuming}\ x\neq 1\ {\rm\left.\right)}<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.777 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.777 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.777 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.778 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.779 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.780 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.780 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.780 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.781 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.785 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      34.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.786 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 24.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">43 ms</div>
</em><em class="status">passed</em>[263] 263</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.786 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 263.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.786 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.787 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.787 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.787 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.787 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.820 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.820 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   |\Gamma(L)|=p^{i}(p^{2i}-1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  |\Gamma(L)|=p^{i}(p^{2i}-1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       |\Gamma(L)|=p^{i}(p^{2i}-1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: |\Gamma(L)|=p^{i}(p^{2i}-1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:|\Gamma(L)|=p^{i}(p^{2i}-1)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.821 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: |\Gamma(L)|=p^{i}(p^{2i}-1)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.822 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.822 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.822 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.823 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.823 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.824 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.824 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.825 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.825 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.826 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.826 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.826 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.827 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.827 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.827 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.827 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      16.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.829 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 12.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">39 ms</div>
</em><em class="status">passed</em>[264] 264</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 264.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.832 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.833 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.833 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   q(\pi_{n})\equiv\sum_{\alpha\neq\beta}&amp;lt;\hat{P}(e_{\alpha})\hat{P}(\pi_{n})\hat%&amp;#10;{P}(e_{\beta})&amp;gt;\;,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  q(\pi_{n})\equiv\sum_{\alpha\neq\beta}&amp;lt;\hat{P}(e_{\alpha})\hat{P}(\pi_{n})\hat%&amp;#10;{P}(e_{\beta})&amp;gt;\;,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       q(\pi_{n})\equiv\sum_{\alpha\neq\beta}&lt;\hat{P}(e_{\alpha})\hat{P}(\pi_{n})\hat%<br/>{P}(e_{\beta})&gt;\;,<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: q(\pi_{n})\equiv\sum_{\alpha\neq\beta}&lt;\hat{P}(e_{\alpha})\hat{P}(\pi_{n})\hat{P}(e_{\beta})&gt;\;,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.863 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:q(\pi_{n})\equiv\sum_{\alpha\neq\beta}&lt;\hat{P}(e_{\alpha})\hat{P}(\pi_{n})\hat{P}(e_{\beta})&gt;\<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: q(\pi_{n})\equiv\sum_{\alpha\neq\beta}&lt;\hat{P}(e_{\alpha})\hat{P}(\pi_{n})\hat{P}(e_{\beta})&gt;\<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.864 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.865 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.866 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.867 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.867 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.867 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      22.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.870 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 34.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">44 ms</div>
</em><em class="status">passed</em>[265] 265</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.871 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 265.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.872 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.872 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.873 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.874 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.905 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.906 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   (a,b,(c,d,e))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.906 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  (a,b,(c,d,e))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.906 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       (a,b,(c,d,e))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.906 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: (a,b,(c,d,e))<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.907 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:(a,b,(c,d,e))<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.907 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: (a,b,(c,d,e))<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.907 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.907 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.907 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.908 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.908 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.909 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.909 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.910 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.911 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.912 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.913 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.914 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      15.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.914 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">43 ms</div>
</em><em class="status">passed</em>[266] 266</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.916 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 266.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.916 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.916 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.917 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.951 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.951 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \{\vec{\xi}^{\mu},\tau^{\mu}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.952 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \{\vec{\xi}^{\mu},\tau^{\mu}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.952 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \{\vec{\xi}^{\mu},\tau^{\mu}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.952 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \{\vec{\xi}^{\mu},\tau^{\mu}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.952 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\{\vec{\xi}^{\mu},\tau^{\mu}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.952 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \{\vec{\xi}^{\mu},\tau^{\mu}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.953 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.953 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.953 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.954 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.954 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.955 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.955 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.956 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.957 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.957 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.957 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.957 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.957 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.957 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.958 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.958 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.958 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      9.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.958 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">43 ms</div>
</em><em class="status">passed</em>[267] 267</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.959 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 267.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.960 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.960 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.960 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.961 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.961 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.994 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   H=H_{S}+\sum_{i=1}^{N}H_{i}+V_{0}\otimes\sum_{i=1}^{N}A_{i}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  H=H_{S}+\sum_{i=1}^{N}H_{i}+V_{0}\otimes\sum_{i=1}^{N}A_{i}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       H=H_{S}+\sum_{i=1}^{N}H_{i}+V_{0}\otimes\sum_{i=1}^{N}A_{i}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: H=H_{S}+\sum_{i=1}^{N}H_{i}+V_{0}\otimes\sum_{i=1}^{N}A_{i}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:H=H_{S}+\sum_{i=1}^{N}H_{i}+V_{0}\otimes\sum_{i=1}^{N}A_{i}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: H=H_{S}+\sum_{i=1}^{N}H_{i}+V_{0}\otimes\sum_{i=1}^{N}A_{i}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.995 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.996 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.996 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.996 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.997 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.998 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:38.999 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.001 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      30.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.002 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 20.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">45 ms</div>
</em><em class="status">passed</em>[268] 268</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.003 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 268.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.003 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.003 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.004 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.004 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.004 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.039 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.039 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   N\times N<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.040 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  N\times N<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.040 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       N\times N<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.040 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: N\times N<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.041 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:N\times N<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.041 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: N\times N<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.041 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.041 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.041 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.042 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.043 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.044 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.045 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.046 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.046 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.046 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.046 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.046 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.046 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.047 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.047 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.047 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.047 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      1.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.047 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">42 ms</div>
</em><em class="status">passed</em>[269] 269</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.048 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 269.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.049 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.049 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.049 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.050 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.050 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.083 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.083 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \mathtt{list}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.083 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \mathtt{list}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.083 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \mathtt{list}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.083 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \mathtt{list}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.083 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\mathtt{list}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \mathtt{list}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.084 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.085 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.085 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.085 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.086 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.087 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.087 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.088 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.088 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.088 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.088 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.089 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.089 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.089 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      0.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.089 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 0.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">38 ms</div>
</em><em class="status">passed</em>[270] 270</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.090 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 270.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.091 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.091 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.092 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.093 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.094 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.121 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.121 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \Phi=\Phi^{(r)}\Phi^{(s)}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.121 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \Phi=\Phi^{(r)}\Phi^{(s)}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.122 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \Phi=\Phi^{(r)}\Phi^{(s)}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.122 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \Phi=\Phi^{(r)}\Phi^{(s)}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.122 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Phi=\Phi^{(r)}\Phi^{(s)}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.122 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Phi=\Phi^{(r)}\Phi^{(s)}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.122 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.123 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.123 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.123 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.124 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.124 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.124 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.125 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.125 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.126 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.126 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.127 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.127 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.127 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.127 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.127 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.127 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      7.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.128 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">35 ms</div>
</em><em class="status">passed</em>[271] 271</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.128 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 271.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.128 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.129 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.129 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.129 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.129 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.157 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \displaystyle 1-a\,\bar{\partial}_{p}\,,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \displaystyle 1-a\,\bar{\partial}_{p}\,,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \displaystyle 1-a\,\bar{\partial}_{p}\,,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \displaystyle 1-a\,\bar{\partial}_{p}\,,<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\displaystyle 1-a\,\bar{\partial}_{p}\<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.158 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \displaystyle 1-a\,\bar{\partial}_{p}\<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.159 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.159 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.159 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.160 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.161 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.162 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.163 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      16.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.163 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 22.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">52 ms</div>
</em><em class="status">passed</em>[272] 272</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 272.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.164 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.165 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.166 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.211 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.211 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   NP<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  NP<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       NP<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: NP<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:NP<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: NP<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.212 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.213 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.213 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.213 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.213 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.214 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.214 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.214 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.214 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.214 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.214 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      4.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.215 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 5.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">35 ms</div>
</em><em class="status">passed</em>[273] 273</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 273.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.216 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.217 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   f:{\mathbb{N}_{1}}\to{\mathbb{N}_{1}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.246 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  f:{\mathbb{N}_{1}}\to{\mathbb{N}_{1}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       f:{\mathbb{N}_{1}}\to{\mathbb{N}_{1}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: f:{\mathbb{N}_{1}}\to{\mathbb{N}_{1}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:f:{\mathbb{N}_{1}}\to{\mathbb{N}_{1}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: f:{\mathbb{N}_{1}}\to{\mathbb{N}_{1}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.247 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.248 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.249 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      9.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.250 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">38 ms</div>
</em><em class="status">passed</em>[274] 274</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 274.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.252 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.253 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.253 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.254 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.255 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.282 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.282 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   b(k)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  b(k)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       b(k)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: b(k)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:b(k)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: b(k)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.283 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.284 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.284 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.285 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.285 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.286 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.287 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.288 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.289 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.290 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 3.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">36 ms</div>
</em><em class="status">passed</em>[275] 275</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.291 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 275.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.292 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.292 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.292 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.294 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.295 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \displaystyle S\leq\frac{A}{4G},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \displaystyle S\leq\frac{A}{4G},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.321 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \displaystyle S\leq\frac{A}{4G},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \displaystyle S\leq\frac{A}{4G},<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\displaystyle S\leq\frac{A}{4G}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \displaystyle S\leq\frac{A}{4G}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.322 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.323 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.323 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.324 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.324 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.324 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.325 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.326 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      13.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 18.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">34 ms</div>
</em><em class="status">passed</em>[276] 276</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 276.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.327 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.328 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.329 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   (\eta_{\mu\nu})=\diag(-1,1,1,1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  (\eta_{\mu\nu})=\diag(-1,1,1,1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.354 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       (\eta_{\mu\nu})=\diag(-1,1,1,1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: (\eta_{\mu\nu})=\diag(-1,1,1,1)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:(\eta_{\mu\nu})=\diag(-1,1,1,1)<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: (\eta_{\mu\nu})=\diag(-1,1,1,1)<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.355 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.356 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.356 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.357 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.358 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.359 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.360 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      19.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 11.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">33 ms</div>
</em><em class="status">passed</em>[277] 277</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 277.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.361 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.362 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.362 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.363 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.363 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.388 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.388 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   U_{\pm}^{\dagger}=U_{\pm}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.388 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  U_{\pm}^{\dagger}=U_{\pm}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.389 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       U_{\pm}^{\dagger}=U_{\pm}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.389 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: U_{\pm}^{\dagger}=U_{\pm}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.389 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:U_{\pm}^{\dagger}=U_{\pm}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.389 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: U_{\pm}^{\dagger}=U_{\pm}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.389 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.389 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.389 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.390 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.390 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.391 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.391 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.392 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.392 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.392 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.392 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.393 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      10.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 6.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">42 ms</div>
</em><em class="status">passed</em>[278] 278</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.394 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 278.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.395 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.396 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   F_{\alpha\beta},\bar{F}_{{\dot{\alpha}}{\dot{\beta}}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.430 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  F_{\alpha\beta},\bar{F}_{{\dot{\alpha}}{\dot{\beta}}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       F_{\alpha\beta},\bar{F}_{{\dot{\alpha}}{\dot{\beta}}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: F_{\alpha\beta},\bar{F}_{{\dot{\alpha}}{\dot{\beta}}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:F_{\alpha\beta},\bar{F}_{{\dot{\alpha}}{\dot{\beta}}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: F_{\alpha\beta},\bar{F}_{{\dot{\alpha}}{\dot{\beta}}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.431 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.432 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.432 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.433 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.434 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.435 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      16.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.435 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 15.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">35 ms</div>
</em><em class="status">passed</em>[279] 279</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.437 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 279.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.437 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.438 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.438 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.439 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \nu_{\Psi}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.466 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \nu_{\Psi}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \nu_{\Psi}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \nu_{\Psi}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\nu_{\Psi}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \nu_{\Psi}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.467 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.468 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.469 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.470 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.470 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.470 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.471 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.471 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.471 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.471 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.471 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.472 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.472 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.472 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      3.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.472 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 1.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">35 ms</div>
</em><em class="status">passed</em>[280] 280</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.473 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 280.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.474 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.474 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.474 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.475 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.476 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.500 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   \Delta x\Delta v\geq\frac{dm^{2}}{2}\left\langle E^{-3}\right\rangle.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  \Delta x\Delta v\geq\frac{dm^{2}}{2}\left\langle E^{-3}\right\rangle.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       \Delta x\Delta v\geq\frac{dm^{2}}{2}\left\langle E^{-3}\right\rangle.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: \Delta x\Delta v\geq\frac{dm^{2}}{2}\left\langle E^{-3}\right\rangle.<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:\Delta x\Delta v\geq\frac{dm^{2}}{2}\left\langle E^{-3}\right\rangle<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: \Delta x\Delta v\geq\frac{dm^{2}}{2}\left\langle E^{-3}\right\rangle<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.501 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.502 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.502 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.503 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.504 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.504 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.504 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.505 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.505 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.505 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.506 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.506 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.506 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.506 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.506 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      16.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.508 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 18.0<br/></span>
</li>
</ul>
</li>
<li class="level test">
<span><em class="time">
<div class="time">43 ms</div>
</em><em class="status">passed</em>[281] 281</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 281.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.509 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.510 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:58<br/></span>
</li>
<li class="text">
<span class="stdout"> - Successfully read from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.511 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse math TeX by POM-Tagger...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.541 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:99<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse POM tree to XML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.542 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:95<br/></span>
</li>
<li class="text">
<span class="stdout"> -  Pre-Processing for:   v_{p}=\frac{1}{\partial_{r}R}=1+\frac{1}{r^{2}\omega^{2}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Surround underscore:  v_{p}=\frac{1}{\partial_{r}R}=1+\frac{1}{r^{2}\omega^{2}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.543 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:106<br/></span>
</li>
<li class="text">
<span class="stdout"> - HTML Unescaped:       v_{p}=\frac{1}{\partial_{r}R}=1+\frac{1}{r^{2}\omega^{2}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:109<br/></span>
</li>
<li class="text">
<span class="stdout"> - Commented linebreaks: v_{p}=\frac{1}{\partial_{r}R}=1+\frac{1}{r^{2}\omega^{2}}<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.544 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Replace bad end/start:v_{p}=\frac{1}{\partial_{r}R}=1+\frac{1}{r^{2}\omega^{2}}<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:114<br/></span>
</li>
<li class="text">
<span class="stdout"> - Finalize Pre-Processing for POM-Tagger: v_{p}=\frac{1}{\partial_{r}R}=1+\frac{1}{r^{2}\omega^{2}}<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:127<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex string to document...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:132<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init linked piped in and output streams<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.545 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:137<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create document builder factory<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:142<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse latex expression by POM-Tagger<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:147<br/></span>
</li>
<li class="text">
<span class="stdout"> - Create and start parallel thread to listen on piped input stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.546 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:155<br/></span>
</li>
<li class="text">
<span class="stdout"> - Starting writing process to connected piped output stream...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:76<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start XML writing process...<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:80<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start document writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.547 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:88<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start recursive writing..<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:92<br/></span>
</li>
<li class="text">
<span class="stdout"> - Close document.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] PomXmlWriter:96<br/></span>
</li>
<li class="text">
<span class="stdout"> - XML writing successful!<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:159<br/></span>
</li>
<li class="text">
<span class="stdout"> - Done writing to output stream. Close stream<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.548 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:164<br/></span>
</li>
<li class="text">
<span class="stdout"> - Get result from parallel thread (the document object)<br/></span>
</li>
<li class="text">
<span class="stdout">[TRACE]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.549 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] MathParser:169<br/></span>
</li>
<li class="text">
<span class="stdout"> - Shutdown parallel service.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.549 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:103<br/></span>
</li>
<li class="text">
<span class="stdout"> - Init tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.549 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:113<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start tree comparison.<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.550 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:118<br/></span>
</li>
<li class="text">
<span class="stdout"> - Content-Distance:      22.0<br/></span>
</li>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.551 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:119<br/></span>
</li>
<li class="text">
<span class="stdout"> - Presentation-Distance: 11.0<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">21 ms</div>
</em><em class="status">failed</em>[282] 282</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.555 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 282.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.555 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.556 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.556 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.557 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 282<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">6 ms</div>
</em><em class="status">failed</em>[283] 283</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.579 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 283.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.580 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.581 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 283<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">11 ms</div>
</em><em class="status">failed</em>[284] 284</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.588 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 284.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.590 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.591 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.592 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.594 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 284<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">12 ms</div>
</em><em class="status">failed</em>[285] 285</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.601 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 285.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.601 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.602 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.604 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.605 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 285<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">7 ms</div>
</em><em class="status">failed</em>[286] 286</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.614 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 286.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.615 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.615 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.616 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.616 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 286<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">8 ms</div>
</em><em class="status">failed</em>[287] 287</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.624 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 287.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.625 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.626 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.627 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.629 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 287<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">8 ms</div>
</em><em class="status">failed</em>[288] 288</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.634 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 288.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.635 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.635 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.636 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.637 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 288<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">4 ms</div>
</em><em class="status">failed</em>[289] 289</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.644 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 289.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.645 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.645 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.645 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.646 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 289<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">7 ms</div>
</em><em class="status">failed</em>[290] 290</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.650 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 290.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.650 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.651 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.651 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.651 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 290<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">8 ms</div>
</em><em class="status">failed</em>[291] 291</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.659 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 291.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.660 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.661 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.662 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.664 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 291<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">8 ms</div>
</em><em class="status">failed</em>[292] 292</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.668 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 292.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.669 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.671 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.672 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 292<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">5 ms</div>
</em><em class="status">failed</em>[293] 293</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.679 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 293.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.680 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.681 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 293<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">10 ms</div>
</em><em class="status">failed</em>[294] 294</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.685 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 294.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.687 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.688 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.689 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.690 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 294<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">6 ms</div>
</em><em class="status">failed</em>[295] 295</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.697 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 295.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.698 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.698 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.699 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.699 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 295<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">10 ms</div>
</em><em class="status">failed</em>[296] 296</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.705 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 296.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.706 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.707 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.709 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.711 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 296<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">6 ms</div>
</em><em class="status">failed</em>[297] 297</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.716 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 297.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.717 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.718 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.718 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 297<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">12 ms</div>
</em><em class="status">failed</em>[298] 298</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.725 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 298.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.727 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.728 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.730 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.731 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 298<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">7 ms</div>
</em><em class="status">failed</em>[299] 299</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.739 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 299.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.739 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.740 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:87<br/></span>
</li>
<li class="text">
<span class="stdout"> - Parse MML to Documents...<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.741 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] XmlDocumentReader:54<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start reading process from XML file.<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.742 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.io.StringReader.&lt;init&gt;(StringReader.java:50) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.XmlDocumentReader.getDocumentFromXMLString(XmlDocumentReader.java:56) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.init(MathMLDocumentReader.java:46) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.xml.MathMLDocumentReader.&lt;init&gt;(MathMLDocumentReader.java:41) ~[classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:88) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 299<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
<li class="level test failed open">
<span><em class="time">
<div class="time">7 ms</div>
</em><em class="status">failed</em>[300] 300</span>
<ul>
<li class="text">
<span class="stdout">[INFO ]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.748 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:81<br/></span>
</li>
<li class="text">
<span class="stdout"> - Start test: 300.json<br/></span>
</li>
<li class="text">
<span class="stdout">[DEBUG]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.749 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:82<br/></span>
</li>
<li class="text">
<span class="stdout"> - Load MML...<br/></span>
</li>
<li class="text">
<span class="stdout">[ERROR]<br/></span>
</li>
<li class="text">
<span class="stdout"> 13:57:39.749 <br/></span>
</li>
<li class="text">
<span class="stdout">[main] GouldiAutomaticComparisonTest:122<br/></span>
</li>
<li class="text">
<span class="stdout"> - Error in comparison test.<br/>java.lang.NullPointerException: null<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:84) ~[test-classes/:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source) ~[?:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376) ~[junit-platform-commons-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37) ~[junit-jupiter-engine-5.0.0-M5.jar:5.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ~[?:1.8.0_151]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ~[junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) [junit-platform-engine-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) [junit-platform-launcher-1.0.0-M5.jar:1.0.0-M5]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65) [junit5-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stdout">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:?]<br/></span>
</li>
<li class="text">
<span class="stdout"></span>
</li>
<li class="text">
<span class="stderr">org.opentest4j.AssertionFailedError: Error occurred: 300<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:48)<br/>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:36)<br/>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:55)<br/>	at com.formulasearchengine.mathosphere.pomlp.pom.GouldiAutomaticComparisonTest.treeComparison(GouldiAutomaticComparisonTest.java:123)<br/>	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)<br/>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br/>	at java.lang.reflect.Method.invoke(Method.java:498)<br/>	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:376)<br/>	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:114)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.lambda$invokeTestMethod$6(MethodTestDescriptor.java:167)<br/>	at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.invokeTestMethod(MethodTestDescriptor.java:163)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:110)<br/>	at org.junit.jupiter.engine.descriptor.MethodTestDescriptor.execute(MethodTestDescriptor.java:57)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$0(HierarchicalTestExecutor.java:85)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:117)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:87)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250)<br/>	at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110)<br/>	at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:270)<br/>	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1380)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:87)<br/>	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:37)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)<br/>	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)<br/>	at java.util.Iterator.forEachRemaining(Iterator.java:116)<br/>	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)<br/>	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br/>	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br/>	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)<br/>	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)<br/>	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br/>	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)<br/>	at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)<br/>	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)<br/>	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)<br/>	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:65)<br/>	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)<br/>	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)<br/></span>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div id="footer">
<p>Generated by IntelliJ IDEA on 12/21/17 2:06 PM</p>
</div>
</body>
</html>
